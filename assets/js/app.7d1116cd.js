(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(n){function e(e){for(var r,o,s=e[0],l=e[1],c=e[2],p=0,d=[];p<s.length;p++)o=s[p],Object.prototype.hasOwnProperty.call(a,o)&&a[o]&&d.push(a[o][0]),a[o]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(n[r]=l[r]);for(u&&u(e);d.length;)d.shift()();return i.push.apply(i,c||[]),t()}function t(){for(var n,e=0;e<i.length;e++){for(var t=i[e],r=!0,s=1;s<t.length;s++){var l=t[s];0!==a[l]&&(r=!1)}r&&(i.splice(e--,1),n=o(o.s=t[0]))}return n}var r={},a={1:0},i=[];function o(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,o),t.l=!0,t.exports}o.e=function(n){var e=[],t=a[n];if(0!==t)if(t)e.push(t[2]);else{var r=new Promise((function(e,r){t=a[n]=[e,r]}));e.push(t[2]=r);var i,s=document.createElement("script");s.charset="utf-8",s.timeout=120,o.nc&&s.setAttribute("nonce",o.nc),s.src=function(n){return o.p+"assets/js/"+({}[n]||n)+"."+{2:"f6c26bfc",3:"7a437186",4:"9ccfb5d5",5:"573dfa2c",6:"655bfde6",7:"babcfb3d",8:"71593ea4",9:"b9ccbf27",10:"046d08d1",11:"5c5abcc8",12:"f62d9829",13:"4da237a9",14:"48133eb7",15:"48a2e085",16:"81c035c3",17:"5efa7f95",18:"86e07264",19:"2c2a487d",20:"c4ffcb54",21:"51a48402",22:"bf514554",23:"d4182788",24:"4dbd20f7",25:"700af0f5",26:"ae7d5d12",27:"1d660e1f",28:"e301b416",29:"0fd72cb1",30:"63cb3594",31:"e64cb78c",32:"fe425a1c",33:"27558bfc",34:"d0b64862"}[n]+".js"}(n);var l=new Error;i=function(e){s.onerror=s.onload=null,clearTimeout(c);var t=a[n];if(0!==t){if(t){var r=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;l.message="Loading chunk "+n+" failed.\n("+r+": "+i+")",l.name="ChunkLoadError",l.type=r,l.request=i,t[1](l)}a[n]=void 0}};var c=setTimeout((function(){i({type:"timeout",target:s})}),12e4);s.onerror=s.onload=i,document.head.appendChild(s)}return Promise.all(e)},o.m=n,o.c=r,o.d=function(n,e,t){o.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},o.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},o.t=function(n,e){if(1&e&&(n=o(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)o.d(t,r,function(e){return n[e]}.bind(null,r));return t},o.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return o.d(e,"a",e),e},o.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},o.p="/",o.oe=function(n){throw console.error(n),n};var s=window.webpackJsonp=window.webpackJsonp||[],l=s.push.bind(s);s.push=e,s=s.slice();for(var c=0;c<s.length;c++)e(s[c]);var u=l;i.push([102,0]),t()}([function(n,e,t){var r=t(55),a=r.all;n.exports=r.IS_HTMLDDA?function(n){return"function"==typeof n||n===a}:function(n){return"function"==typeof n}},function(n,e,t){var r=t(27),a=Function.prototype,i=a.call,o=r&&a.bind.bind(i,i);n.exports=r?o:function(n){return function(){return i.apply(n,arguments)}}},function(n,e){n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,e){var t=function(n){return n&&n.Math==Math&&n};n.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof global&&global)||function(){return this}()||Function("return this")()},function(n,e,t){var r=t(2);n.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(n,e){var t=Array.isArray;n.exports=t},function(n,e,t){var r=t(69),a="object"==typeof self&&self&&self.Object===Object&&self,i=r||a||Function("return this")();n.exports=i},function(n,e,t){"use strict";function r(n,e,t,r,a,i,o,s){var l,c="function"==typeof n?n.options:n;if(e&&(c.render=e,c.staticRenderFns=t,c._compiled=!0),r&&(c.functional=!0),i&&(c._scopeId="data-v-"+i),o?(l=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),a&&a.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(o)},c._ssrRegister=l):a&&(l=s?function(){a.call(this,(c.functional?this.parent:this).$root.$options.shadowRoot)}:a),l)if(c.functional){c._injectStyles=l;var u=c.render;c.render=function(n,e){return l.call(e),u(n,e)}}else{var p=c.beforeCreate;c.beforeCreate=p?[].concat(p,l):[l]}return{exports:n,options:c}}t.d(e,"a",(function(){return r}))},function(n,e,t){var r=t(1),a=t(32),i=r({}.hasOwnProperty);n.exports=Object.hasOwn||function(n,e){return i(a(n),e)}},function(n,e,t){var r=t(0),a=t(55),i=a.all;n.exports=a.IS_HTMLDDA?function(n){return"object"==typeof n?null!==n:r(n)||n===i}:function(n){return"object"==typeof n?null!==n:r(n)}},function(n,e,t){var r=t(163),a=t(166);n.exports=function(n,e){var t=a(n,e);return r(t)?t:void 0}},function(n,e,t){"use strict";t.d(e,"e",(function(){return r})),t.d(e,"b",(function(){return i})),t.d(e,"j",(function(){return o})),t.d(e,"g",(function(){return l})),t.d(e,"h",(function(){return c})),t.d(e,"i",(function(){return u})),t.d(e,"c",(function(){return p})),t.d(e,"f",(function(){return d})),t.d(e,"l",(function(){return h})),t.d(e,"m",(function(){return m})),t.d(e,"d",(function(){return f})),t.d(e,"k",(function(){return v})),t.d(e,"n",(function(){return b})),t.d(e,"a",(function(){return w}));t(16);const r=/#.*$/,a=/\.(md|html)$/,i=/\/$/,o=/^[a-z]+:/i;function s(n){return decodeURI(n).replace(r,"").replace(a,"")}function l(n){return o.test(n)}function c(n){return/^mailto:/.test(n)}function u(n){return/^tel:/.test(n)}function p(n){if(l(n))return n;if(!n)return"404";const e=n.match(r),t=e?e[0]:"",a=s(n);return i.test(a)?n:a+".html"+t}function d(n,e){const t=n.hash,a=function(n){const e=n&&n.match(r);if(e)return e[0]}(e);if(a&&t!==a)return!1;return s(n.path)===s(e)}function h(n,e,t){if(l(e))return{type:"external",path:e};t&&(e=function(n,e,t){const r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;const a=e.split("/");t&&a[a.length-1]||a.pop();const i=n.replace(/^\//,"").split("/");for(let n=0;n<i.length;n++){const e=i[n];".."===e?a.pop():"."!==e&&a.push(e)}""!==a[0]&&a.unshift("");return a.join("/")}(e,t));const r=s(e);for(let e=0;e<n.length;e++)if(s(n[e].regularPath)===r)return Object.assign({},n[e],{type:"page",path:p(n[e].path)});return console.error(`[vuepress] No matching page found for sidebar item "${e}"`),{}}function m(n,e,t,r){const{pages:a,themeConfig:i}=t,o=r&&i.locales&&i.locales[r]||i;if("auto"===(n.frontmatter.sidebar||o.sidebar||i.sidebar))return g(n);const s=o.sidebar||i.sidebar;if(s){const{base:t,config:r}=function(n,e){if(Array.isArray(e))return{base:"/",config:e};for(const r in e)if(0===(t=n,/(\.html|\/)$/.test(t)?t:t+"/").indexOf(encodeURI(r)))return{base:r,config:e[r]};var t;return{}}(e,s);return"auto"===r?g(n):r?r.map(n=>function n(e,t,r,a=1){if("string"==typeof e)return h(t,e,r);if(Array.isArray(e))return Object.assign(h(t,e[0],r),{title:e[1]});{a>3&&console.error("[vuepress] detected a too deep nested sidebar group.");const i=e.children||[];return 0===i.length&&e.path?Object.assign(h(t,e.path,r),{title:e.title}):{type:"group",path:e.path,title:e.title,sidebarDepth:e.sidebarDepth,initialOpenGroupIndex:e.initialOpenGroupIndex,children:i.map(e=>n(e,t,r,a+1)),collapsable:!1!==e.collapsable}}}(n,a,t)):[]}return[]}function g(n){const e=f(n.headers||[]);return[{type:"group",collapsable:!1,title:n.title,path:null,children:e.map(e=>({type:"auto",title:e.title,basePath:n.path,path:n.path+"#"+e.slug,children:e.children||[]}))}]}function f(n){let e;return(n=n.map(n=>Object.assign({},n))).forEach(n=>{2===n.level?e=n:e&&(e.children||(e.children=[])).push(n)}),n.filter(n=>2===n.level)}function v(n){return Object.assign(n,{type:n.items&&n.items.length?"links":"link"})}function b(n){return Object.prototype.toString.call(n).match(/\[object (.*?)\]/)[1].toLowerCase()}function y(n){let e=n.frontmatter.date||n.lastUpdated||new Date,t=new Date(e);return"Invalid Date"==t&&e&&(t=new Date(e.replace(/-/g,"/"))),t.getTime()}function w(n,e){return y(e)-y(n)}},function(n,e){n.exports=function(n){return null!=n&&"object"==typeof n}},function(n,e,t){var r=t(15),a=t(148),i=t(149),o=r?r.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":o&&o in Object(n)?a(n):i(n)}},function(n,e,t){var r=t(4),a=t(17),i=t(35);n.exports=r?function(n,e,t){return a.f(n,e,i(1,t))}:function(n,e,t){return n[e]=t,n}},function(n,e,t){var r=t(6).Symbol;n.exports=r},function(n,e,t){"use strict";var r=t(26),a=t(32),i=t(33),o=t(127),s=t(129);r({target:"Array",proto:!0,arity:1,forced:t(2)((function(){return 4294967297!==[].push.call({length:4294967296},1)}))||!function(){try{Object.defineProperty([],"length",{writable:!1}).push()}catch(n){return n instanceof TypeError}}()},{push:function(n){var e=a(this),t=i(e),r=arguments.length;s(t+r);for(var l=0;l<r;l++)e[t]=arguments[l],t++;return o(e,t),t}})},function(n,e,t){var r=t(4),a=t(64),i=t(98),o=t(25),s=t(54),l=TypeError,c=Object.defineProperty,u=Object.getOwnPropertyDescriptor;e.f=r?i?function(n,e,t){if(o(n),e=s(e),o(t),"function"==typeof n&&"prototype"===e&&"value"in t&&"writable"in t&&!t.writable){var r=u(n,e);r&&r.writable&&(n[e]=t.value,t={configurable:"configurable"in t?t.configurable:r.configurable,enumerable:"enumerable"in t?t.enumerable:r.enumerable,writable:!1})}return c(n,e,t)}:c:function(n,e,t){if(o(n),e=s(e),o(t),a)try{return c(n,e,t)}catch(n){}if("get"in t||"set"in t)throw l("Accessors not supported");return"value"in t&&(n[e]=t.value),n}},function(n,e,t){var r=t(1),a=r({}.toString),i=r("".slice);n.exports=function(n){return i(a(n),8,-1)}},function(n,e,t){var r=t(153),a=t(154),i=t(155),o=t(156),s=t(157);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=a,l.prototype.get=i,l.prototype.has=o,l.prototype.set=s,n.exports=l},function(n,e,t){var r=t(71);n.exports=function(n,e){for(var t=n.length;t--;)if(r(n[t][0],e))return t;return-1}},function(n,e,t){var r=t(10)(Object,"create");n.exports=r},function(n,e,t){var r=t(175);n.exports=function(n,e){var t=n.__data__;return r(e)?t["string"==typeof e?"string":"hash"]:t.map}},function(n,e,t){var r=t(45);n.exports=function(n){if("string"==typeof n||r(n))return n;var e=n+"";return"0"==e&&1/n==-1/0?"-0":e}},function(n,e,t){var r,a;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(a="function"==typeof(r=function(){var n,e,t={version:"0.2.0"},r=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function a(n,e,t){return n<e?e:n>t?t:n}function i(n){return 100*(-1+n)}t.configure=function(n){var e,t;for(e in n)void 0!==(t=n[e])&&n.hasOwnProperty(e)&&(r[e]=t);return this},t.status=null,t.set=function(n){var e=t.isStarted();n=a(n,r.minimum,1),t.status=1===n?null:n;var l=t.render(!e),c=l.querySelector(r.barSelector),u=r.speed,p=r.easing;return l.offsetWidth,o((function(e){""===r.positionUsing&&(r.positionUsing=t.getPositioningCSS()),s(c,function(n,e,t){var a;return(a="translate3d"===r.positionUsing?{transform:"translate3d("+i(n)+"%,0,0)"}:"translate"===r.positionUsing?{transform:"translate("+i(n)+"%,0)"}:{"margin-left":i(n)+"%"}).transition="all "+e+"ms "+t,a}(n,u,p)),1===n?(s(l,{transition:"none",opacity:1}),l.offsetWidth,setTimeout((function(){s(l,{transition:"all "+u+"ms linear",opacity:0}),setTimeout((function(){t.remove(),e()}),u)}),u)):setTimeout(e,u)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var n=function(){setTimeout((function(){t.status&&(t.trickle(),n())}),r.trickleSpeed)};return r.trickle&&n(),this},t.done=function(n){return n||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(n){var e=t.status;return e?("number"!=typeof n&&(n=(1-e)*a(Math.random()*e,.1,.95)),e=a(e+n,0,.994),t.set(e)):t.start()},t.trickle=function(){return t.inc(Math.random()*r.trickleRate)},n=0,e=0,t.promise=function(r){return r&&"resolved"!==r.state()?(0===e&&t.start(),n++,e++,r.always((function(){0==--e?(n=0,t.done()):t.set((n-e)/n)})),this):this},t.render=function(n){if(t.isRendered())return document.getElementById("nprogress");c(document.documentElement,"nprogress-busy");var e=document.createElement("div");e.id="nprogress",e.innerHTML=r.template;var a,o=e.querySelector(r.barSelector),l=n?"-100":i(t.status||0),u=document.querySelector(r.parent);return s(o,{transition:"all 0 linear",transform:"translate3d("+l+"%,0,0)"}),r.showSpinner||(a=e.querySelector(r.spinnerSelector))&&d(a),u!=document.body&&c(u,"nprogress-custom-parent"),u.appendChild(e),e},t.remove=function(){u(document.documentElement,"nprogress-busy"),u(document.querySelector(r.parent),"nprogress-custom-parent");var n=document.getElementById("nprogress");n&&d(n)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var n=document.body.style,e="WebkitTransform"in n?"Webkit":"MozTransform"in n?"Moz":"msTransform"in n?"ms":"OTransform"in n?"O":"";return e+"Perspective"in n?"translate3d":e+"Transform"in n?"translate":"margin"};var o=function(){var n=[];function e(){var t=n.shift();t&&t(e)}return function(t){n.push(t),1==n.length&&e()}}(),s=function(){var n=["Webkit","O","Moz","ms"],e={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(n,e){return e.toUpperCase()})),e[t]||(e[t]=function(e){var t=document.body.style;if(e in t)return e;for(var r,a=n.length,i=e.charAt(0).toUpperCase()+e.slice(1);a--;)if((r=n[a]+i)in t)return r;return e}(t))}function r(n,e,r){e=t(e),n.style[e]=r}return function(n,e){var t,a,i=arguments;if(2==i.length)for(t in e)void 0!==(a=e[t])&&e.hasOwnProperty(t)&&r(n,t,a);else r(n,i[1],i[2])}}();function l(n,e){return("string"==typeof n?n:p(n)).indexOf(" "+e+" ")>=0}function c(n,e){var t=p(n),r=t+e;l(t,e)||(n.className=r.substring(1))}function u(n,e){var t,r=p(n);l(n,e)&&(t=r.replace(" "+e+" "," "),n.className=t.substring(1,t.length-1))}function p(n){return(" "+(n.className||"")+" ").replace(/\s+/gi," ")}function d(n){n&&n.parentNode&&n.parentNode.removeChild(n)}return t})?r.call(e,t,e,n):r)||(n.exports=a)},function(n,e,t){var r=t(9),a=String,i=TypeError;n.exports=function(n){if(r(n))return n;throw i(a(n)+" is not an object")}},function(n,e,t){var r=t(3),a=t(51).f,i=t(14),o=t(110),s=t(37),l=t(65),c=t(123);n.exports=function(n,e){var t,u,p,d,h,m=n.target,g=n.global,f=n.stat;if(t=g?r:f?r[m]||s(m,{}):(r[m]||{}).prototype)for(u in e){if(d=e[u],p=n.dontCallGetSet?(h=a(t,u))&&h.value:t[u],!c(g?u:m+(f?".":"#")+u,n.forced)&&void 0!==p){if(typeof d==typeof p)continue;l(d,p)}(n.sham||p&&p.sham)&&i(d,"sham",!0),o(t,u,d,n)}}},function(n,e,t){var r=t(2);n.exports=!r((function(){var n=function(){}.bind();return"function"!=typeof n||n.hasOwnProperty("prototype")}))},function(n,e,t){var r=t(47),a=t(52);n.exports=function(n){return r(a(n))}},function(n,e,t){var r=t(3),a=t(0),i=function(n){return a(n)?n:void 0};n.exports=function(n,e){return arguments.length<2?i(r[n]):r[n]&&r[n][e]}},function(n,e,t){var r=t(0),a=t(108),i=TypeError;n.exports=function(n){if(r(n))return n;throw i(a(n)+" is not a function")}},function(n,e,t){var r=t(3),a=t(61),i=t(8),o=t(63),s=t(59),l=t(58),c=r.Symbol,u=a("wks"),p=l?c.for||c:c&&c.withoutSetter||o;n.exports=function(n){return i(u,n)||(u[n]=s&&i(c,n)?c[n]:p("Symbol."+n)),u[n]}},function(n,e,t){var r=t(52),a=Object;n.exports=function(n){return a(r(n))}},function(n,e,t){var r=t(121);n.exports=function(n){return r(n.length)}},function(n,e,t){var r=t(27),a=Function.prototype.call;n.exports=r?a.bind(a):function(){return a.apply(a,arguments)}},function(n,e){n.exports=function(n,e){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:e}}},function(n,e,t){var r=t(3),a=t(37),i=r["__core-js_shared__"]||a("__core-js_shared__",{});n.exports=i},function(n,e,t){var r=t(3),a=Object.defineProperty;n.exports=function(n,e){try{a(r,n,{value:e,configurable:!0,writable:!0})}catch(t){r[n]=e}return e}},function(n,e,t){var r=t(147),a=t(12),i=Object.prototype,o=i.hasOwnProperty,s=i.propertyIsEnumerable,l=r(function(){return arguments}())?r:function(n){return a(n)&&o.call(n,"callee")&&!s.call(n,"callee")};n.exports=l},function(n,e,t){var r=t(10)(t(6),"Map");n.exports=r},function(n,e){n.exports=function(n){var e=typeof n;return null!=n&&("object"==e||"function"==e)}},function(n,e,t){var r=t(167),a=t(174),i=t(176),o=t(177),s=t(178);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=a,l.prototype.get=i,l.prototype.has=o,l.prototype.set=s,n.exports=l},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n){t[++e]=n})),t}},function(n,e){n.exports=function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}},function(n,e,t){var r=t(5),a=t(45),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,o=/^\w*$/;n.exports=function(n,e){if(r(n))return!1;var t=typeof n;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=n&&!a(n))||(o.test(n)||!i.test(n)||null!=e&&n in Object(e))}},function(n,e,t){var r=t(13),a=t(12);n.exports=function(n){return"symbol"==typeof n||a(n)&&"[object Symbol]"==r(n)}},function(n,e){n.exports=function(n){return n}},function(n,e,t){var r=t(1),a=t(2),i=t(18),o=Object,s=r("".split);n.exports=a((function(){return!o("z").propertyIsEnumerable(0)}))?function(n){return"String"==i(n)?s(n,""):o(n)}:o},function(n,e){n.exports={}},function(n,e){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,e){var t=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,i=/^0o[0-7]+$/i,o=parseInt,s="object"==typeof global&&global&&global.Object===Object&&global,l="object"==typeof self&&self&&self.Object===Object&&self,c=s||l||Function("return this")(),u=Object.prototype.toString,p=Math.max,d=Math.min,h=function(){return c.Date.now()};function m(n){var e=typeof n;return!!n&&("object"==e||"function"==e)}function g(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==u.call(n)}(n))return NaN;if(m(n)){var e="function"==typeof n.valueOf?n.valueOf():n;n=m(e)?e+"":e}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(t,"");var s=a.test(n);return s||i.test(n)?o(n.slice(2),s?2:8):r.test(n)?NaN:+n}n.exports=function(n,e,t){var r,a,i,o,s,l,c=0,u=!1,f=!1,v=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function b(e){var t=r,i=a;return r=a=void 0,c=e,o=n.apply(i,t)}function y(n){return c=n,s=setTimeout(x,e),u?b(n):o}function w(n){var t=n-l;return void 0===l||t>=e||t<0||f&&n-c>=i}function x(){var n=h();if(w(n))return k(n);s=setTimeout(x,function(n){var t=e-(n-l);return f?d(t,i-(n-c)):t}(n))}function k(n){return s=void 0,v&&r?b(n):(r=a=void 0,o)}function _(){var n=h(),t=w(n);if(r=arguments,a=this,l=n,t){if(void 0===s)return y(l);if(f)return s=setTimeout(x,e),b(l)}return void 0===s&&(s=setTimeout(x,e)),o}return e=g(e)||0,m(t)&&(u=!!t.leading,i=(f="maxWait"in t)?p(g(t.maxWait)||0,e):i,v="trailing"in t?!!t.trailing:v),_.cancel=function(){void 0!==s&&clearTimeout(s),c=0,r=l=a=s=void 0},_.flush=function(){return void 0===s?o:k(h())},_}},function(n,e,t){var r=t(4),a=t(34),i=t(104),o=t(35),s=t(28),l=t(54),c=t(8),u=t(64),p=Object.getOwnPropertyDescriptor;e.f=r?p:function(n,e){if(n=s(n),e=l(e),u)try{return p(n,e)}catch(n){}if(c(n,e))return o(!a(i.f,n,e),n[e])}},function(n,e,t){var r=t(53),a=TypeError;n.exports=function(n){if(r(n))throw a("Can't call method on "+n);return n}},function(n,e){n.exports=function(n){return null==n}},function(n,e,t){var r=t(105),a=t(56);n.exports=function(n){var e=r(n,"string");return a(e)?e:e+""}},function(n,e){var t="object"==typeof document&&document.all,r=void 0===t&&void 0!==t;n.exports={all:t,IS_HTMLDDA:r}},function(n,e,t){var r=t(29),a=t(0),i=t(57),o=t(58),s=Object;n.exports=o?function(n){return"symbol"==typeof n}:function(n){var e=r("Symbol");return a(e)&&i(e.prototype,s(n))}},function(n,e,t){var r=t(1);n.exports=r({}.isPrototypeOf)},function(n,e,t){var r=t(59);n.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(n,e,t){var r=t(60),a=t(2);n.exports=!!Object.getOwnPropertySymbols&&!a((function(){var n=Symbol();return!String(n)||!(Object(n)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},function(n,e,t){var r,a,i=t(3),o=t(106),s=i.process,l=i.Deno,c=s&&s.versions||l&&l.version,u=c&&c.v8;u&&(a=(r=u.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!a&&o&&(!(r=o.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=o.match(/Chrome\/(\d+)/))&&(a=+r[1]),n.exports=a},function(n,e,t){var r=t(62),a=t(36);(n.exports=function(n,e){return a[n]||(a[n]=void 0!==e?e:{})})("versions",[]).push({version:"3.30.1",mode:r?"pure":"global",copyright:"© 2014-2023 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.30.1/LICENSE",source:"https://github.com/zloirock/core-js"})},function(n,e){n.exports=!1},function(n,e,t){var r=t(1),a=0,i=Math.random(),o=r(1..toString);n.exports=function(n){return"Symbol("+(void 0===n?"":n)+")_"+o(++a+i,36)}},function(n,e,t){var r=t(4),a=t(2),i=t(97);n.exports=!r&&!a((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(n,e,t){var r=t(8),a=t(116),i=t(51),o=t(17);n.exports=function(n,e,t){for(var s=a(e),l=o.f,c=i.f,u=0;u<s.length;u++){var p=s[u];r(n,p)||t&&r(t,p)||l(n,p,c(e,p))}}},function(n,e,t){var r=t(120);n.exports=function(n){var e=+n;return e!=e||0===e?0:r(e)}},function(n,e,t){var r=t(133),a=t(25),i=t(134);n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,e=!1,t={};try{(n=r(Object.prototype,"__proto__","set"))(t,[]),e=t instanceof Array}catch(n){}return function(t,r){return a(t),i(r),e?n(t,r):t.__proto__=r,t}}():void 0)},function(n,e){n.exports=function(n,e){for(var t=-1,r=e.length,a=n.length;++t<r;)n[a+t]=e[t];return n}},function(n,e){var t="object"==typeof global&&global&&global.Object===Object&&global;n.exports=t},function(n,e,t){var r=t(19),a=t(158),i=t(159),o=t(160),s=t(161),l=t(162);function c(n){var e=this.__data__=new r(n);this.size=e.size}c.prototype.clear=a,c.prototype.delete=i,c.prototype.get=o,c.prototype.has=s,c.prototype.set=l,n.exports=c},function(n,e){n.exports=function(n,e){return n===e||n!=n&&e!=e}},function(n,e,t){var r=t(13),a=t(40);n.exports=function(n){if(!a(n))return!1;var e=r(n);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(n,e){var t=Function.prototype.toString;n.exports=function(n){if(null!=n){try{return t.call(n)}catch(n){}try{return n+""}catch(n){}}return""}},function(n,e,t){var r=t(179),a=t(12);n.exports=function n(e,t,i,o,s){return e===t||(null==e||null==t||!a(e)&&!a(t)?e!=e&&t!=t:r(e,t,i,o,n,s))}},function(n,e,t){var r=t(76),a=t(182),i=t(77);n.exports=function(n,e,t,o,s,l){var c=1&t,u=n.length,p=e.length;if(u!=p&&!(c&&p>u))return!1;var d=l.get(n),h=l.get(e);if(d&&h)return d==e&&h==n;var m=-1,g=!0,f=2&t?new r:void 0;for(l.set(n,e),l.set(e,n);++m<u;){var v=n[m],b=e[m];if(o)var y=c?o(b,v,m,e,n,l):o(v,b,m,n,e,l);if(void 0!==y){if(y)continue;g=!1;break}if(f){if(!a(e,(function(n,e){if(!i(f,e)&&(v===n||s(v,n,t,o,l)))return f.push(e)}))){g=!1;break}}else if(v!==b&&!s(v,b,t,o,l)){g=!1;break}}return l.delete(n),l.delete(e),g}},function(n,e,t){var r=t(41),a=t(180),i=t(181);function o(n){var e=-1,t=null==n?0:n.length;for(this.__data__=new r;++e<t;)this.add(n[e])}o.prototype.add=o.prototype.push=a,o.prototype.has=i,n.exports=o},function(n,e){n.exports=function(n,e){return n.has(e)}},function(n,e,t){var r=t(192),a=t(198),i=t(82);n.exports=function(n){return i(n)?r(n):a(n)}},function(n,e,t){(function(n){var r=t(6),a=t(194),i=e&&!e.nodeType&&e,o=i&&"object"==typeof n&&n&&!n.nodeType&&n,s=o&&o.exports===i?r.Buffer:void 0,l=(s?s.isBuffer:void 0)||a;n.exports=l}).call(this,t(49)(n))},function(n,e){var t=/^(?:0|[1-9]\d*)$/;n.exports=function(n,e){var r=typeof n;return!!(e=null==e?9007199254740991:e)&&("number"==r||"symbol"!=r&&t.test(n))&&n>-1&&n%1==0&&n<e}},function(n,e,t){var r=t(195),a=t(196),i=t(197),o=i&&i.isTypedArray,s=o?a(o):r;n.exports=s},function(n,e,t){var r=t(72),a=t(43);n.exports=function(n){return null!=n&&a(n.length)&&!r(n)}},function(n,e,t){var r=t(10)(t(6),"Set");n.exports=r},function(n,e,t){var r=t(40);n.exports=function(n){return n==n&&!r(n)}},function(n,e){n.exports=function(n,e){return function(t){return null!=t&&(t[n]===e&&(void 0!==e||n in Object(t)))}}},function(n,e,t){var r=t(87),a=t(23);n.exports=function(n,e){for(var t=0,i=(e=r(e,n)).length;null!=n&&t<i;)n=n[a(e[t++])];return t&&t==i?n:void 0}},function(n,e,t){var r=t(5),a=t(44),i=t(209),o=t(212);n.exports=function(n,e){return r(n)?n:a(n,e)?[n]:i(o(n))}},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(145),a=t(150),i=t(221),o=t(229),s=t(238),l=t(101),c=i((function(n){var e=l(n);return s(e)&&(e=void 0),o(r(n,1,s,!0),a(e,2))}));n.exports=c},function(n,e,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var r=/["'&<>]/;n.exports=function(n){var e,t=""+n,a=r.exec(t);if(!a)return t;var i="",o=0,s=0;for(o=a.index;o<t.length;o++){switch(t.charCodeAt(o)){case 34:e="&quot;";break;case 38:e="&amp;";break;case 39:e="&#39;";break;case 60:e="&lt;";break;case 62:e="&gt;";break;default:continue}s!==o&&(i+=t.substring(s,o)),s=o+1,i+=e}return s!==o?i+t.substring(s,o):i}},function(n,e,t){"use strict";t.r(e);var r={name:"CodeBlock",props:{title:{type:String,required:!0},active:{type:Boolean,default:!1}}},a=(t(241),t(7)),i=Object(a.a)(r,(function(){return(0,this._self._c)("div",{staticClass:"theme-code-block",class:{"theme-code-block__active":this.active}},[this._t("default")],2)}),[],!1,null,"5a3e6e86",null);e.default=i.exports},function(n,e,t){"use strict";t.r(e);var r={name:"CodeGroup",data:()=>({codeTabs:[],activeCodeTabIndex:-1}),watch:{activeCodeTabIndex(n){this.codeTabs.forEach(n=>{n.elm.classList.remove("theme-code-block__active")}),this.codeTabs[n].elm.classList.add("theme-code-block__active")}},mounted(){this.codeTabs=(this.$slots.default||[]).filter(n=>Boolean(n.componentOptions)).map((n,e)=>(""===n.componentOptions.propsData.active&&(this.activeCodeTabIndex=e),{title:n.componentOptions.propsData.title,elm:n.elm})),-1===this.activeCodeTabIndex&&this.codeTabs.length>0&&(this.activeCodeTabIndex=0)},methods:{changeCodeTab(n){this.activeCodeTabIndex=n}}},a=(t(242),t(7)),i=Object(a.a)(r,(function(){var n=this,e=n._self._c;return e("div",{staticClass:"theme-code-group"},[e("div",{staticClass:"theme-code-group__nav"},[e("ul",{staticClass:"theme-code-group__ul"},n._l(n.codeTabs,(function(t,r){return e("li",{key:t.title,staticClass:"theme-code-group__li"},[e("button",{staticClass:"theme-code-group__nav-tab",class:{"theme-code-group__nav-tab-active":r===n.activeCodeTabIndex},on:{click:function(e){return n.changeCodeTab(r)}}},[n._v("\n            "+n._s(t.title)+"\n          ")])])})),0)]),n._v(" "),n._t("default"),n._v(" "),n.codeTabs.length<1?e("pre",{staticClass:"pre-blank"},[n._v("// Make sure to add code blocks to your code group")]):n._e()],2)}),[],!1,null,"392329f0",null);e.default=i.exports},function(n,e){n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(n,e,t){var r=t(3),a=t(9),i=r.document,o=a(i)&&a(i.createElement);n.exports=function(n){return o?i.createElement(n):{}}},function(n,e,t){var r=t(4),a=t(2);n.exports=r&&a((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(n,e,t){var r=t(61),a=t(63),i=r("keys");n.exports=function(n){return i[n]||(i[n]=a(n))}},function(n,e,t){var r=t(1),a=t(8),i=t(28),o=t(118).indexOf,s=t(48),l=r([].push);n.exports=function(n,e){var t,r=i(n),c=0,u=[];for(t in r)!a(s,t)&&a(r,t)&&l(u,t);for(;e.length>c;)a(r,t=e[c++])&&(~o(u,t)||l(u,t));return u}},function(n,e){n.exports=function(n){var e=null==n?0:n.length;return e?n[e-1]:void 0}},function(n,e,t){n.exports=t(247)},function(n,e,t){"use strict";var r=t(26),a=t(124).left,i=t(125),o=t(60);r({target:"Array",proto:!0,forced:!t(126)&&o>79&&o<83||!i("reduce")},{reduce:function(n){var e=arguments.length;return a(this,n,e,e>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";var r={}.propertyIsEnumerable,a=Object.getOwnPropertyDescriptor,i=a&&!r.call({1:2},1);e.f=i?function(n){var e=a(this,n);return!!e&&e.enumerable}:r},function(n,e,t){var r=t(34),a=t(9),i=t(56),o=t(107),s=t(109),l=t(31),c=TypeError,u=l("toPrimitive");n.exports=function(n,e){if(!a(n)||i(n))return n;var t,l=o(n,u);if(l){if(void 0===e&&(e="default"),t=r(l,n,e),!a(t)||i(t))return t;throw c("Can't convert object to primitive value")}return void 0===e&&(e="number"),s(n,e)}},function(n,e){n.exports="undefined"!=typeof navigator&&String(navigator.userAgent)||""},function(n,e,t){var r=t(30),a=t(53);n.exports=function(n,e){var t=n[e];return a(t)?void 0:r(t)}},function(n,e){var t=String;n.exports=function(n){try{return t(n)}catch(n){return"Object"}}},function(n,e,t){var r=t(34),a=t(0),i=t(9),o=TypeError;n.exports=function(n,e){var t,s;if("string"===e&&a(t=n.toString)&&!i(s=r(t,n)))return s;if(a(t=n.valueOf)&&!i(s=r(t,n)))return s;if("string"!==e&&a(t=n.toString)&&!i(s=r(t,n)))return s;throw o("Can't convert object to primitive value")}},function(n,e,t){var r=t(0),a=t(17),i=t(111),o=t(37);n.exports=function(n,e,t,s){s||(s={});var l=s.enumerable,c=void 0!==s.name?s.name:e;if(r(t)&&i(t,c,s),s.global)l?n[e]=t:o(e,t);else{try{s.unsafe?n[e]&&(l=!0):delete n[e]}catch(n){}l?n[e]=t:a.f(n,e,{value:t,enumerable:!1,configurable:!s.nonConfigurable,writable:!s.nonWritable})}return n}},function(n,e,t){var r=t(1),a=t(2),i=t(0),o=t(8),s=t(4),l=t(112).CONFIGURABLE,c=t(113),u=t(114),p=u.enforce,d=u.get,h=String,m=Object.defineProperty,g=r("".slice),f=r("".replace),v=r([].join),b=s&&!a((function(){return 8!==m((function(){}),"length",{value:8}).length})),y=String(String).split("String"),w=n.exports=function(n,e,t){"Symbol("===g(h(e),0,7)&&(e="["+f(h(e),/^Symbol\(([^)]*)\)/,"$1")+"]"),t&&t.getter&&(e="get "+e),t&&t.setter&&(e="set "+e),(!o(n,"name")||l&&n.name!==e)&&(s?m(n,"name",{value:e,configurable:!0}):n.name=e),b&&t&&o(t,"arity")&&n.length!==t.arity&&m(n,"length",{value:t.arity});try{t&&o(t,"constructor")&&t.constructor?s&&m(n,"prototype",{writable:!1}):n.prototype&&(n.prototype=void 0)}catch(n){}var r=p(n);return o(r,"source")||(r.source=v(y,"string"==typeof e?e:"")),n};Function.prototype.toString=w((function(){return i(this)&&d(this).source||c(this)}),"toString")},function(n,e,t){var r=t(4),a=t(8),i=Function.prototype,o=r&&Object.getOwnPropertyDescriptor,s=a(i,"name"),l=s&&"something"===function(){}.name,c=s&&(!r||r&&o(i,"name").configurable);n.exports={EXISTS:s,PROPER:l,CONFIGURABLE:c}},function(n,e,t){var r=t(1),a=t(0),i=t(36),o=r(Function.toString);a(i.inspectSource)||(i.inspectSource=function(n){return o(n)}),n.exports=i.inspectSource},function(n,e,t){var r,a,i,o=t(115),s=t(3),l=t(9),c=t(14),u=t(8),p=t(36),d=t(99),h=t(48),m=s.TypeError,g=s.WeakMap;if(o||p.state){var f=p.state||(p.state=new g);f.get=f.get,f.has=f.has,f.set=f.set,r=function(n,e){if(f.has(n))throw m("Object already initialized");return e.facade=n,f.set(n,e),e},a=function(n){return f.get(n)||{}},i=function(n){return f.has(n)}}else{var v=d("state");h[v]=!0,r=function(n,e){if(u(n,v))throw m("Object already initialized");return e.facade=n,c(n,v,e),e},a=function(n){return u(n,v)?n[v]:{}},i=function(n){return u(n,v)}}n.exports={set:r,get:a,has:i,enforce:function(n){return i(n)?a(n):r(n,{})},getterFor:function(n){return function(e){var t;if(!l(e)||(t=a(e)).type!==n)throw m("Incompatible receiver, "+n+" required");return t}}}},function(n,e,t){var r=t(3),a=t(0),i=r.WeakMap;n.exports=a(i)&&/native code/.test(String(i))},function(n,e,t){var r=t(29),a=t(1),i=t(117),o=t(122),s=t(25),l=a([].concat);n.exports=r("Reflect","ownKeys")||function(n){var e=i.f(s(n)),t=o.f;return t?l(e,t(n)):e}},function(n,e,t){var r=t(100),a=t(96).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(n){return r(n,a)}},function(n,e,t){var r=t(28),a=t(119),i=t(33),o=function(n){return function(e,t,o){var s,l=r(e),c=i(l),u=a(o,c);if(n&&t!=t){for(;c>u;)if((s=l[u++])!=s)return!0}else for(;c>u;u++)if((n||u in l)&&l[u]===t)return n||u||0;return!n&&-1}};n.exports={includes:o(!0),indexOf:o(!1)}},function(n,e,t){var r=t(66),a=Math.max,i=Math.min;n.exports=function(n,e){var t=r(n);return t<0?a(t+e,0):i(t,e)}},function(n,e){var t=Math.ceil,r=Math.floor;n.exports=Math.trunc||function(n){var e=+n;return(e>0?r:t)(e)}},function(n,e,t){var r=t(66),a=Math.min;n.exports=function(n){return n>0?a(r(n),9007199254740991):0}},function(n,e){e.f=Object.getOwnPropertySymbols},function(n,e,t){var r=t(2),a=t(0),i=/#|\.prototype\./,o=function(n,e){var t=l[s(n)];return t==u||t!=c&&(a(e)?r(e):!!e)},s=o.normalize=function(n){return String(n).replace(i,".").toLowerCase()},l=o.data={},c=o.NATIVE="N",u=o.POLYFILL="P";n.exports=o},function(n,e,t){var r=t(30),a=t(32),i=t(47),o=t(33),s=TypeError,l=function(n){return function(e,t,l,c){r(t);var u=a(e),p=i(u),d=o(u),h=n?d-1:0,m=n?-1:1;if(l<2)for(;;){if(h in p){c=p[h],h+=m;break}if(h+=m,n?h<0:d<=h)throw s("Reduce of empty array with no initial value")}for(;n?h>=0:d>h;h+=m)h in p&&(c=t(c,p[h],h,u));return c}};n.exports={left:l(!1),right:l(!0)}},function(n,e,t){"use strict";var r=t(2);n.exports=function(n,e){var t=[][n];return!!t&&r((function(){t.call(null,e||function(){return 1},1)}))}},function(n,e,t){var r=t(18);n.exports="undefined"!=typeof process&&"process"==r(process)},function(n,e,t){"use strict";var r=t(4),a=t(128),i=TypeError,o=Object.getOwnPropertyDescriptor,s=r&&!function(){if(void 0!==this)return!0;try{Object.defineProperty([],"length",{writable:!1}).length=1}catch(n){return n instanceof TypeError}}();n.exports=s?function(n,e){if(a(n)&&!o(n,"length").writable)throw i("Cannot set read only .length");return n.length=e}:function(n,e){return n.length=e}},function(n,e,t){var r=t(18);n.exports=Array.isArray||function(n){return"Array"==r(n)}},function(n,e){var t=TypeError;n.exports=function(n){if(n>9007199254740991)throw t("Maximum allowed index exceeded");return n}},function(n,e,t){var r=t(26),a=t(3),i=t(131),o=t(132),s=a.WebAssembly,l=7!==Error("e",{cause:7}).cause,c=function(n,e){var t={};t[n]=o(n,e,l),r({global:!0,constructor:!0,arity:1,forced:l},t)},u=function(n,e){if(s&&s[n]){var t={};t[n]=o("WebAssembly."+n,e,l),r({target:"WebAssembly",stat:!0,constructor:!0,arity:1,forced:l},t)}};c("Error",(function(n){return function(e){return i(n,this,arguments)}})),c("EvalError",(function(n){return function(e){return i(n,this,arguments)}})),c("RangeError",(function(n){return function(e){return i(n,this,arguments)}})),c("ReferenceError",(function(n){return function(e){return i(n,this,arguments)}})),c("SyntaxError",(function(n){return function(e){return i(n,this,arguments)}})),c("TypeError",(function(n){return function(e){return i(n,this,arguments)}})),c("URIError",(function(n){return function(e){return i(n,this,arguments)}})),u("CompileError",(function(n){return function(e){return i(n,this,arguments)}})),u("LinkError",(function(n){return function(e){return i(n,this,arguments)}})),u("RuntimeError",(function(n){return function(e){return i(n,this,arguments)}}))},function(n,e,t){var r=t(27),a=Function.prototype,i=a.apply,o=a.call;n.exports="object"==typeof Reflect&&Reflect.apply||(r?o.bind(i):function(){return o.apply(i,arguments)})},function(n,e,t){"use strict";var r=t(29),a=t(8),i=t(14),o=t(57),s=t(67),l=t(65),c=t(135),u=t(136),p=t(137),d=t(141),h=t(142),m=t(4),g=t(62);n.exports=function(n,e,t,f){var v=f?2:1,b=n.split("."),y=b[b.length-1],w=r.apply(null,b);if(w){var x=w.prototype;if(!g&&a(x,"cause")&&delete x.cause,!t)return w;var k=r("Error"),_=e((function(n,e){var t=p(f?e:n,void 0),r=f?new w(n):new w;return void 0!==t&&i(r,"message",t),h(r,_,r.stack,2),this&&o(x,this)&&u(r,this,_),arguments.length>v&&d(r,arguments[v]),r}));if(_.prototype=x,"Error"!==y?s?s(_,k):l(_,k,{name:!0}):m&&"stackTraceLimit"in w&&(c(_,w,"stackTraceLimit"),c(_,w,"prepareStackTrace")),l(_,w),!g)try{x.name!==y&&i(x,"name",y),x.constructor=_}catch(n){}return _}}},function(n,e,t){var r=t(1),a=t(30);n.exports=function(n,e,t){try{return r(a(Object.getOwnPropertyDescriptor(n,e)[t]))}catch(n){}}},function(n,e,t){var r=t(0),a=String,i=TypeError;n.exports=function(n){if("object"==typeof n||r(n))return n;throw i("Can't set "+a(n)+" as a prototype")}},function(n,e,t){var r=t(17).f;n.exports=function(n,e,t){t in n||r(n,t,{configurable:!0,get:function(){return e[t]},set:function(n){e[t]=n}})}},function(n,e,t){var r=t(0),a=t(9),i=t(67);n.exports=function(n,e,t){var o,s;return i&&r(o=e.constructor)&&o!==t&&a(s=o.prototype)&&s!==t.prototype&&i(n,s),n}},function(n,e,t){var r=t(138);n.exports=function(n,e){return void 0===n?arguments.length<2?"":e:r(n)}},function(n,e,t){var r=t(139),a=String;n.exports=function(n){if("Symbol"===r(n))throw TypeError("Cannot convert a Symbol value to a string");return a(n)}},function(n,e,t){var r=t(140),a=t(0),i=t(18),o=t(31)("toStringTag"),s=Object,l="Arguments"==i(function(){return arguments}());n.exports=r?i:function(n){var e,t,r;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(t=function(n,e){try{return n[e]}catch(n){}}(e=s(n),o))?t:l?i(e):"Object"==(r=i(e))&&a(e.callee)?"Arguments":r}},function(n,e,t){var r={};r[t(31)("toStringTag")]="z",n.exports="[object z]"===String(r)},function(n,e,t){var r=t(9),a=t(14);n.exports=function(n,e){r(e)&&"cause"in e&&a(n,"cause",e.cause)}},function(n,e,t){var r=t(14),a=t(143),i=t(144),o=Error.captureStackTrace;n.exports=function(n,e,t,s){i&&(o?o(n,e):r(n,"stack",a(t,s)))}},function(n,e,t){var r=t(1),a=Error,i=r("".replace),o=String(a("zxcasd").stack),s=/\n\s*at [^:]*:[^\n]*/,l=s.test(o);n.exports=function(n,e){if(l&&"string"==typeof n&&!a.prepareStackTrace)for(;e--;)n=i(n,s,"");return n}},function(n,e,t){var r=t(2),a=t(35);n.exports=!r((function(){var n=Error("a");return!("stack"in n)||(Object.defineProperty(n,"stack",a(1,7)),7!==n.stack)}))},function(n,e,t){var r=t(68),a=t(146);n.exports=function n(e,t,i,o,s){var l=-1,c=e.length;for(i||(i=a),s||(s=[]);++l<c;){var u=e[l];t>0&&i(u)?t>1?n(u,t-1,i,o,s):r(s,u):o||(s[s.length]=u)}return s}},function(n,e,t){var r=t(15),a=t(38),i=t(5),o=r?r.isConcatSpreadable:void 0;n.exports=function(n){return i(n)||a(n)||!!(o&&n&&n[o])}},function(n,e,t){var r=t(13),a=t(12);n.exports=function(n){return a(n)&&"[object Arguments]"==r(n)}},function(n,e,t){var r=t(15),a=Object.prototype,i=a.hasOwnProperty,o=a.toString,s=r?r.toStringTag:void 0;n.exports=function(n){var e=i.call(n,s),t=n[s];try{n[s]=void 0;var r=!0}catch(n){}var a=o.call(n);return r&&(e?n[s]=t:delete n[s]),a}},function(n,e){var t=Object.prototype.toString;n.exports=function(n){return t.call(n)}},function(n,e,t){var r=t(151),a=t(207),i=t(46),o=t(5),s=t(218);n.exports=function(n){return"function"==typeof n?n:null==n?i:"object"==typeof n?o(n)?a(n[0],n[1]):r(n):s(n)}},function(n,e,t){var r=t(152),a=t(206),i=t(85);n.exports=function(n){var e=a(n);return 1==e.length&&e[0][2]?i(e[0][0],e[0][1]):function(t){return t===n||r(t,n,e)}}},function(n,e,t){var r=t(70),a=t(74);n.exports=function(n,e,t,i){var o=t.length,s=o,l=!i;if(null==n)return!s;for(n=Object(n);o--;){var c=t[o];if(l&&c[2]?c[1]!==n[c[0]]:!(c[0]in n))return!1}for(;++o<s;){var u=(c=t[o])[0],p=n[u],d=c[1];if(l&&c[2]){if(void 0===p&&!(u in n))return!1}else{var h=new r;if(i)var m=i(p,d,u,n,e,h);if(!(void 0===m?a(d,p,3,i,h):m))return!1}}return!0}},function(n,e){n.exports=function(){this.__data__=[],this.size=0}},function(n,e,t){var r=t(20),a=Array.prototype.splice;n.exports=function(n){var e=this.__data__,t=r(e,n);return!(t<0)&&(t==e.length-1?e.pop():a.call(e,t,1),--this.size,!0)}},function(n,e,t){var r=t(20);n.exports=function(n){var e=this.__data__,t=r(e,n);return t<0?void 0:e[t][1]}},function(n,e,t){var r=t(20);n.exports=function(n){return r(this.__data__,n)>-1}},function(n,e,t){var r=t(20);n.exports=function(n,e){var t=this.__data__,a=r(t,n);return a<0?(++this.size,t.push([n,e])):t[a][1]=e,this}},function(n,e,t){var r=t(19);n.exports=function(){this.__data__=new r,this.size=0}},function(n,e){n.exports=function(n){var e=this.__data__,t=e.delete(n);return this.size=e.size,t}},function(n,e){n.exports=function(n){return this.__data__.get(n)}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e,t){var r=t(19),a=t(39),i=t(41);n.exports=function(n,e){var t=this.__data__;if(t instanceof r){var o=t.__data__;if(!a||o.length<199)return o.push([n,e]),this.size=++t.size,this;t=this.__data__=new i(o)}return t.set(n,e),this.size=t.size,this}},function(n,e,t){var r=t(72),a=t(164),i=t(40),o=t(73),s=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,u=l.toString,p=c.hasOwnProperty,d=RegExp("^"+u.call(p).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");n.exports=function(n){return!(!i(n)||a(n))&&(r(n)?d:s).test(o(n))}},function(n,e,t){var r,a=t(165),i=(r=/[^.]+$/.exec(a&&a.keys&&a.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";n.exports=function(n){return!!i&&i in n}},function(n,e,t){var r=t(6)["__core-js_shared__"];n.exports=r},function(n,e){n.exports=function(n,e){return null==n?void 0:n[e]}},function(n,e,t){var r=t(168),a=t(19),i=t(39);n.exports=function(){this.size=0,this.__data__={hash:new r,map:new(i||a),string:new r}}},function(n,e,t){var r=t(169),a=t(170),i=t(171),o=t(172),s=t(173);function l(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}l.prototype.clear=r,l.prototype.delete=a,l.prototype.get=i,l.prototype.has=o,l.prototype.set=s,n.exports=l},function(n,e,t){var r=t(21);n.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(n,e){n.exports=function(n){var e=this.has(n)&&delete this.__data__[n];return this.size-=e?1:0,e}},function(n,e,t){var r=t(21),a=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;if(r){var t=e[n];return"__lodash_hash_undefined__"===t?void 0:t}return a.call(e,n)?e[n]:void 0}},function(n,e,t){var r=t(21),a=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;return r?void 0!==e[n]:a.call(e,n)}},function(n,e,t){var r=t(21);n.exports=function(n,e){var t=this.__data__;return this.size+=this.has(n)?0:1,t[n]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},function(n,e,t){var r=t(22);n.exports=function(n){var e=r(this,n).delete(n);return this.size-=e?1:0,e}},function(n,e){n.exports=function(n){var e=typeof n;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==n:null===n}},function(n,e,t){var r=t(22);n.exports=function(n){return r(this,n).get(n)}},function(n,e,t){var r=t(22);n.exports=function(n){return r(this,n).has(n)}},function(n,e,t){var r=t(22);n.exports=function(n,e){var t=r(this,n),a=t.size;return t.set(n,e),this.size+=t.size==a?0:1,this}},function(n,e,t){var r=t(70),a=t(75),i=t(183),o=t(186),s=t(202),l=t(5),c=t(79),u=t(81),p="[object Object]",d=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,h,m,g){var f=l(n),v=l(e),b=f?"[object Array]":s(n),y=v?"[object Array]":s(e),w=(b="[object Arguments]"==b?p:b)==p,x=(y="[object Arguments]"==y?p:y)==p,k=b==y;if(k&&c(n)){if(!c(e))return!1;f=!0,w=!1}if(k&&!w)return g||(g=new r),f||u(n)?a(n,e,t,h,m,g):i(n,e,b,t,h,m,g);if(!(1&t)){var _=w&&d.call(n,"__wrapped__"),S=x&&d.call(e,"__wrapped__");if(_||S){var T=_?n.value():n,j=S?e.value():e;return g||(g=new r),m(T,j,t,h,g)}}return!!k&&(g||(g=new r),o(n,e,t,h,m,g))}},function(n,e){n.exports=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length;++t<r;)if(e(n[t],t,n))return!0;return!1}},function(n,e,t){var r=t(15),a=t(184),i=t(71),o=t(75),s=t(185),l=t(42),c=r?r.prototype:void 0,u=c?c.valueOf:void 0;n.exports=function(n,e,t,r,c,p,d){switch(t){case"[object DataView]":if(n.byteLength!=e.byteLength||n.byteOffset!=e.byteOffset)return!1;n=n.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(n.byteLength!=e.byteLength||!p(new a(n),new a(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+n,+e);case"[object Error]":return n.name==e.name&&n.message==e.message;case"[object RegExp]":case"[object String]":return n==e+"";case"[object Map]":var h=s;case"[object Set]":var m=1&r;if(h||(h=l),n.size!=e.size&&!m)return!1;var g=d.get(n);if(g)return g==e;r|=2,d.set(n,e);var f=o(h(n),h(e),r,c,p,d);return d.delete(n),f;case"[object Symbol]":if(u)return u.call(n)==u.call(e)}return!1}},function(n,e,t){var r=t(6).Uint8Array;n.exports=r},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n,r){t[++e]=[r,n]})),t}},function(n,e,t){var r=t(187),a=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,i,o,s){var l=1&t,c=r(n),u=c.length;if(u!=r(e).length&&!l)return!1;for(var p=u;p--;){var d=c[p];if(!(l?d in e:a.call(e,d)))return!1}var h=s.get(n),m=s.get(e);if(h&&m)return h==e&&m==n;var g=!0;s.set(n,e),s.set(e,n);for(var f=l;++p<u;){var v=n[d=c[p]],b=e[d];if(i)var y=l?i(b,v,d,e,n,s):i(v,b,d,n,e,s);if(!(void 0===y?v===b||o(v,b,t,i,s):y)){g=!1;break}f||(f="constructor"==d)}if(g&&!f){var w=n.constructor,x=e.constructor;w==x||!("constructor"in n)||!("constructor"in e)||"function"==typeof w&&w instanceof w&&"function"==typeof x&&x instanceof x||(g=!1)}return s.delete(n),s.delete(e),g}},function(n,e,t){var r=t(188),a=t(189),i=t(78);n.exports=function(n){return r(n,i,a)}},function(n,e,t){var r=t(68),a=t(5);n.exports=function(n,e,t){var i=e(n);return a(n)?i:r(i,t(n))}},function(n,e,t){var r=t(190),a=t(191),i=Object.prototype.propertyIsEnumerable,o=Object.getOwnPropertySymbols,s=o?function(n){return null==n?[]:(n=Object(n),r(o(n),(function(e){return i.call(n,e)})))}:a;n.exports=s},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,a=0,i=[];++t<r;){var o=n[t];e(o,t,n)&&(i[a++]=o)}return i}},function(n,e){n.exports=function(){return[]}},function(n,e,t){var r=t(193),a=t(38),i=t(5),o=t(79),s=t(80),l=t(81),c=Object.prototype.hasOwnProperty;n.exports=function(n,e){var t=i(n),u=!t&&a(n),p=!t&&!u&&o(n),d=!t&&!u&&!p&&l(n),h=t||u||p||d,m=h?r(n.length,String):[],g=m.length;for(var f in n)!e&&!c.call(n,f)||h&&("length"==f||p&&("offset"==f||"parent"==f)||d&&("buffer"==f||"byteLength"==f||"byteOffset"==f)||s(f,g))||m.push(f);return m}},function(n,e){n.exports=function(n,e){for(var t=-1,r=Array(n);++t<n;)r[t]=e(t);return r}},function(n,e){n.exports=function(){return!1}},function(n,e,t){var r=t(13),a=t(43),i=t(12),o={};o["[object Float32Array]"]=o["[object Float64Array]"]=o["[object Int8Array]"]=o["[object Int16Array]"]=o["[object Int32Array]"]=o["[object Uint8Array]"]=o["[object Uint8ClampedArray]"]=o["[object Uint16Array]"]=o["[object Uint32Array]"]=!0,o["[object Arguments]"]=o["[object Array]"]=o["[object ArrayBuffer]"]=o["[object Boolean]"]=o["[object DataView]"]=o["[object Date]"]=o["[object Error]"]=o["[object Function]"]=o["[object Map]"]=o["[object Number]"]=o["[object Object]"]=o["[object RegExp]"]=o["[object Set]"]=o["[object String]"]=o["[object WeakMap]"]=!1,n.exports=function(n){return i(n)&&a(n.length)&&!!o[r(n)]}},function(n,e){n.exports=function(n){return function(e){return n(e)}}},function(n,e,t){(function(n){var r=t(69),a=e&&!e.nodeType&&e,i=a&&"object"==typeof n&&n&&!n.nodeType&&n,o=i&&i.exports===a&&r.process,s=function(){try{var n=i&&i.require&&i.require("util").types;return n||o&&o.binding&&o.binding("util")}catch(n){}}();n.exports=s}).call(this,t(49)(n))},function(n,e,t){var r=t(199),a=t(200),i=Object.prototype.hasOwnProperty;n.exports=function(n){if(!r(n))return a(n);var e=[];for(var t in Object(n))i.call(n,t)&&"constructor"!=t&&e.push(t);return e}},function(n,e){var t=Object.prototype;n.exports=function(n){var e=n&&n.constructor;return n===("function"==typeof e&&e.prototype||t)}},function(n,e,t){var r=t(201)(Object.keys,Object);n.exports=r},function(n,e){n.exports=function(n,e){return function(t){return n(e(t))}}},function(n,e,t){var r=t(203),a=t(39),i=t(204),o=t(83),s=t(205),l=t(13),c=t(73),u=c(r),p=c(a),d=c(i),h=c(o),m=c(s),g=l;(r&&"[object DataView]"!=g(new r(new ArrayBuffer(1)))||a&&"[object Map]"!=g(new a)||i&&"[object Promise]"!=g(i.resolve())||o&&"[object Set]"!=g(new o)||s&&"[object WeakMap]"!=g(new s))&&(g=function(n){var e=l(n),t="[object Object]"==e?n.constructor:void 0,r=t?c(t):"";if(r)switch(r){case u:return"[object DataView]";case p:return"[object Map]";case d:return"[object Promise]";case h:return"[object Set]";case m:return"[object WeakMap]"}return e}),n.exports=g},function(n,e,t){var r=t(10)(t(6),"DataView");n.exports=r},function(n,e,t){var r=t(10)(t(6),"Promise");n.exports=r},function(n,e,t){var r=t(10)(t(6),"WeakMap");n.exports=r},function(n,e,t){var r=t(84),a=t(78);n.exports=function(n){for(var e=a(n),t=e.length;t--;){var i=e[t],o=n[i];e[t]=[i,o,r(o)]}return e}},function(n,e,t){var r=t(74),a=t(208),i=t(215),o=t(44),s=t(84),l=t(85),c=t(23);n.exports=function(n,e){return o(n)&&s(e)?l(c(n),e):function(t){var o=a(t,n);return void 0===o&&o===e?i(t,n):r(e,o,3)}}},function(n,e,t){var r=t(86);n.exports=function(n,e,t){var a=null==n?void 0:r(n,e);return void 0===a?t:a}},function(n,e,t){var r=t(210),a=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,o=r((function(n){var e=[];return 46===n.charCodeAt(0)&&e.push(""),n.replace(a,(function(n,t,r,a){e.push(r?a.replace(i,"$1"):t||n)})),e}));n.exports=o},function(n,e,t){var r=t(211);n.exports=function(n){var e=r(n,(function(n){return 500===t.size&&t.clear(),n})),t=e.cache;return e}},function(n,e,t){var r=t(41);function a(n,e){if("function"!=typeof n||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var t=function(){var r=arguments,a=e?e.apply(this,r):r[0],i=t.cache;if(i.has(a))return i.get(a);var o=n.apply(this,r);return t.cache=i.set(a,o)||i,o};return t.cache=new(a.Cache||r),t}a.Cache=r,n.exports=a},function(n,e,t){var r=t(213);n.exports=function(n){return null==n?"":r(n)}},function(n,e,t){var r=t(15),a=t(214),i=t(5),o=t(45),s=r?r.prototype:void 0,l=s?s.toString:void 0;n.exports=function n(e){if("string"==typeof e)return e;if(i(e))return a(e,n)+"";if(o(e))return l?l.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,a=Array(r);++t<r;)a[t]=e(n[t],t,n);return a}},function(n,e,t){var r=t(216),a=t(217);n.exports=function(n,e){return null!=n&&a(n,e,r)}},function(n,e){n.exports=function(n,e){return null!=n&&e in Object(n)}},function(n,e,t){var r=t(87),a=t(38),i=t(5),o=t(80),s=t(43),l=t(23);n.exports=function(n,e,t){for(var c=-1,u=(e=r(e,n)).length,p=!1;++c<u;){var d=l(e[c]);if(!(p=null!=n&&t(n,d)))break;n=n[d]}return p||++c!=u?p:!!(u=null==n?0:n.length)&&s(u)&&o(d,u)&&(i(n)||a(n))}},function(n,e,t){var r=t(219),a=t(220),i=t(44),o=t(23);n.exports=function(n){return i(n)?r(o(n)):a(n)}},function(n,e){n.exports=function(n){return function(e){return null==e?void 0:e[n]}}},function(n,e,t){var r=t(86);n.exports=function(n){return function(e){return r(e,n)}}},function(n,e,t){var r=t(46),a=t(222),i=t(224);n.exports=function(n,e){return i(a(n,e,r),n+"")}},function(n,e,t){var r=t(223),a=Math.max;n.exports=function(n,e,t){return e=a(void 0===e?n.length-1:e,0),function(){for(var i=arguments,o=-1,s=a(i.length-e,0),l=Array(s);++o<s;)l[o]=i[e+o];o=-1;for(var c=Array(e+1);++o<e;)c[o]=i[o];return c[e]=t(l),r(n,this,c)}}},function(n,e){n.exports=function(n,e,t){switch(t.length){case 0:return n.call(e);case 1:return n.call(e,t[0]);case 2:return n.call(e,t[0],t[1]);case 3:return n.call(e,t[0],t[1],t[2])}return n.apply(e,t)}},function(n,e,t){var r=t(225),a=t(228)(r);n.exports=a},function(n,e,t){var r=t(226),a=t(227),i=t(46),o=a?function(n,e){return a(n,"toString",{configurable:!0,enumerable:!1,value:r(e),writable:!0})}:i;n.exports=o},function(n,e){n.exports=function(n){return function(){return n}}},function(n,e,t){var r=t(10),a=function(){try{var n=r(Object,"defineProperty");return n({},"",{}),n}catch(n){}}();n.exports=a},function(n,e){var t=Date.now;n.exports=function(n){var e=0,r=0;return function(){var a=t(),i=16-(a-r);if(r=a,i>0){if(++e>=800)return arguments[0]}else e=0;return n.apply(void 0,arguments)}}},function(n,e,t){var r=t(76),a=t(230),i=t(235),o=t(77),s=t(236),l=t(42);n.exports=function(n,e,t){var c=-1,u=a,p=n.length,d=!0,h=[],m=h;if(t)d=!1,u=i;else if(p>=200){var g=e?null:s(n);if(g)return l(g);d=!1,u=o,m=new r}else m=e?[]:h;n:for(;++c<p;){var f=n[c],v=e?e(f):f;if(f=t||0!==f?f:0,d&&v==v){for(var b=m.length;b--;)if(m[b]===v)continue n;e&&m.push(v),h.push(f)}else u(m,v,t)||(m!==h&&m.push(v),h.push(f))}return h}},function(n,e,t){var r=t(231);n.exports=function(n,e){return!!(null==n?0:n.length)&&r(n,e,0)>-1}},function(n,e,t){var r=t(232),a=t(233),i=t(234);n.exports=function(n,e,t){return e==e?i(n,e,t):r(n,a,t)}},function(n,e){n.exports=function(n,e,t,r){for(var a=n.length,i=t+(r?1:-1);r?i--:++i<a;)if(e(n[i],i,n))return i;return-1}},function(n,e){n.exports=function(n){return n!=n}},function(n,e){n.exports=function(n,e,t){for(var r=t-1,a=n.length;++r<a;)if(n[r]===e)return r;return-1}},function(n,e){n.exports=function(n,e,t){for(var r=-1,a=null==n?0:n.length;++r<a;)if(t(e,n[r]))return!0;return!1}},function(n,e,t){var r=t(83),a=t(237),i=t(42),o=r&&1/i(new r([,-0]))[1]==1/0?function(n){return new r(n)}:a;n.exports=o},function(n,e){n.exports=function(){}},function(n,e,t){var r=t(82),a=t(12);n.exports=function(n){return a(n)&&r(n)}},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";t(88)},function(n,e,t){"use strict";t(89)},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";t(90)},function(n,e,t){"use strict";t(91)},function(n,e,t){"use strict";t.r(e);
/*!
 * Vue.js v2.7.14
 * (c) 2014-2022 Evan You
 * Released under the MIT License.
 */
var r=Object.freeze({}),a=Array.isArray;function i(n){return null==n}function o(n){return null!=n}function s(n){return!0===n}function l(n){return"string"==typeof n||"number"==typeof n||"symbol"==typeof n||"boolean"==typeof n}function c(n){return"function"==typeof n}function u(n){return null!==n&&"object"==typeof n}var p=Object.prototype.toString;function d(n){return"[object Object]"===p.call(n)}function h(n){return"[object RegExp]"===p.call(n)}function m(n){var e=parseFloat(String(n));return e>=0&&Math.floor(e)===e&&isFinite(n)}function g(n){return o(n)&&"function"==typeof n.then&&"function"==typeof n.catch}function f(n){return null==n?"":Array.isArray(n)||d(n)&&n.toString===p?JSON.stringify(n,null,2):String(n)}function v(n){var e=parseFloat(n);return isNaN(e)?n:e}function b(n,e){for(var t=Object.create(null),r=n.split(","),a=0;a<r.length;a++)t[r[a]]=!0;return e?function(n){return t[n.toLowerCase()]}:function(n){return t[n]}}b("slot,component",!0);var y=b("key,ref,slot,slot-scope,is");function w(n,e){var t=n.length;if(t){if(e===n[t-1])return void(n.length=t-1);var r=n.indexOf(e);if(r>-1)return n.splice(r,1)}}var x=Object.prototype.hasOwnProperty;function k(n,e){return x.call(n,e)}function _(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var S=/-(\w)/g,T=_((function(n){return n.replace(S,(function(n,e){return e?e.toUpperCase():""}))})),j=_((function(n){return n.charAt(0).toUpperCase()+n.slice(1)})),E=/\B([A-Z])/g,C=_((function(n){return n.replace(E,"-$1").toLowerCase()}));var A=Function.prototype.bind?function(n,e){return n.bind(e)}:function(n,e){function t(t){var r=arguments.length;return r?r>1?n.apply(e,arguments):n.call(e,t):n.call(e)}return t._length=n.length,t};function I(n,e){e=e||0;for(var t=n.length-e,r=new Array(t);t--;)r[t]=n[t+e];return r}function P(n,e){for(var t in e)n[t]=e[t];return n}function z(n){for(var e={},t=0;t<n.length;t++)n[t]&&P(e,n[t]);return e}function O(n,e,t){}var B=function(n,e,t){return!1},M=function(n){return n};function G(n,e){if(n===e)return!0;var t=u(n),r=u(e);if(!t||!r)return!t&&!r&&String(n)===String(e);try{var a=Array.isArray(n),i=Array.isArray(e);if(a&&i)return n.length===e.length&&n.every((function(n,t){return G(n,e[t])}));if(n instanceof Date&&e instanceof Date)return n.getTime()===e.getTime();if(a||i)return!1;var o=Object.keys(n),s=Object.keys(e);return o.length===s.length&&o.every((function(t){return G(n[t],e[t])}))}catch(n){return!1}}function L(n,e){for(var t=0;t<n.length;t++)if(G(n[t],e))return t;return-1}function q(n){var e=!1;return function(){e||(e=!0,n.apply(this,arguments))}}function R(n,e){return n===e?0===n&&1/n!=1/e:n==n||e==e}var D=["component","directive","filter"],$=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch","renderTracked","renderTriggered"],N={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:B,isReservedAttr:B,isUnknownElement:B,getTagNamespace:O,parsePlatformTagName:M,mustUseProp:B,async:!0,_lifecycleHooks:$},F=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function H(n){var e=(n+"").charCodeAt(0);return 36===e||95===e}function W(n,e,t,r){Object.defineProperty(n,e,{value:t,enumerable:!!r,writable:!0,configurable:!0})}var V=new RegExp("[^".concat(F.source,".$_\\d]"));var J="__proto__"in{},U="undefined"!=typeof window,Q=U&&window.navigator.userAgent.toLowerCase(),X=Q&&/msie|trident/.test(Q),K=Q&&Q.indexOf("msie 9.0")>0,Z=Q&&Q.indexOf("edge/")>0;Q&&Q.indexOf("android");var Y=Q&&/iphone|ipad|ipod|ios/.test(Q);Q&&/chrome\/\d+/.test(Q),Q&&/phantomjs/.test(Q);var nn,en=Q&&Q.match(/firefox\/(\d+)/),tn={}.watch,rn=!1;if(U)try{var an={};Object.defineProperty(an,"passive",{get:function(){rn=!0}}),window.addEventListener("test-passive",null,an)}catch(n){}var on=function(){return void 0===nn&&(nn=!U&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),nn},sn=U&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ln(n){return"function"==typeof n&&/native code/.test(n.toString())}var cn,un="undefined"!=typeof Symbol&&ln(Symbol)&&"undefined"!=typeof Reflect&&ln(Reflect.ownKeys);cn="undefined"!=typeof Set&&ln(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var pn=null;function dn(n){void 0===n&&(n=null),n||pn&&pn._scope.off(),pn=n,n&&n._scope.on()}var hn=function(){function n(n,e,t,r,a,i,o,s){this.tag=n,this.data=e,this.children=t,this.text=r,this.elm=a,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=o,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1}return Object.defineProperty(n.prototype,"child",{get:function(){return this.componentInstance},enumerable:!1,configurable:!0}),n}(),mn=function(n){void 0===n&&(n="");var e=new hn;return e.text=n,e.isComment=!0,e};function gn(n){return new hn(void 0,void 0,void 0,String(n))}function fn(n){var e=new hn(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return e.ns=n.ns,e.isStatic=n.isStatic,e.key=n.key,e.isComment=n.isComment,e.fnContext=n.fnContext,e.fnOptions=n.fnOptions,e.fnScopeId=n.fnScopeId,e.asyncMeta=n.asyncMeta,e.isCloned=!0,e}var vn=0,bn=[],yn=function(){function n(){this._pending=!1,this.id=vn++,this.subs=[]}return n.prototype.addSub=function(n){this.subs.push(n)},n.prototype.removeSub=function(n){this.subs[this.subs.indexOf(n)]=null,this._pending||(this._pending=!0,bn.push(this))},n.prototype.depend=function(e){n.target&&n.target.addDep(this)},n.prototype.notify=function(n){var e=this.subs.filter((function(n){return n}));for(var t=0,r=e.length;t<r;t++){0,e[t].update()}},n}();yn.target=null;var wn=[];function xn(n){wn.push(n),yn.target=n}function kn(){wn.pop(),yn.target=wn[wn.length-1]}var _n=Array.prototype,Sn=Object.create(_n);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(n){var e=_n[n];W(Sn,n,(function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];var a,i=e.apply(this,t),o=this.__ob__;switch(n){case"push":case"unshift":a=t;break;case"splice":a=t.slice(2)}return a&&o.observeArray(a),o.dep.notify(),i}))}));var Tn=Object.getOwnPropertyNames(Sn),jn={},En=!0;function Cn(n){En=n}var An={notify:O,depend:O,addSub:O,removeSub:O},In=function(){function n(n,e,t){if(void 0===e&&(e=!1),void 0===t&&(t=!1),this.value=n,this.shallow=e,this.mock=t,this.dep=t?An:new yn,this.vmCount=0,W(n,"__ob__",this),a(n)){if(!t)if(J)n.__proto__=Sn;else for(var r=0,i=Tn.length;r<i;r++){W(n,s=Tn[r],Sn[s])}e||this.observeArray(n)}else{var o=Object.keys(n);for(r=0;r<o.length;r++){var s;zn(n,s=o[r],jn,void 0,e,t)}}}return n.prototype.observeArray=function(n){for(var e=0,t=n.length;e<t;e++)Pn(n[e],!1,this.mock)},n}();function Pn(n,e,t){return n&&k(n,"__ob__")&&n.__ob__ instanceof In?n.__ob__:!En||!t&&on()||!a(n)&&!d(n)||!Object.isExtensible(n)||n.__v_skip||Rn(n)||n instanceof hn?void 0:new In(n,e,t)}function zn(n,e,t,r,i,o){var s=new yn,l=Object.getOwnPropertyDescriptor(n,e);if(!l||!1!==l.configurable){var c=l&&l.get,u=l&&l.set;c&&!u||t!==jn&&2!==arguments.length||(t=n[e]);var p=!i&&Pn(t,!1,o);return Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){var e=c?c.call(n):t;return yn.target&&(s.depend(),p&&(p.dep.depend(),a(e)&&Mn(e))),Rn(e)&&!i?e.value:e},set:function(e){var r=c?c.call(n):t;if(R(r,e)){if(u)u.call(n,e);else{if(c)return;if(!i&&Rn(r)&&!Rn(e))return void(r.value=e);t=e}p=!i&&Pn(e,!1,o),s.notify()}}}),s}}function On(n,e,t){if(!qn(n)){var r=n.__ob__;return a(n)&&m(e)?(n.length=Math.max(n.length,e),n.splice(e,1,t),r&&!r.shallow&&r.mock&&Pn(t,!1,!0),t):e in n&&!(e in Object.prototype)?(n[e]=t,t):n._isVue||r&&r.vmCount?t:r?(zn(r.value,e,t,void 0,r.shallow,r.mock),r.dep.notify(),t):(n[e]=t,t)}}function Bn(n,e){if(a(n)&&m(e))n.splice(e,1);else{var t=n.__ob__;n._isVue||t&&t.vmCount||qn(n)||k(n,e)&&(delete n[e],t&&t.dep.notify())}}function Mn(n){for(var e=void 0,t=0,r=n.length;t<r;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend(),a(e)&&Mn(e)}function Gn(n){return Ln(n,!0),W(n,"__v_isShallow",!0),n}function Ln(n,e){if(!qn(n)){Pn(n,e,on());0}}function qn(n){return!(!n||!n.__v_isReadonly)}function Rn(n){return!(!n||!0!==n.__v_isRef)}function Dn(n,e,t){Object.defineProperty(n,t,{enumerable:!0,configurable:!0,get:function(){var n=e[t];if(Rn(n))return n.value;var r=n&&n.__ob__;return r&&r.dep.depend(),n},set:function(n){var r=e[t];Rn(r)&&!Rn(n)?r.value=n:e[t]=n}})}"".concat("watcher"," callback"),"".concat("watcher"," getter"),"".concat("watcher"," cleanup");var $n;var Nn=function(){function n(n){void 0===n&&(n=!1),this.detached=n,this.active=!0,this.effects=[],this.cleanups=[],this.parent=$n,!n&&$n&&(this.index=($n.scopes||($n.scopes=[])).push(this)-1)}return n.prototype.run=function(n){if(this.active){var e=$n;try{return $n=this,n()}finally{$n=e}}else 0},n.prototype.on=function(){$n=this},n.prototype.off=function(){$n=this.parent},n.prototype.stop=function(n){if(this.active){var e=void 0,t=void 0;for(e=0,t=this.effects.length;e<t;e++)this.effects[e].teardown();for(e=0,t=this.cleanups.length;e<t;e++)this.cleanups[e]();if(this.scopes)for(e=0,t=this.scopes.length;e<t;e++)this.scopes[e].stop(!0);if(!this.detached&&this.parent&&!n){var r=this.parent.scopes.pop();r&&r!==this&&(this.parent.scopes[this.index]=r,r.index=this.index)}this.parent=void 0,this.active=!1}},n}();function Fn(n){var e=n._provided,t=n.$parent&&n.$parent._provided;return t===e?n._provided=Object.create(t):e}var Hn=_((function(n){var e="&"===n.charAt(0),t="~"===(n=e?n.slice(1):n).charAt(0),r="!"===(n=t?n.slice(1):n).charAt(0);return{name:n=r?n.slice(1):n,once:t,capture:r,passive:e}}));function Wn(n,e){function t(){var n=t.fns;if(!a(n))return Ee(n,null,arguments,e,"v-on handler");for(var r=n.slice(),i=0;i<r.length;i++)Ee(r[i],null,arguments,e,"v-on handler")}return t.fns=n,t}function Vn(n,e,t,r,a,o){var l,c,u,p;for(l in n)c=n[l],u=e[l],p=Hn(l),i(c)||(i(u)?(i(c.fns)&&(c=n[l]=Wn(c,o)),s(p.once)&&(c=n[l]=a(p.name,c,p.capture)),t(p.name,c,p.capture,p.passive,p.params)):c!==u&&(u.fns=c,n[l]=u));for(l in e)i(n[l])&&r((p=Hn(l)).name,e[l],p.capture)}function Jn(n,e,t){var r;n instanceof hn&&(n=n.data.hook||(n.data.hook={}));var a=n[e];function l(){t.apply(this,arguments),w(r.fns,l)}i(a)?r=Wn([l]):o(a.fns)&&s(a.merged)?(r=a).fns.push(l):r=Wn([a,l]),r.merged=!0,n[e]=r}function Un(n,e,t,r,a){if(o(e)){if(k(e,t))return n[t]=e[t],a||delete e[t],!0;if(k(e,r))return n[t]=e[r],a||delete e[r],!0}return!1}function Qn(n){return l(n)?[gn(n)]:a(n)?function n(e,t){var r,c,u,p,d=[];for(r=0;r<e.length;r++)i(c=e[r])||"boolean"==typeof c||(u=d.length-1,p=d[u],a(c)?c.length>0&&(Xn((c=n(c,"".concat(t||"","_").concat(r)))[0])&&Xn(p)&&(d[u]=gn(p.text+c[0].text),c.shift()),d.push.apply(d,c)):l(c)?Xn(p)?d[u]=gn(p.text+c):""!==c&&d.push(gn(c)):Xn(c)&&Xn(p)?d[u]=gn(p.text+c.text):(s(e._isVList)&&o(c.tag)&&i(c.key)&&o(t)&&(c.key="__vlist".concat(t,"_").concat(r,"__")),d.push(c)));return d}(n):void 0}function Xn(n){return o(n)&&o(n.text)&&!1===n.isComment}function Kn(n,e){var t,r,i,s,l=null;if(a(n)||"string"==typeof n)for(l=new Array(n.length),t=0,r=n.length;t<r;t++)l[t]=e(n[t],t);else if("number"==typeof n)for(l=new Array(n),t=0;t<n;t++)l[t]=e(t+1,t);else if(u(n))if(un&&n[Symbol.iterator]){l=[];for(var c=n[Symbol.iterator](),p=c.next();!p.done;)l.push(e(p.value,l.length)),p=c.next()}else for(i=Object.keys(n),l=new Array(i.length),t=0,r=i.length;t<r;t++)s=i[t],l[t]=e(n[s],s,t);return o(l)||(l=[]),l._isVList=!0,l}function Zn(n,e,t,r){var a,i=this.$scopedSlots[n];i?(t=t||{},r&&(t=P(P({},r),t)),a=i(t)||(c(e)?e():e)):a=this.$slots[n]||(c(e)?e():e);var o=t&&t.slot;return o?this.$createElement("template",{slot:o},a):a}function Yn(n){return It(this.$options,"filters",n,!0)||M}function ne(n,e){return a(n)?-1===n.indexOf(e):n!==e}function ee(n,e,t,r,a){var i=N.keyCodes[e]||t;return a&&r&&!N.keyCodes[e]?ne(a,r):i?ne(i,n):r?C(r)!==e:void 0===n}function te(n,e,t,r,i){if(t)if(u(t)){a(t)&&(t=z(t));var o=void 0,s=function(a){if("class"===a||"style"===a||y(a))o=n;else{var s=n.attrs&&n.attrs.type;o=r||N.mustUseProp(e,s,a)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var l=T(a),c=C(a);l in o||c in o||(o[a]=t[a],i&&((n.on||(n.on={}))["update:".concat(a)]=function(n){t[a]=n}))};for(var l in t)s(l)}else;return n}function re(n,e){var t=this._staticTrees||(this._staticTrees=[]),r=t[n];return r&&!e||ie(r=t[n]=this.$options.staticRenderFns[n].call(this._renderProxy,this._c,this),"__static__".concat(n),!1),r}function ae(n,e,t){return ie(n,"__once__".concat(e).concat(t?"_".concat(t):""),!0),n}function ie(n,e,t){if(a(n))for(var r=0;r<n.length;r++)n[r]&&"string"!=typeof n[r]&&oe(n[r],"".concat(e,"_").concat(r),t);else oe(n,e,t)}function oe(n,e,t){n.isStatic=!0,n.key=e,n.isOnce=t}function se(n,e){if(e)if(d(e)){var t=n.on=n.on?P({},n.on):{};for(var r in e){var a=t[r],i=e[r];t[r]=a?[].concat(a,i):i}}else;return n}function le(n,e,t,r){e=e||{$stable:!t};for(var i=0;i<n.length;i++){var o=n[i];a(o)?le(o,e,t):o&&(o.proxy&&(o.fn.proxy=!0),e[o.key]=o.fn)}return r&&(e.$key=r),e}function ce(n,e){for(var t=0;t<e.length;t+=2){var r=e[t];"string"==typeof r&&r&&(n[e[t]]=e[t+1])}return n}function ue(n,e){return"string"==typeof n?e+n:n}function pe(n){n._o=ae,n._n=v,n._s=f,n._l=Kn,n._t=Zn,n._q=G,n._i=L,n._m=re,n._f=Yn,n._k=ee,n._b=te,n._v=gn,n._e=mn,n._u=le,n._g=se,n._d=ce,n._p=ue}function de(n,e){if(!n||!n.length)return{};for(var t={},r=0,a=n.length;r<a;r++){var i=n[r],o=i.data;if(o&&o.attrs&&o.attrs.slot&&delete o.attrs.slot,i.context!==e&&i.fnContext!==e||!o||null==o.slot)(t.default||(t.default=[])).push(i);else{var s=o.slot,l=t[s]||(t[s]=[]);"template"===i.tag?l.push.apply(l,i.children||[]):l.push(i)}}for(var c in t)t[c].every(he)&&delete t[c];return t}function he(n){return n.isComment&&!n.asyncFactory||" "===n.text}function me(n){return n.isComment&&n.asyncFactory}function ge(n,e,t,a){var i,o=Object.keys(t).length>0,s=e?!!e.$stable:!o,l=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(s&&a&&a!==r&&l===a.$key&&!o&&!a.$hasNormal)return a;for(var c in i={},e)e[c]&&"$"!==c[0]&&(i[c]=fe(n,t,c,e[c]))}else i={};for(var u in t)u in i||(i[u]=ve(t,u));return e&&Object.isExtensible(e)&&(e._normalized=i),W(i,"$stable",s),W(i,"$key",l),W(i,"$hasNormal",o),i}function fe(n,e,t,r){var i=function(){var e=pn;dn(n);var t=arguments.length?r.apply(null,arguments):r({}),i=(t=t&&"object"==typeof t&&!a(t)?[t]:Qn(t))&&t[0];return dn(e),t&&(!i||1===t.length&&i.isComment&&!me(i))?void 0:t};return r.proxy&&Object.defineProperty(e,t,{get:i,enumerable:!0,configurable:!0}),i}function ve(n,e){return function(){return n[e]}}function be(n){return{get attrs(){if(!n._attrsProxy){var e=n._attrsProxy={};W(e,"_v_attr_proxy",!0),ye(e,n.$attrs,r,n,"$attrs")}return n._attrsProxy},get listeners(){n._listenersProxy||ye(n._listenersProxy={},n.$listeners,r,n,"$listeners");return n._listenersProxy},get slots(){return function(n){n._slotsProxy||xe(n._slotsProxy={},n.$scopedSlots);return n._slotsProxy}(n)},emit:A(n.$emit,n),expose:function(e){e&&Object.keys(e).forEach((function(t){return Dn(n,e,t)}))}}}function ye(n,e,t,r,a){var i=!1;for(var o in e)o in n?e[o]!==t[o]&&(i=!0):(i=!0,we(n,o,r,a));for(var o in n)o in e||(i=!0,delete n[o]);return i}function we(n,e,t,r){Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){return t[r][e]}})}function xe(n,e){for(var t in e)n[t]=e[t];for(var t in n)t in e||delete n[t]}var ke=null;function _e(n,e){return(n.__esModule||un&&"Module"===n[Symbol.toStringTag])&&(n=n.default),u(n)?e.extend(n):n}function Se(n){if(a(n))for(var e=0;e<n.length;e++){var t=n[e];if(o(t)&&(o(t.componentOptions)||me(t)))return t}}function Te(n,e,t,r,p,d){return(a(t)||l(t))&&(p=r,r=t,t=void 0),s(d)&&(p=2),function(n,e,t,r,l){if(o(t)&&o(t.__ob__))return mn();o(t)&&o(t.is)&&(e=t.is);if(!e)return mn();0;a(r)&&c(r[0])&&((t=t||{}).scopedSlots={default:r[0]},r.length=0);2===l?r=Qn(r):1===l&&(r=function(n){for(var e=0;e<n.length;e++)if(a(n[e]))return Array.prototype.concat.apply([],n);return n}(r));var p,d;if("string"==typeof e){var h=void 0;d=n.$vnode&&n.$vnode.ns||N.getTagNamespace(e),p=N.isReservedTag(e)?new hn(N.parsePlatformTagName(e),t,r,void 0,void 0,n):t&&t.pre||!o(h=It(n.$options,"components",e))?new hn(e,t,r,void 0,void 0,n):wt(h,t,n,r,e)}else p=wt(e,t,n,r);return a(p)?p:o(p)?(o(d)&&function n(e,t,r){e.ns=t,"foreignObject"===e.tag&&(t=void 0,r=!0);if(o(e.children))for(var a=0,l=e.children.length;a<l;a++){var c=e.children[a];o(c.tag)&&(i(c.ns)||s(r)&&"svg"!==c.tag)&&n(c,t,r)}}(p,d),o(t)&&function(n){u(n.style)&&Ne(n.style);u(n.class)&&Ne(n.class)}(t),p):mn()}(n,e,t,r,p)}function je(n,e,t){xn();try{if(e)for(var r=e;r=r.$parent;){var a=r.$options.errorCaptured;if(a)for(var i=0;i<a.length;i++)try{if(!1===a[i].call(r,n,e,t))return}catch(n){Ce(n,r,"errorCaptured hook")}}Ce(n,e,t)}finally{kn()}}function Ee(n,e,t,r,a){var i;try{(i=t?n.apply(e,t):n.call(e))&&!i._isVue&&g(i)&&!i._handled&&(i.catch((function(n){return je(n,r,a+" (Promise/async)")})),i._handled=!0)}catch(n){je(n,r,a)}return i}function Ce(n,e,t){if(N.errorHandler)try{return N.errorHandler.call(null,n,e,t)}catch(e){e!==n&&Ae(e,null,"config.errorHandler")}Ae(n,e,t)}function Ae(n,e,t){if(!U||"undefined"==typeof console)throw n;console.error(n)}var Ie,Pe=!1,ze=[],Oe=!1;function Be(){Oe=!1;var n=ze.slice(0);ze.length=0;for(var e=0;e<n.length;e++)n[e]()}if("undefined"!=typeof Promise&&ln(Promise)){var Me=Promise.resolve();Ie=function(){Me.then(Be),Y&&setTimeout(O)},Pe=!0}else if(X||"undefined"==typeof MutationObserver||!ln(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Ie="undefined"!=typeof setImmediate&&ln(setImmediate)?function(){setImmediate(Be)}:function(){setTimeout(Be,0)};else{var Ge=1,Le=new MutationObserver(Be),qe=document.createTextNode(String(Ge));Le.observe(qe,{characterData:!0}),Ie=function(){Ge=(Ge+1)%2,qe.data=String(Ge)},Pe=!0}function Re(n,e){var t;if(ze.push((function(){if(n)try{n.call(e)}catch(n){je(n,e,"nextTick")}else t&&t(e)})),Oe||(Oe=!0,Ie()),!n&&"undefined"!=typeof Promise)return new Promise((function(n){t=n}))}function De(n){return function(e,t){if(void 0===t&&(t=pn),t)return function(n,e,t){var r=n.$options;r[e]=jt(r[e],t)}(t,n,e)}}De("beforeMount"),De("mounted"),De("beforeUpdate"),De("updated"),De("beforeDestroy"),De("destroyed"),De("activated"),De("deactivated"),De("serverPrefetch"),De("renderTracked"),De("renderTriggered"),De("errorCaptured");var $e=new cn;function Ne(n){return function n(e,t){var r,i,o=a(e);if(!o&&!u(e)||e.__v_skip||Object.isFrozen(e)||e instanceof hn)return;if(e.__ob__){var s=e.__ob__.dep.id;if(t.has(s))return;t.add(s)}if(o)for(r=e.length;r--;)n(e[r],t);else if(Rn(e))n(e.value,t);else for(i=Object.keys(e),r=i.length;r--;)n(e[i[r]],t)}(n,$e),$e.clear(),n}var Fe,He=0,We=function(){function n(n,e,t,r,a){var i,o;i=this,void 0===(o=$n&&!$n._vm?$n:n?n._scope:void 0)&&(o=$n),o&&o.active&&o.effects.push(i),(this.vm=n)&&a&&(n._watcher=this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++He,this.active=!0,this.post=!1,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new cn,this.newDepIds=new cn,this.expression="",c(e)?this.getter=e:(this.getter=function(n){if(!V.test(n)){var e=n.split(".");return function(n){for(var t=0;t<e.length;t++){if(!n)return;n=n[e[t]]}return n}}}(e),this.getter||(this.getter=O)),this.value=this.lazy?void 0:this.get()}return n.prototype.get=function(){var n;xn(this);var e=this.vm;try{n=this.getter.call(e,e)}catch(n){if(!this.user)throw n;je(n,e,'getter for watcher "'.concat(this.expression,'"'))}finally{this.deep&&Ne(n),kn(),this.cleanupDeps()}return n},n.prototype.addDep=function(n){var e=n.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(n),this.depIds.has(e)||n.addSub(this))},n.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var e=this.deps[n];this.newDepIds.has(e.id)||e.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},n.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():dt(this)},n.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||u(n)||this.deep){var e=this.value;if(this.value=n,this.user){var t='callback for watcher "'.concat(this.expression,'"');Ee(this.cb,this.vm,[n,e],this.vm,t)}else this.cb.call(this.vm,n,e)}}},n.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},n.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},n.prototype.teardown=function(){if(this.vm&&!this.vm._isBeingDestroyed&&w(this.vm._scope.effects,this),this.active){for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1,this.onStop&&this.onStop()}},n}();function Ve(n,e){Fe.$on(n,e)}function Je(n,e){Fe.$off(n,e)}function Ue(n,e){var t=Fe;return function r(){var a=e.apply(null,arguments);null!==a&&t.$off(n,r)}}function Qe(n,e,t){Fe=n,Vn(e,t||{},Ve,Je,Ue,n),Fe=void 0}var Xe=null;function Ke(n){var e=Xe;return Xe=n,function(){Xe=e}}function Ze(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function Ye(n,e){if(e){if(n._directInactive=!1,Ze(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var t=0;t<n.$children.length;t++)Ye(n.$children[t]);nt(n,"activated")}}function nt(n,e,t,r){void 0===r&&(r=!0),xn();var a=pn;r&&dn(n);var i=n.$options[e],o="".concat(e," hook");if(i)for(var s=0,l=i.length;s<l;s++)Ee(i[s],n,t||null,n,o);n._hasHookEvent&&n.$emit("hook:"+e),r&&dn(a),kn()}var et=[],tt=[],rt={},at=!1,it=!1,ot=0;var st=0,lt=Date.now;if(U&&!X){var ct=window.performance;ct&&"function"==typeof ct.now&&lt()>document.createEvent("Event").timeStamp&&(lt=function(){return ct.now()})}var ut=function(n,e){if(n.post){if(!e.post)return 1}else if(e.post)return-1;return n.id-e.id};function pt(){var n,e;for(st=lt(),it=!0,et.sort(ut),ot=0;ot<et.length;ot++)(n=et[ot]).before&&n.before(),e=n.id,rt[e]=null,n.run();var t=tt.slice(),r=et.slice();ot=et.length=tt.length=0,rt={},at=it=!1,function(n){for(var e=0;e<n.length;e++)n[e]._inactive=!0,Ye(n[e],!0)}(t),function(n){var e=n.length;for(;e--;){var t=n[e],r=t.vm;r&&r._watcher===t&&r._isMounted&&!r._isDestroyed&&nt(r,"updated")}}(r),function(){for(var n=0;n<bn.length;n++){var e=bn[n];e.subs=e.subs.filter((function(n){return n})),e._pending=!1}bn.length=0}(),sn&&N.devtools&&sn.emit("flush")}function dt(n){var e=n.id;if(null==rt[e]&&(n!==yn.target||!n.noRecurse)){if(rt[e]=!0,it){for(var t=et.length-1;t>ot&&et[t].id>n.id;)t--;et.splice(t+1,0,n)}else et.push(n);at||(at=!0,Re(pt))}}function ht(n,e){if(n){for(var t=Object.create(null),r=un?Reflect.ownKeys(n):Object.keys(n),a=0;a<r.length;a++){var i=r[a];if("__ob__"!==i){var o=n[i].from;if(o in e._provided)t[i]=e._provided[o];else if("default"in n[i]){var s=n[i].default;t[i]=c(s)?s.call(e):s}else 0}}return t}}function mt(n,e,t,i,o){var l,c=this,u=o.options;k(i,"_uid")?(l=Object.create(i))._original=i:(l=i,i=i._original);var p=s(u._compiled),d=!p;this.data=n,this.props=e,this.children=t,this.parent=i,this.listeners=n.on||r,this.injections=ht(u.inject,i),this.slots=function(){return c.$slots||ge(i,n.scopedSlots,c.$slots=de(t,i)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return ge(i,n.scopedSlots,this.slots())}}),p&&(this.$options=u,this.$slots=this.slots(),this.$scopedSlots=ge(i,n.scopedSlots,this.$slots)),u._scopeId?this._c=function(n,e,t,r){var o=Te(l,n,e,t,r,d);return o&&!a(o)&&(o.fnScopeId=u._scopeId,o.fnContext=i),o}:this._c=function(n,e,t,r){return Te(l,n,e,t,r,d)}}function gt(n,e,t,r,a){var i=fn(n);return i.fnContext=t,i.fnOptions=r,e.slot&&((i.data||(i.data={})).slot=e.slot),i}function ft(n,e){for(var t in e)n[T(t)]=e[t]}function vt(n){return n.name||n.__name||n._componentTag}pe(mt.prototype);var bt={init:function(n,e){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var t=n;bt.prepatch(t,t)}else{(n.componentInstance=function(n,e){var t={_isComponent:!0,_parentVnode:n,parent:e},r=n.data.inlineTemplate;o(r)&&(t.render=r.render,t.staticRenderFns=r.staticRenderFns);return new n.componentOptions.Ctor(t)}(n,Xe)).$mount(e?n.elm:void 0,e)}},prepatch:function(n,e){var t=e.componentOptions;!function(n,e,t,a,i){var o=a.data.scopedSlots,s=n.$scopedSlots,l=!!(o&&!o.$stable||s!==r&&!s.$stable||o&&n.$scopedSlots.$key!==o.$key||!o&&n.$scopedSlots.$key),c=!!(i||n.$options._renderChildren||l),u=n.$vnode;n.$options._parentVnode=a,n.$vnode=a,n._vnode&&(n._vnode.parent=a),n.$options._renderChildren=i;var p=a.data.attrs||r;n._attrsProxy&&ye(n._attrsProxy,p,u.data&&u.data.attrs||r,n,"$attrs")&&(c=!0),n.$attrs=p,t=t||r;var d=n.$options._parentListeners;if(n._listenersProxy&&ye(n._listenersProxy,t,d||r,n,"$listeners"),n.$listeners=n.$options._parentListeners=t,Qe(n,t,d),e&&n.$options.props){Cn(!1);for(var h=n._props,m=n.$options._propKeys||[],g=0;g<m.length;g++){var f=m[g],v=n.$options.props;h[f]=Pt(f,v,e,n)}Cn(!0),n.$options.propsData=e}c&&(n.$slots=de(i,a.context),n.$forceUpdate())}(e.componentInstance=n.componentInstance,t.propsData,t.listeners,e,t.children)},insert:function(n){var e,t=n.context,r=n.componentInstance;r._isMounted||(r._isMounted=!0,nt(r,"mounted")),n.data.keepAlive&&(t._isMounted?((e=r)._inactive=!1,tt.push(e)):Ye(r,!0))},destroy:function(n){var e=n.componentInstance;e._isDestroyed||(n.data.keepAlive?function n(e,t){if(!(t&&(e._directInactive=!0,Ze(e))||e._inactive)){e._inactive=!0;for(var r=0;r<e.$children.length;r++)n(e.$children[r]);nt(e,"deactivated")}}(e,!0):e.$destroy())}},yt=Object.keys(bt);function wt(n,e,t,l,c){if(!i(n)){var p=t.$options._base;if(u(n)&&(n=p.extend(n)),"function"==typeof n){var d;if(i(n.cid)&&void 0===(n=function(n,e){if(s(n.error)&&o(n.errorComp))return n.errorComp;if(o(n.resolved))return n.resolved;var t=ke;if(t&&o(n.owners)&&-1===n.owners.indexOf(t)&&n.owners.push(t),s(n.loading)&&o(n.loadingComp))return n.loadingComp;if(t&&!o(n.owners)){var r=n.owners=[t],a=!0,l=null,c=null;t.$on("hook:destroyed",(function(){return w(r,t)}));var p=function(n){for(var e=0,t=r.length;e<t;e++)r[e].$forceUpdate();n&&(r.length=0,null!==l&&(clearTimeout(l),l=null),null!==c&&(clearTimeout(c),c=null))},d=q((function(t){n.resolved=_e(t,e),a?r.length=0:p(!0)})),h=q((function(e){o(n.errorComp)&&(n.error=!0,p(!0))})),m=n(d,h);return u(m)&&(g(m)?i(n.resolved)&&m.then(d,h):g(m.component)&&(m.component.then(d,h),o(m.error)&&(n.errorComp=_e(m.error,e)),o(m.loading)&&(n.loadingComp=_e(m.loading,e),0===m.delay?n.loading=!0:l=setTimeout((function(){l=null,i(n.resolved)&&i(n.error)&&(n.loading=!0,p(!1))}),m.delay||200)),o(m.timeout)&&(c=setTimeout((function(){c=null,i(n.resolved)&&h(null)}),m.timeout)))),a=!1,n.loading?n.loadingComp:n.resolved}}(d=n,p)))return function(n,e,t,r,a){var i=mn();return i.asyncFactory=n,i.asyncMeta={data:e,context:t,children:r,tag:a},i}(d,e,t,l,c);e=e||{},Wt(n),o(e.model)&&function(n,e){var t=n.model&&n.model.prop||"value",r=n.model&&n.model.event||"input";(e.attrs||(e.attrs={}))[t]=e.model.value;var i=e.on||(e.on={}),s=i[r],l=e.model.callback;o(s)?(a(s)?-1===s.indexOf(l):s!==l)&&(i[r]=[l].concat(s)):i[r]=l}(n.options,e);var h=function(n,e,t){var r=e.options.props;if(!i(r)){var a={},s=n.attrs,l=n.props;if(o(s)||o(l))for(var c in r){var u=C(c);Un(a,l,c,u,!0)||Un(a,s,c,u,!1)}return a}}(e,n);if(s(n.options.functional))return function(n,e,t,i,s){var l=n.options,c={},u=l.props;if(o(u))for(var p in u)c[p]=Pt(p,u,e||r);else o(t.attrs)&&ft(c,t.attrs),o(t.props)&&ft(c,t.props);var d=new mt(t,c,s,i,n),h=l.render.call(null,d._c,d);if(h instanceof hn)return gt(h,t,d.parent,l,d);if(a(h)){for(var m=Qn(h)||[],g=new Array(m.length),f=0;f<m.length;f++)g[f]=gt(m[f],t,d.parent,l,d);return g}}(n,h,e,t,l);var m=e.on;if(e.on=e.nativeOn,s(n.options.abstract)){var f=e.slot;e={},f&&(e.slot=f)}!function(n){for(var e=n.hook||(n.hook={}),t=0;t<yt.length;t++){var r=yt[t],a=e[r],i=bt[r];a===i||a&&a._merged||(e[r]=a?xt(i,a):i)}}(e);var v=vt(n.options)||c;return new hn("vue-component-".concat(n.cid).concat(v?"-".concat(v):""),e,void 0,void 0,void 0,t,{Ctor:n,propsData:h,listeners:m,tag:c,children:l},d)}}}function xt(n,e){var t=function(t,r){n(t,r),e(t,r)};return t._merged=!0,t}var kt=O,_t=N.optionMergeStrategies;function St(n,e,t){if(void 0===t&&(t=!0),!e)return n;for(var r,a,i,o=un?Reflect.ownKeys(e):Object.keys(e),s=0;s<o.length;s++)"__ob__"!==(r=o[s])&&(a=n[r],i=e[r],t&&k(n,r)?a!==i&&d(a)&&d(i)&&St(a,i):On(n,r,i));return n}function Tt(n,e,t){return t?function(){var r=c(e)?e.call(t,t):e,a=c(n)?n.call(t,t):n;return r?St(r,a):a}:e?n?function(){return St(c(e)?e.call(this,this):e,c(n)?n.call(this,this):n)}:e:n}function jt(n,e){var t=e?n?n.concat(e):a(e)?e:[e]:n;return t?function(n){for(var e=[],t=0;t<n.length;t++)-1===e.indexOf(n[t])&&e.push(n[t]);return e}(t):t}function Et(n,e,t,r){var a=Object.create(n||null);return e?P(a,e):a}_t.data=function(n,e,t){return t?Tt(n,e,t):e&&"function"!=typeof e?n:Tt(n,e)},$.forEach((function(n){_t[n]=jt})),D.forEach((function(n){_t[n+"s"]=Et})),_t.watch=function(n,e,t,r){if(n===tn&&(n=void 0),e===tn&&(e=void 0),!e)return Object.create(n||null);if(!n)return e;var i={};for(var o in P(i,n),e){var s=i[o],l=e[o];s&&!a(s)&&(s=[s]),i[o]=s?s.concat(l):a(l)?l:[l]}return i},_t.props=_t.methods=_t.inject=_t.computed=function(n,e,t,r){if(!n)return e;var a=Object.create(null);return P(a,n),e&&P(a,e),a},_t.provide=function(n,e){return n?function(){var t=Object.create(null);return St(t,c(n)?n.call(this):n),e&&St(t,c(e)?e.call(this):e,!1),t}:e};var Ct=function(n,e){return void 0===e?n:e};function At(n,e,t){if(c(e)&&(e=e.options),function(n,e){var t=n.props;if(t){var r,i,o={};if(a(t))for(r=t.length;r--;)"string"==typeof(i=t[r])&&(o[T(i)]={type:null});else if(d(t))for(var s in t)i=t[s],o[T(s)]=d(i)?i:{type:i};else 0;n.props=o}}(e),function(n,e){var t=n.inject;if(t){var r=n.inject={};if(a(t))for(var i=0;i<t.length;i++)r[t[i]]={from:t[i]};else if(d(t))for(var o in t){var s=t[o];r[o]=d(s)?P({from:o},s):{from:s}}else 0}}(e),function(n){var e=n.directives;if(e)for(var t in e){var r=e[t];c(r)&&(e[t]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(n=At(n,e.extends,t)),e.mixins))for(var r=0,i=e.mixins.length;r<i;r++)n=At(n,e.mixins[r],t);var o,s={};for(o in n)l(o);for(o in e)k(n,o)||l(o);function l(r){var a=_t[r]||Ct;s[r]=a(n[r],e[r],t,r)}return s}function It(n,e,t,r){if("string"==typeof t){var a=n[e];if(k(a,t))return a[t];var i=T(t);if(k(a,i))return a[i];var o=j(i);return k(a,o)?a[o]:a[t]||a[i]||a[o]}}function Pt(n,e,t,r){var a=e[n],i=!k(t,n),o=t[n],s=Mt(Boolean,a.type);if(s>-1)if(i&&!k(a,"default"))o=!1;else if(""===o||o===C(n)){var l=Mt(String,a.type);(l<0||s<l)&&(o=!0)}if(void 0===o){o=function(n,e,t){if(!k(e,"default"))return;var r=e.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[t]&&void 0!==n._props[t])return n._props[t];return c(r)&&"Function"!==Ot(e.type)?r.call(n):r}(r,a,n);var u=En;Cn(!0),Pn(o),Cn(u)}return o}var zt=/^\s*function (\w+)/;function Ot(n){var e=n&&n.toString().match(zt);return e?e[1]:""}function Bt(n,e){return Ot(n)===Ot(e)}function Mt(n,e){if(!a(e))return Bt(e,n)?0:-1;for(var t=0,r=e.length;t<r;t++)if(Bt(e[t],n))return t;return-1}var Gt={enumerable:!0,configurable:!0,get:O,set:O};function Lt(n,e,t){Gt.get=function(){return this[e][t]},Gt.set=function(n){this[e][t]=n},Object.defineProperty(n,t,Gt)}function qt(n){var e=n.$options;if(e.props&&function(n,e){var t=n.$options.propsData||{},r=n._props=Gn({}),a=n.$options._propKeys=[];n.$parent&&Cn(!1);var i=function(i){a.push(i);var o=Pt(i,e,t,n);zn(r,i,o),i in n||Lt(n,"_props",i)};for(var o in e)i(o);Cn(!0)}(n,e.props),function(n){var e=n.$options,t=e.setup;if(t){var r=n._setupContext=be(n);dn(n),xn();var a=Ee(t,null,[n._props||Gn({}),r],n,"setup");if(kn(),dn(),c(a))e.render=a;else if(u(a))if(n._setupState=a,a.__sfc){var i=n._setupProxy={};for(var o in a)"__sfc"!==o&&Dn(i,a,o)}else for(var o in a)H(o)||Dn(n,a,o);else 0}}(n),e.methods&&function(n,e){n.$options.props;for(var t in e)n[t]="function"!=typeof e[t]?O:A(e[t],n)}(n,e.methods),e.data)!function(n){var e=n.$options.data;d(e=n._data=c(e)?function(n,e){xn();try{return n.call(e,e)}catch(n){return je(n,e,"data()"),{}}finally{kn()}}(e,n):e||{})||(e={});var t=Object.keys(e),r=n.$options.props,a=(n.$options.methods,t.length);for(;a--;){var i=t[a];0,r&&k(r,i)||H(i)||Lt(n,"_data",i)}var o=Pn(e);o&&o.vmCount++}(n);else{var t=Pn(n._data={});t&&t.vmCount++}e.computed&&function(n,e){var t=n._computedWatchers=Object.create(null),r=on();for(var a in e){var i=e[a],o=c(i)?i:i.get;0,r||(t[a]=new We(n,o||O,O,Rt)),a in n||Dt(n,a,i)}}(n,e.computed),e.watch&&e.watch!==tn&&function(n,e){for(var t in e){var r=e[t];if(a(r))for(var i=0;i<r.length;i++)Ft(n,t,r[i]);else Ft(n,t,r)}}(n,e.watch)}var Rt={lazy:!0};function Dt(n,e,t){var r=!on();c(t)?(Gt.get=r?$t(e):Nt(t),Gt.set=O):(Gt.get=t.get?r&&!1!==t.cache?$t(e):Nt(t.get):O,Gt.set=t.set||O),Object.defineProperty(n,e,Gt)}function $t(n){return function(){var e=this._computedWatchers&&this._computedWatchers[n];if(e)return e.dirty&&e.evaluate(),yn.target&&e.depend(),e.value}}function Nt(n){return function(){return n.call(this,this)}}function Ft(n,e,t,r){return d(t)&&(r=t,t=t.handler),"string"==typeof t&&(t=n[t]),n.$watch(e,t,r)}var Ht=0;function Wt(n){var e=n.options;if(n.super){var t=Wt(n.super);if(t!==n.superOptions){n.superOptions=t;var r=function(n){var e,t=n.options,r=n.sealedOptions;for(var a in t)t[a]!==r[a]&&(e||(e={}),e[a]=t[a]);return e}(n);r&&P(n.extendOptions,r),(e=n.options=At(t,n.extendOptions)).name&&(e.components[e.name]=n)}}return e}function Vt(n){this._init(n)}function Jt(n){n.cid=0;var e=1;n.extend=function(n){n=n||{};var t=this,r=t.cid,a=n._Ctor||(n._Ctor={});if(a[r])return a[r];var i=vt(n)||vt(t.options);var o=function(n){this._init(n)};return(o.prototype=Object.create(t.prototype)).constructor=o,o.cid=e++,o.options=At(t.options,n),o.super=t,o.options.props&&function(n){var e=n.options.props;for(var t in e)Lt(n.prototype,"_props",t)}(o),o.options.computed&&function(n){var e=n.options.computed;for(var t in e)Dt(n.prototype,t,e[t])}(o),o.extend=t.extend,o.mixin=t.mixin,o.use=t.use,D.forEach((function(n){o[n]=t[n]})),i&&(o.options.components[i]=o),o.superOptions=t.options,o.extendOptions=n,o.sealedOptions=P({},o.options),a[r]=o,o}}function Ut(n){return n&&(vt(n.Ctor.options)||n.tag)}function Qt(n,e){return a(n)?n.indexOf(e)>-1:"string"==typeof n?n.split(",").indexOf(e)>-1:!!h(n)&&n.test(e)}function Xt(n,e){var t=n.cache,r=n.keys,a=n._vnode;for(var i in t){var o=t[i];if(o){var s=o.name;s&&!e(s)&&Kt(t,i,r,a)}}}function Kt(n,e,t,r){var a=n[e];!a||r&&a.tag===r.tag||a.componentInstance.$destroy(),n[e]=null,w(t,e)}!function(n){n.prototype._init=function(n){var e=this;e._uid=Ht++,e._isVue=!0,e.__v_skip=!0,e._scope=new Nn(!0),e._scope._vm=!0,n&&n._isComponent?function(n,e){var t=n.$options=Object.create(n.constructor.options),r=e._parentVnode;t.parent=e.parent,t._parentVnode=r;var a=r.componentOptions;t.propsData=a.propsData,t._parentListeners=a.listeners,t._renderChildren=a.children,t._componentTag=a.tag,e.render&&(t.render=e.render,t.staticRenderFns=e.staticRenderFns)}(e,n):e.$options=At(Wt(e.constructor),n||{},e),e._renderProxy=e,e._self=e,function(n){var e=n.$options,t=e.parent;if(t&&!e.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(n)}n.$parent=t,n.$root=t?t.$root:n,n.$children=[],n.$refs={},n._provided=t?t._provided:Object.create(null),n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(e),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var e=n.$options._parentListeners;e&&Qe(n,e)}(e),function(n){n._vnode=null,n._staticTrees=null;var e=n.$options,t=n.$vnode=e._parentVnode,a=t&&t.context;n.$slots=de(e._renderChildren,a),n.$scopedSlots=t?ge(n.$parent,t.data.scopedSlots,n.$slots):r,n._c=function(e,t,r,a){return Te(n,e,t,r,a,!1)},n.$createElement=function(e,t,r,a){return Te(n,e,t,r,a,!0)};var i=t&&t.data;zn(n,"$attrs",i&&i.attrs||r,null,!0),zn(n,"$listeners",e._parentListeners||r,null,!0)}(e),nt(e,"beforeCreate",void 0,!1),function(n){var e=ht(n.$options.inject,n);e&&(Cn(!1),Object.keys(e).forEach((function(t){zn(n,t,e[t])})),Cn(!0))}(e),qt(e),function(n){var e=n.$options.provide;if(e){var t=c(e)?e.call(n):e;if(!u(t))return;for(var r=Fn(n),a=un?Reflect.ownKeys(t):Object.keys(t),i=0;i<a.length;i++){var o=a[i];Object.defineProperty(r,o,Object.getOwnPropertyDescriptor(t,o))}}}(e),nt(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}(Vt),function(n){var e={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(n.prototype,"$data",e),Object.defineProperty(n.prototype,"$props",t),n.prototype.$set=On,n.prototype.$delete=Bn,n.prototype.$watch=function(n,e,t){if(d(e))return Ft(this,n,e,t);(t=t||{}).user=!0;var r=new We(this,n,e,t);if(t.immediate){var a='callback for immediate watcher "'.concat(r.expression,'"');xn(),Ee(e,this,[r.value],this,a),kn()}return function(){r.teardown()}}}(Vt),function(n){var e=/^hook:/;n.prototype.$on=function(n,t){var r=this;if(a(n))for(var i=0,o=n.length;i<o;i++)r.$on(n[i],t);else(r._events[n]||(r._events[n]=[])).push(t),e.test(n)&&(r._hasHookEvent=!0);return r},n.prototype.$once=function(n,e){var t=this;function r(){t.$off(n,r),e.apply(t,arguments)}return r.fn=e,t.$on(n,r),t},n.prototype.$off=function(n,e){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(a(n)){for(var r=0,i=n.length;r<i;r++)t.$off(n[r],e);return t}var o,s=t._events[n];if(!s)return t;if(!e)return t._events[n]=null,t;for(var l=s.length;l--;)if((o=s[l])===e||o.fn===e){s.splice(l,1);break}return t},n.prototype.$emit=function(n){var e=this,t=e._events[n];if(t){t=t.length>1?I(t):t;for(var r=I(arguments,1),a='event handler for "'.concat(n,'"'),i=0,o=t.length;i<o;i++)Ee(t[i],e,r,e,a)}return e}}(Vt),function(n){n.prototype._update=function(n,e){var t=this,r=t.$el,a=t._vnode,i=Ke(t);t._vnode=n,t.$el=a?t.__patch__(a,n):t.__patch__(t.$el,n,e,!1),i(),r&&(r.__vue__=null),t.$el&&(t.$el.__vue__=t);for(var o=t;o&&o.$vnode&&o.$parent&&o.$vnode===o.$parent._vnode;)o.$parent.$el=o.$el,o=o.$parent},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){nt(n,"beforeDestroy"),n._isBeingDestroyed=!0;var e=n.$parent;!e||e._isBeingDestroyed||n.$options.abstract||w(e.$children,n),n._scope.stop(),n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),nt(n,"destroyed"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}(Vt),function(n){pe(n.prototype),n.prototype.$nextTick=function(n){return Re(n,this)},n.prototype._render=function(){var n,e=this,t=e.$options,r=t.render,i=t._parentVnode;i&&e._isMounted&&(e.$scopedSlots=ge(e.$parent,i.data.scopedSlots,e.$slots,e.$scopedSlots),e._slotsProxy&&xe(e._slotsProxy,e.$scopedSlots)),e.$vnode=i;try{dn(e),ke=e,n=r.call(e._renderProxy,e.$createElement)}catch(t){je(t,e,"render"),n=e._vnode}finally{ke=null,dn()}return a(n)&&1===n.length&&(n=n[0]),n instanceof hn||(n=mn()),n.parent=i,n}}(Vt);var Zt=[String,RegExp,Array],Yt={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Zt,exclude:Zt,max:[String,Number]},methods:{cacheVNode:function(){var n=this.cache,e=this.keys,t=this.vnodeToCache,r=this.keyToCache;if(t){var a=t.tag,i=t.componentInstance,o=t.componentOptions;n[r]={name:Ut(o),tag:a,componentInstance:i},e.push(r),this.max&&e.length>parseInt(this.max)&&Kt(n,e[0],e,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)Kt(this.cache,n,this.keys)},mounted:function(){var n=this;this.cacheVNode(),this.$watch("include",(function(e){Xt(n,(function(n){return Qt(e,n)}))})),this.$watch("exclude",(function(e){Xt(n,(function(n){return!Qt(e,n)}))}))},updated:function(){this.cacheVNode()},render:function(){var n=this.$slots.default,e=Se(n),t=e&&e.componentOptions;if(t){var r=Ut(t),a=this.include,i=this.exclude;if(a&&(!r||!Qt(a,r))||i&&r&&Qt(i,r))return e;var o=this.cache,s=this.keys,l=null==e.key?t.Ctor.cid+(t.tag?"::".concat(t.tag):""):e.key;o[l]?(e.componentInstance=o[l].componentInstance,w(s,l),s.push(l)):(this.vnodeToCache=e,this.keyToCache=l),e.data.keepAlive=!0}return e||n&&n[0]}}};!function(n){var e={get:function(){return N}};Object.defineProperty(n,"config",e),n.util={warn:kt,extend:P,mergeOptions:At,defineReactive:zn},n.set=On,n.delete=Bn,n.nextTick=Re,n.observable=function(n){return Pn(n),n},n.options=Object.create(null),D.forEach((function(e){n.options[e+"s"]=Object.create(null)})),n.options._base=n,P(n.options.components,Yt),function(n){n.use=function(n){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(n)>-1)return this;var t=I(arguments,1);return t.unshift(this),c(n.install)?n.install.apply(n,t):c(n)&&n.apply(null,t),e.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=At(this.options,n),this}}(n),Jt(n),function(n){D.forEach((function(e){n[e]=function(n,t){return t?("component"===e&&d(t)&&(t.name=t.name||n,t=this.options._base.extend(t)),"directive"===e&&c(t)&&(t={bind:t,update:t}),this.options[e+"s"][n]=t,t):this.options[e+"s"][n]}}))}(n)}(Vt),Object.defineProperty(Vt.prototype,"$isServer",{get:on}),Object.defineProperty(Vt.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Vt,"FunctionalRenderContext",{value:mt}),Vt.version="2.7.14";var nr=b("style,class"),er=b("input,textarea,option,select,progress"),tr=b("contenteditable,draggable,spellcheck"),rr=b("events,caret,typing,plaintext-only"),ar=b("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),ir="http://www.w3.org/1999/xlink",or=function(n){return":"===n.charAt(5)&&"xlink"===n.slice(0,5)},sr=function(n){return or(n)?n.slice(6,n.length):""},lr=function(n){return null==n||!1===n};function cr(n){for(var e=n.data,t=n,r=n;o(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=ur(r.data,e));for(;o(t=t.parent);)t&&t.data&&(e=ur(e,t.data));return function(n,e){if(o(n)||o(e))return pr(n,dr(e));return""}(e.staticClass,e.class)}function ur(n,e){return{staticClass:pr(n.staticClass,e.staticClass),class:o(n.class)?[n.class,e.class]:e.class}}function pr(n,e){return n?e?n+" "+e:n:e||""}function dr(n){return Array.isArray(n)?function(n){for(var e,t="",r=0,a=n.length;r<a;r++)o(e=dr(n[r]))&&""!==e&&(t&&(t+=" "),t+=e);return t}(n):u(n)?function(n){var e="";for(var t in n)n[t]&&(e&&(e+=" "),e+=t);return e}(n):"string"==typeof n?n:""}var hr={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},mr=b("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),gr=b("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),fr=function(n){return mr(n)||gr(n)};var vr=Object.create(null);var br=b("text,number,password,search,email,tel,url");var yr=Object.freeze({__proto__:null,createElement:function(n,e){var t=document.createElement(n);return"select"!==n||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(n,e){return document.createElementNS(hr[n],e)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,e,t){n.insertBefore(e,t)},removeChild:function(n,e){n.removeChild(e)},appendChild:function(n,e){n.appendChild(e)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,e){n.textContent=e},setStyleScope:function(n,e){n.setAttribute(e,"")}}),wr={create:function(n,e){xr(e)},update:function(n,e){n.data.ref!==e.data.ref&&(xr(n,!0),xr(e))},destroy:function(n){xr(n,!0)}};function xr(n,e){var t=n.data.ref;if(o(t)){var r=n.context,i=n.componentInstance||n.elm,s=e?null:i,l=e?void 0:i;if(c(t))Ee(t,r,[s],r,"template ref function");else{var u=n.data.refInFor,p="string"==typeof t||"number"==typeof t,d=Rn(t),h=r.$refs;if(p||d)if(u){var m=p?h[t]:t.value;e?a(m)&&w(m,i):a(m)?m.includes(i)||m.push(i):p?(h[t]=[i],kr(r,t,h[t])):t.value=[i]}else if(p){if(e&&h[t]!==i)return;h[t]=l,kr(r,t,s)}else if(d){if(e&&t.value!==i)return;t.value=s}else 0}}}function kr(n,e,t){var r=n._setupState;r&&k(r,e)&&(Rn(r[e])?r[e].value=t:r[e]=t)}var _r=new hn("",{},[]),Sr=["create","activate","update","remove","destroy"];function Tr(n,e){return n.key===e.key&&n.asyncFactory===e.asyncFactory&&(n.tag===e.tag&&n.isComment===e.isComment&&o(n.data)===o(e.data)&&function(n,e){if("input"!==n.tag)return!0;var t,r=o(t=n.data)&&o(t=t.attrs)&&t.type,a=o(t=e.data)&&o(t=t.attrs)&&t.type;return r===a||br(r)&&br(a)}(n,e)||s(n.isAsyncPlaceholder)&&i(e.asyncFactory.error))}function jr(n,e,t){var r,a,i={};for(r=e;r<=t;++r)o(a=n[r].key)&&(i[a]=r);return i}var Er={create:Cr,update:Cr,destroy:function(n){Cr(n,_r)}};function Cr(n,e){(n.data.directives||e.data.directives)&&function(n,e){var t,r,a,i=n===_r,o=e===_r,s=Ir(n.data.directives,n.context),l=Ir(e.data.directives,e.context),c=[],u=[];for(t in l)r=s[t],a=l[t],r?(a.oldValue=r.value,a.oldArg=r.arg,zr(a,"update",e,n),a.def&&a.def.componentUpdated&&u.push(a)):(zr(a,"bind",e,n),a.def&&a.def.inserted&&c.push(a));if(c.length){var p=function(){for(var t=0;t<c.length;t++)zr(c[t],"inserted",e,n)};i?Jn(e,"insert",p):p()}u.length&&Jn(e,"postpatch",(function(){for(var t=0;t<u.length;t++)zr(u[t],"componentUpdated",e,n)}));if(!i)for(t in s)l[t]||zr(s[t],"unbind",n,n,o)}(n,e)}var Ar=Object.create(null);function Ir(n,e){var t,r,a=Object.create(null);if(!n)return a;for(t=0;t<n.length;t++){if((r=n[t]).modifiers||(r.modifiers=Ar),a[Pr(r)]=r,e._setupState&&e._setupState.__sfc){var i=r.def||It(e,"_setupState","v-"+r.name);r.def="function"==typeof i?{bind:i,update:i}:i}r.def=r.def||It(e.$options,"directives",r.name)}return a}function Pr(n){return n.rawName||"".concat(n.name,".").concat(Object.keys(n.modifiers||{}).join("."))}function zr(n,e,t,r,a){var i=n.def&&n.def[e];if(i)try{i(t.elm,n,t,r,a)}catch(r){je(r,t.context,"directive ".concat(n.name," ").concat(e," hook"))}}var Or=[wr,Er];function Br(n,e){var t=e.componentOptions;if(!(o(t)&&!1===t.Ctor.options.inheritAttrs||i(n.data.attrs)&&i(e.data.attrs))){var r,a,l=e.elm,c=n.data.attrs||{},u=e.data.attrs||{};for(r in(o(u.__ob__)||s(u._v_attr_proxy))&&(u=e.data.attrs=P({},u)),u)a=u[r],c[r]!==a&&Mr(l,r,a,e.data.pre);for(r in(X||Z)&&u.value!==c.value&&Mr(l,"value",u.value),c)i(u[r])&&(or(r)?l.removeAttributeNS(ir,sr(r)):tr(r)||l.removeAttribute(r))}}function Mr(n,e,t,r){r||n.tagName.indexOf("-")>-1?Gr(n,e,t):ar(e)?lr(t)?n.removeAttribute(e):(t="allowfullscreen"===e&&"EMBED"===n.tagName?"true":e,n.setAttribute(e,t)):tr(e)?n.setAttribute(e,function(n,e){return lr(e)||"false"===e?"false":"contenteditable"===n&&rr(e)?e:"true"}(e,t)):or(e)?lr(t)?n.removeAttributeNS(ir,sr(e)):n.setAttributeNS(ir,e,t):Gr(n,e,t)}function Gr(n,e,t){if(lr(t))n.removeAttribute(e);else{if(X&&!K&&"TEXTAREA"===n.tagName&&"placeholder"===e&&""!==t&&!n.__ieph){var r=function(e){e.stopImmediatePropagation(),n.removeEventListener("input",r)};n.addEventListener("input",r),n.__ieph=!0}n.setAttribute(e,t)}}var Lr={create:Br,update:Br};function qr(n,e){var t=e.elm,r=e.data,a=n.data;if(!(i(r.staticClass)&&i(r.class)&&(i(a)||i(a.staticClass)&&i(a.class)))){var s=cr(e),l=t._transitionClasses;o(l)&&(s=pr(s,dr(l))),s!==t._prevClass&&(t.setAttribute("class",s),t._prevClass=s)}}var Rr,Dr={create:qr,update:qr};function $r(n,e,t){var r=Rr;return function a(){var i=e.apply(null,arguments);null!==i&&Hr(n,a,t,r)}}var Nr=Pe&&!(en&&Number(en[1])<=53);function Fr(n,e,t,r){if(Nr){var a=st,i=e;e=i._wrapper=function(n){if(n.target===n.currentTarget||n.timeStamp>=a||n.timeStamp<=0||n.target.ownerDocument!==document)return i.apply(this,arguments)}}Rr.addEventListener(n,e,rn?{capture:t,passive:r}:t)}function Hr(n,e,t,r){(r||Rr).removeEventListener(n,e._wrapper||e,t)}function Wr(n,e){if(!i(n.data.on)||!i(e.data.on)){var t=e.data.on||{},r=n.data.on||{};Rr=e.elm||n.elm,function(n){if(o(n.__r)){var e=X?"change":"input";n[e]=[].concat(n.__r,n[e]||[]),delete n.__r}o(n.__c)&&(n.change=[].concat(n.__c,n.change||[]),delete n.__c)}(t),Vn(t,r,Fr,Hr,$r,e.context),Rr=void 0}}var Vr,Jr={create:Wr,update:Wr,destroy:function(n){return Wr(n,_r)}};function Ur(n,e){if(!i(n.data.domProps)||!i(e.data.domProps)){var t,r,a=e.elm,l=n.data.domProps||{},c=e.data.domProps||{};for(t in(o(c.__ob__)||s(c._v_attr_proxy))&&(c=e.data.domProps=P({},c)),l)t in c||(a[t]="");for(t in c){if(r=c[t],"textContent"===t||"innerHTML"===t){if(e.children&&(e.children.length=0),r===l[t])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===t&&"PROGRESS"!==a.tagName){a._value=r;var u=i(r)?"":String(r);Qr(a,u)&&(a.value=u)}else if("innerHTML"===t&&gr(a.tagName)&&i(a.innerHTML)){(Vr=Vr||document.createElement("div")).innerHTML="<svg>".concat(r,"</svg>");for(var p=Vr.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;p.firstChild;)a.appendChild(p.firstChild)}else if(r!==l[t])try{a[t]=r}catch(n){}}}}function Qr(n,e){return!n.composing&&("OPTION"===n.tagName||function(n,e){var t=!0;try{t=document.activeElement!==n}catch(n){}return t&&n.value!==e}(n,e)||function(n,e){var t=n.value,r=n._vModifiers;if(o(r)){if(r.number)return v(t)!==v(e);if(r.trim)return t.trim()!==e.trim()}return t!==e}(n,e))}var Xr={create:Ur,update:Ur},Kr=_((function(n){var e={},t=/:(.+)/;return n.split(/;(?![^(]*\))/g).forEach((function(n){if(n){var r=n.split(t);r.length>1&&(e[r[0].trim()]=r[1].trim())}})),e}));function Zr(n){var e=Yr(n.style);return n.staticStyle?P(n.staticStyle,e):e}function Yr(n){return Array.isArray(n)?z(n):"string"==typeof n?Kr(n):n}var na,ea=/^--/,ta=/\s*!important$/,ra=function(n,e,t){if(ea.test(e))n.style.setProperty(e,t);else if(ta.test(t))n.style.setProperty(C(e),t.replace(ta,""),"important");else{var r=ia(e);if(Array.isArray(t))for(var a=0,i=t.length;a<i;a++)n.style[r]=t[a];else n.style[r]=t}},aa=["Webkit","Moz","ms"],ia=_((function(n){if(na=na||document.createElement("div").style,"filter"!==(n=T(n))&&n in na)return n;for(var e=n.charAt(0).toUpperCase()+n.slice(1),t=0;t<aa.length;t++){var r=aa[t]+e;if(r in na)return r}}));function oa(n,e){var t=e.data,r=n.data;if(!(i(t.staticStyle)&&i(t.style)&&i(r.staticStyle)&&i(r.style))){var a,s,l=e.elm,c=r.staticStyle,u=r.normalizedStyle||r.style||{},p=c||u,d=Yr(e.data.style)||{};e.data.normalizedStyle=o(d.__ob__)?P({},d):d;var h=function(n,e){var t,r={};if(e)for(var a=n;a.componentInstance;)(a=a.componentInstance._vnode)&&a.data&&(t=Zr(a.data))&&P(r,t);(t=Zr(n.data))&&P(r,t);for(var i=n;i=i.parent;)i.data&&(t=Zr(i.data))&&P(r,t);return r}(e,!0);for(s in p)i(h[s])&&ra(l,s,"");for(s in h)(a=h[s])!==p[s]&&ra(l,s,null==a?"":a)}}var sa={create:oa,update:oa},la=/\s+/;function ca(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(la).forEach((function(e){return n.classList.add(e)})):n.classList.add(e);else{var t=" ".concat(n.getAttribute("class")||""," ");t.indexOf(" "+e+" ")<0&&n.setAttribute("class",(t+e).trim())}}function ua(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(la).forEach((function(e){return n.classList.remove(e)})):n.classList.remove(e),n.classList.length||n.removeAttribute("class");else{for(var t=" ".concat(n.getAttribute("class")||""," "),r=" "+e+" ";t.indexOf(r)>=0;)t=t.replace(r," ");(t=t.trim())?n.setAttribute("class",t):n.removeAttribute("class")}}function pa(n){if(n){if("object"==typeof n){var e={};return!1!==n.css&&P(e,da(n.name||"v")),P(e,n),e}return"string"==typeof n?da(n):void 0}}var da=_((function(n){return{enterClass:"".concat(n,"-enter"),enterToClass:"".concat(n,"-enter-to"),enterActiveClass:"".concat(n,"-enter-active"),leaveClass:"".concat(n,"-leave"),leaveToClass:"".concat(n,"-leave-to"),leaveActiveClass:"".concat(n,"-leave-active")}})),ha=U&&!K,ma="transition",ga="transitionend",fa="animation",va="animationend";ha&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(ma="WebkitTransition",ga="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(fa="WebkitAnimation",va="webkitAnimationEnd"));var ba=U?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function ya(n){ba((function(){ba(n)}))}function wa(n,e){var t=n._transitionClasses||(n._transitionClasses=[]);t.indexOf(e)<0&&(t.push(e),ca(n,e))}function xa(n,e){n._transitionClasses&&w(n._transitionClasses,e),ua(n,e)}function ka(n,e,t){var r=Sa(n,e),a=r.type,i=r.timeout,o=r.propCount;if(!a)return t();var s="transition"===a?ga:va,l=0,c=function(){n.removeEventListener(s,u),t()},u=function(e){e.target===n&&++l>=o&&c()};setTimeout((function(){l<o&&c()}),i+1),n.addEventListener(s,u)}var _a=/\b(transform|all)(,|$)/;function Sa(n,e){var t,r=window.getComputedStyle(n),a=(r[ma+"Delay"]||"").split(", "),i=(r[ma+"Duration"]||"").split(", "),o=Ta(a,i),s=(r[fa+"Delay"]||"").split(", "),l=(r[fa+"Duration"]||"").split(", "),c=Ta(s,l),u=0,p=0;return"transition"===e?o>0&&(t="transition",u=o,p=i.length):"animation"===e?c>0&&(t="animation",u=c,p=l.length):p=(t=(u=Math.max(o,c))>0?o>c?"transition":"animation":null)?"transition"===t?i.length:l.length:0,{type:t,timeout:u,propCount:p,hasTransform:"transition"===t&&_a.test(r[ma+"Property"])}}function Ta(n,e){for(;n.length<e.length;)n=n.concat(n);return Math.max.apply(null,e.map((function(e,t){return ja(e)+ja(n[t])})))}function ja(n){return 1e3*Number(n.slice(0,-1).replace(",","."))}function Ea(n,e){var t=n.elm;o(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var r=pa(n.data.transition);if(!i(r)&&!o(t._enterCb)&&1===t.nodeType){for(var a=r.css,s=r.type,l=r.enterClass,p=r.enterToClass,d=r.enterActiveClass,h=r.appearClass,m=r.appearToClass,g=r.appearActiveClass,f=r.beforeEnter,b=r.enter,y=r.afterEnter,w=r.enterCancelled,x=r.beforeAppear,k=r.appear,_=r.afterAppear,S=r.appearCancelled,T=r.duration,j=Xe,E=Xe.$vnode;E&&E.parent;)j=E.context,E=E.parent;var C=!j._isMounted||!n.isRootInsert;if(!C||k||""===k){var A=C&&h?h:l,I=C&&g?g:d,P=C&&m?m:p,z=C&&x||f,O=C&&c(k)?k:b,B=C&&_||y,M=C&&S||w,G=v(u(T)?T.enter:T);0;var L=!1!==a&&!K,R=Ia(O),D=t._enterCb=q((function(){L&&(xa(t,P),xa(t,I)),D.cancelled?(L&&xa(t,A),M&&M(t)):B&&B(t),t._enterCb=null}));n.data.show||Jn(n,"insert",(function(){var e=t.parentNode,r=e&&e._pending&&e._pending[n.key];r&&r.tag===n.tag&&r.elm._leaveCb&&r.elm._leaveCb(),O&&O(t,D)})),z&&z(t),L&&(wa(t,A),wa(t,I),ya((function(){xa(t,A),D.cancelled||(wa(t,P),R||(Aa(G)?setTimeout(D,G):ka(t,s,D)))}))),n.data.show&&(e&&e(),O&&O(t,D)),L||R||D()}}}function Ca(n,e){var t=n.elm;o(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var r=pa(n.data.transition);if(i(r)||1!==t.nodeType)return e();if(!o(t._leaveCb)){var a=r.css,s=r.type,l=r.leaveClass,c=r.leaveToClass,p=r.leaveActiveClass,d=r.beforeLeave,h=r.leave,m=r.afterLeave,g=r.leaveCancelled,f=r.delayLeave,b=r.duration,y=!1!==a&&!K,w=Ia(h),x=v(u(b)?b.leave:b);0;var k=t._leaveCb=q((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[n.key]=null),y&&(xa(t,c),xa(t,p)),k.cancelled?(y&&xa(t,l),g&&g(t)):(e(),m&&m(t)),t._leaveCb=null}));f?f(_):_()}function _(){k.cancelled||(!n.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[n.key]=n),d&&d(t),y&&(wa(t,l),wa(t,p),ya((function(){xa(t,l),k.cancelled||(wa(t,c),w||(Aa(x)?setTimeout(k,x):ka(t,s,k)))}))),h&&h(t,k),y||w||k())}}function Aa(n){return"number"==typeof n&&!isNaN(n)}function Ia(n){if(i(n))return!1;var e=n.fns;return o(e)?Ia(Array.isArray(e)?e[0]:e):(n._length||n.length)>1}function Pa(n,e){!0!==e.data.show&&Ea(e)}var za=function(n){var e,t,r={},c=n.modules,u=n.nodeOps;for(e=0;e<Sr.length;++e)for(r[Sr[e]]=[],t=0;t<c.length;++t)o(c[t][Sr[e]])&&r[Sr[e]].push(c[t][Sr[e]]);function p(n){var e=u.parentNode(n);o(e)&&u.removeChild(e,n)}function d(n,e,t,a,i,l,c){if(o(n.elm)&&o(l)&&(n=l[c]=fn(n)),n.isRootInsert=!i,!function(n,e,t,a){var i=n.data;if(o(i)){var l=o(n.componentInstance)&&i.keepAlive;if(o(i=i.hook)&&o(i=i.init)&&i(n,!1),o(n.componentInstance))return h(n,e),m(t,n.elm,a),s(l)&&function(n,e,t,a){var i,s=n;for(;s.componentInstance;)if(s=s.componentInstance._vnode,o(i=s.data)&&o(i=i.transition)){for(i=0;i<r.activate.length;++i)r.activate[i](_r,s);e.push(s);break}m(t,n.elm,a)}(n,e,t,a),!0}}(n,e,t,a)){var p=n.data,d=n.children,f=n.tag;o(f)?(n.elm=n.ns?u.createElementNS(n.ns,f):u.createElement(f,n),y(n),g(n,d,e),o(p)&&v(n,e),m(t,n.elm,a)):s(n.isComment)?(n.elm=u.createComment(n.text),m(t,n.elm,a)):(n.elm=u.createTextNode(n.text),m(t,n.elm,a))}}function h(n,e){o(n.data.pendingInsert)&&(e.push.apply(e,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,f(n)?(v(n,e),y(n)):(xr(n),e.push(n))}function m(n,e,t){o(n)&&(o(t)?u.parentNode(t)===n&&u.insertBefore(n,e,t):u.appendChild(n,e))}function g(n,e,t){if(a(e)){0;for(var r=0;r<e.length;++r)d(e[r],t,n.elm,null,!0,e,r)}else l(n.text)&&u.appendChild(n.elm,u.createTextNode(String(n.text)))}function f(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return o(n.tag)}function v(n,t){for(var a=0;a<r.create.length;++a)r.create[a](_r,n);o(e=n.data.hook)&&(o(e.create)&&e.create(_r,n),o(e.insert)&&t.push(n))}function y(n){var e;if(o(e=n.fnScopeId))u.setStyleScope(n.elm,e);else for(var t=n;t;)o(e=t.context)&&o(e=e.$options._scopeId)&&u.setStyleScope(n.elm,e),t=t.parent;o(e=Xe)&&e!==n.context&&e!==n.fnContext&&o(e=e.$options._scopeId)&&u.setStyleScope(n.elm,e)}function w(n,e,t,r,a,i){for(;r<=a;++r)d(t[r],i,n,e,!1,t,r)}function x(n){var e,t,a=n.data;if(o(a))for(o(e=a.hook)&&o(e=e.destroy)&&e(n),e=0;e<r.destroy.length;++e)r.destroy[e](n);if(o(e=n.children))for(t=0;t<n.children.length;++t)x(n.children[t])}function k(n,e,t){for(;e<=t;++e){var r=n[e];o(r)&&(o(r.tag)?(_(r),x(r)):p(r.elm))}}function _(n,e){if(o(e)||o(n.data)){var t,a=r.remove.length+1;for(o(e)?e.listeners+=a:e=function(n,e){function t(){0==--t.listeners&&p(n)}return t.listeners=e,t}(n.elm,a),o(t=n.componentInstance)&&o(t=t._vnode)&&o(t.data)&&_(t,e),t=0;t<r.remove.length;++t)r.remove[t](n,e);o(t=n.data.hook)&&o(t=t.remove)?t(n,e):e()}else p(n.elm)}function S(n,e,t,r){for(var a=t;a<r;a++){var i=e[a];if(o(i)&&Tr(n,i))return a}}function T(n,e,t,a,l,c){if(n!==e){o(e.elm)&&o(a)&&(e=a[l]=fn(e));var p=e.elm=n.elm;if(s(n.isAsyncPlaceholder))o(e.asyncFactory.resolved)?C(n.elm,e,t):e.isAsyncPlaceholder=!0;else if(s(e.isStatic)&&s(n.isStatic)&&e.key===n.key&&(s(e.isCloned)||s(e.isOnce)))e.componentInstance=n.componentInstance;else{var h,m=e.data;o(m)&&o(h=m.hook)&&o(h=h.prepatch)&&h(n,e);var g=n.children,v=e.children;if(o(m)&&f(e)){for(h=0;h<r.update.length;++h)r.update[h](n,e);o(h=m.hook)&&o(h=h.update)&&h(n,e)}i(e.text)?o(g)&&o(v)?g!==v&&function(n,e,t,r,a){var s,l,c,p=0,h=0,m=e.length-1,g=e[0],f=e[m],v=t.length-1,b=t[0],y=t[v],x=!a;for(0;p<=m&&h<=v;)i(g)?g=e[++p]:i(f)?f=e[--m]:Tr(g,b)?(T(g,b,r,t,h),g=e[++p],b=t[++h]):Tr(f,y)?(T(f,y,r,t,v),f=e[--m],y=t[--v]):Tr(g,y)?(T(g,y,r,t,v),x&&u.insertBefore(n,g.elm,u.nextSibling(f.elm)),g=e[++p],y=t[--v]):Tr(f,b)?(T(f,b,r,t,h),x&&u.insertBefore(n,f.elm,g.elm),f=e[--m],b=t[++h]):(i(s)&&(s=jr(e,p,m)),i(l=o(b.key)?s[b.key]:S(b,e,p,m))?d(b,r,n,g.elm,!1,t,h):Tr(c=e[l],b)?(T(c,b,r,t,h),e[l]=void 0,x&&u.insertBefore(n,c.elm,g.elm)):d(b,r,n,g.elm,!1,t,h),b=t[++h]);p>m?w(n,i(t[v+1])?null:t[v+1].elm,t,h,v,r):h>v&&k(e,p,m)}(p,g,v,t,c):o(v)?(o(n.text)&&u.setTextContent(p,""),w(p,null,v,0,v.length-1,t)):o(g)?k(g,0,g.length-1):o(n.text)&&u.setTextContent(p,""):n.text!==e.text&&u.setTextContent(p,e.text),o(m)&&o(h=m.hook)&&o(h=h.postpatch)&&h(n,e)}}}function j(n,e,t){if(s(t)&&o(n.parent))n.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var E=b("attrs,class,staticClass,staticStyle,key");function C(n,e,t,r){var a,i=e.tag,l=e.data,c=e.children;if(r=r||l&&l.pre,e.elm=n,s(e.isComment)&&o(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(o(l)&&(o(a=l.hook)&&o(a=a.init)&&a(e,!0),o(a=e.componentInstance)))return h(e,t),!0;if(o(i)){if(o(c))if(n.hasChildNodes())if(o(a=l)&&o(a=a.domProps)&&o(a=a.innerHTML)){if(a!==n.innerHTML)return!1}else{for(var u=!0,p=n.firstChild,d=0;d<c.length;d++){if(!p||!C(p,c[d],t,r)){u=!1;break}p=p.nextSibling}if(!u||p)return!1}else g(e,c,t);if(o(l)){var m=!1;for(var f in l)if(!E(f)){m=!0,v(e,t);break}!m&&l.class&&Ne(l.class)}}else n.data!==e.text&&(n.data=e.text);return!0}return function(n,e,t,a){if(!i(e)){var l,c=!1,p=[];if(i(n))c=!0,d(e,p);else{var h=o(n.nodeType);if(!h&&Tr(n,e))T(n,e,p,null,null,a);else{if(h){if(1===n.nodeType&&n.hasAttribute("data-server-rendered")&&(n.removeAttribute("data-server-rendered"),t=!0),s(t)&&C(n,e,p))return j(e,p,!0),n;l=n,n=new hn(u.tagName(l).toLowerCase(),{},[],void 0,l)}var m=n.elm,g=u.parentNode(m);if(d(e,p,m._leaveCb?null:g,u.nextSibling(m)),o(e.parent))for(var v=e.parent,b=f(e);v;){for(var y=0;y<r.destroy.length;++y)r.destroy[y](v);if(v.elm=e.elm,b){for(var w=0;w<r.create.length;++w)r.create[w](_r,v);var _=v.data.hook.insert;if(_.merged)for(var S=1;S<_.fns.length;S++)_.fns[S]()}else xr(v);v=v.parent}o(g)?k([n],0,0):o(n.tag)&&x(n)}}return j(e,p,c),e.elm}o(n)&&x(n)}}({nodeOps:yr,modules:[Lr,Dr,Jr,Xr,sa,U?{create:Pa,activate:Pa,remove:function(n,e){!0!==n.data.show?Ca(n,e):e()}}:{}].concat(Or)});K&&document.addEventListener("selectionchange",(function(){var n=document.activeElement;n&&n.vmodel&&Da(n,"input")}));var Oa={inserted:function(n,e,t,r){"select"===t.tag?(r.elm&&!r.elm._vOptions?Jn(t,"postpatch",(function(){Oa.componentUpdated(n,e,t)})):Ba(n,e,t.context),n._vOptions=[].map.call(n.options,La)):("textarea"===t.tag||br(n.type))&&(n._vModifiers=e.modifiers,e.modifiers.lazy||(n.addEventListener("compositionstart",qa),n.addEventListener("compositionend",Ra),n.addEventListener("change",Ra),K&&(n.vmodel=!0)))},componentUpdated:function(n,e,t){if("select"===t.tag){Ba(n,e,t.context);var r=n._vOptions,a=n._vOptions=[].map.call(n.options,La);if(a.some((function(n,e){return!G(n,r[e])})))(n.multiple?e.value.some((function(n){return Ga(n,a)})):e.value!==e.oldValue&&Ga(e.value,a))&&Da(n,"change")}}};function Ba(n,e,t){Ma(n,e,t),(X||Z)&&setTimeout((function(){Ma(n,e,t)}),0)}function Ma(n,e,t){var r=e.value,a=n.multiple;if(!a||Array.isArray(r)){for(var i,o,s=0,l=n.options.length;s<l;s++)if(o=n.options[s],a)i=L(r,La(o))>-1,o.selected!==i&&(o.selected=i);else if(G(La(o),r))return void(n.selectedIndex!==s&&(n.selectedIndex=s));a||(n.selectedIndex=-1)}}function Ga(n,e){return e.every((function(e){return!G(e,n)}))}function La(n){return"_value"in n?n._value:n.value}function qa(n){n.target.composing=!0}function Ra(n){n.target.composing&&(n.target.composing=!1,Da(n.target,"input"))}function Da(n,e){var t=document.createEvent("HTMLEvents");t.initEvent(e,!0,!0),n.dispatchEvent(t)}function $a(n){return!n.componentInstance||n.data&&n.data.transition?n:$a(n.componentInstance._vnode)}var Na={model:Oa,show:{bind:function(n,e,t){var r=e.value,a=(t=$a(t)).data&&t.data.transition,i=n.__vOriginalDisplay="none"===n.style.display?"":n.style.display;r&&a?(t.data.show=!0,Ea(t,(function(){n.style.display=i}))):n.style.display=r?i:"none"},update:function(n,e,t){var r=e.value;!r!=!e.oldValue&&((t=$a(t)).data&&t.data.transition?(t.data.show=!0,r?Ea(t,(function(){n.style.display=n.__vOriginalDisplay})):Ca(t,(function(){n.style.display="none"}))):n.style.display=r?n.__vOriginalDisplay:"none")},unbind:function(n,e,t,r,a){a||(n.style.display=n.__vOriginalDisplay)}}},Fa={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Ha(n){var e=n&&n.componentOptions;return e&&e.Ctor.options.abstract?Ha(Se(e.children)):n}function Wa(n){var e={},t=n.$options;for(var r in t.propsData)e[r]=n[r];var a=t._parentListeners;for(var r in a)e[T(r)]=a[r];return e}function Va(n,e){if(/\d-keep-alive$/.test(e.tag))return n("keep-alive",{props:e.componentOptions.propsData})}var Ja=function(n){return n.tag||me(n)},Ua=function(n){return"show"===n.name},Qa={name:"transition",props:Fa,abstract:!0,render:function(n){var e=this,t=this.$slots.default;if(t&&(t=t.filter(Ja)).length){0;var r=this.mode;0;var a=t[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return a;var i=Ha(a);if(!i)return a;if(this._leaving)return Va(n,a);var o="__transition-".concat(this._uid,"-");i.key=null==i.key?i.isComment?o+"comment":o+i.tag:l(i.key)?0===String(i.key).indexOf(o)?i.key:o+i.key:i.key;var s=(i.data||(i.data={})).transition=Wa(this),c=this._vnode,u=Ha(c);if(i.data.directives&&i.data.directives.some(Ua)&&(i.data.show=!0),u&&u.data&&!function(n,e){return e.key===n.key&&e.tag===n.tag}(i,u)&&!me(u)&&(!u.componentInstance||!u.componentInstance._vnode.isComment)){var p=u.data.transition=P({},s);if("out-in"===r)return this._leaving=!0,Jn(p,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),Va(n,a);if("in-out"===r){if(me(i))return c;var d,h=function(){d()};Jn(s,"afterEnter",h),Jn(s,"enterCancelled",h),Jn(p,"delayLeave",(function(n){d=n}))}}return a}}},Xa=P({tag:String,moveClass:String},Fa);function Ka(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function Za(n){n.data.newPos=n.elm.getBoundingClientRect()}function Ya(n){var e=n.data.pos,t=n.data.newPos,r=e.left-t.left,a=e.top-t.top;if(r||a){n.data.moved=!0;var i=n.elm.style;i.transform=i.WebkitTransform="translate(".concat(r,"px,").concat(a,"px)"),i.transitionDuration="0s"}}delete Xa.mode;var ni={Transition:Qa,TransitionGroup:{props:Xa,beforeMount:function(){var n=this,e=this._update;this._update=function(t,r){var a=Ke(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,a(),e.call(n,t,r)}},render:function(n){for(var e=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),r=this.prevChildren=this.children,a=this.$slots.default||[],i=this.children=[],o=Wa(this),s=0;s<a.length;s++){if((u=a[s]).tag)if(null!=u.key&&0!==String(u.key).indexOf("__vlist"))i.push(u),t[u.key]=u,(u.data||(u.data={})).transition=o;else;}if(r){var l=[],c=[];for(s=0;s<r.length;s++){var u;(u=r[s]).data.transition=o,u.data.pos=u.elm.getBoundingClientRect(),t[u.key]?l.push(u):c.push(u)}this.kept=n(e,null,l),this.removed=c}return n(e,null,i)},updated:function(){var n=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";n.length&&this.hasMove(n[0].elm,e)&&(n.forEach(Ka),n.forEach(Za),n.forEach(Ya),this._reflow=document.body.offsetHeight,n.forEach((function(n){if(n.data.moved){var t=n.elm,r=t.style;wa(t,e),r.transform=r.WebkitTransform=r.transitionDuration="",t.addEventListener(ga,t._moveCb=function n(r){r&&r.target!==t||r&&!/transform$/.test(r.propertyName)||(t.removeEventListener(ga,n),t._moveCb=null,xa(t,e))})}})))},methods:{hasMove:function(n,e){if(!ha)return!1;if(this._hasMove)return this._hasMove;var t=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach((function(n){ua(t,n)})),ca(t,e),t.style.display="none",this.$el.appendChild(t);var r=Sa(t);return this.$el.removeChild(t),this._hasMove=r.hasTransform}}}};function ei(n,e){for(var t in e)n[t]=e[t];return n}Vt.config.mustUseProp=function(n,e,t){return"value"===t&&er(n)&&"button"!==e||"selected"===t&&"option"===n||"checked"===t&&"input"===n||"muted"===t&&"video"===n},Vt.config.isReservedTag=fr,Vt.config.isReservedAttr=nr,Vt.config.getTagNamespace=function(n){return gr(n)?"svg":"math"===n?"math":void 0},Vt.config.isUnknownElement=function(n){if(!U)return!0;if(fr(n))return!1;if(n=n.toLowerCase(),null!=vr[n])return vr[n];var e=document.createElement(n);return n.indexOf("-")>-1?vr[n]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:vr[n]=/HTMLUnknownElement/.test(e.toString())},P(Vt.options.directives,Na),P(Vt.options.components,ni),Vt.prototype.__patch__=U?za:O,Vt.prototype.$mount=function(n,e){return function(n,e,t){var r;n.$el=e,n.$options.render||(n.$options.render=mn),nt(n,"beforeMount"),r=function(){n._update(n._render(),t)},new We(n,r,O,{before:function(){n._isMounted&&!n._isDestroyed&&nt(n,"beforeUpdate")}},!0),t=!1;var a=n._preWatchers;if(a)for(var i=0;i<a.length;i++)a[i].run();return null==n.$vnode&&(n._isMounted=!0,nt(n,"mounted")),n}(this,n=n&&U?function(n){if("string"==typeof n){var e=document.querySelector(n);return e||document.createElement("div")}return n}(n):void 0,e)},U&&setTimeout((function(){N.devtools&&sn&&sn.emit("init",Vt)}),0);var ti=/[!'()*]/g,ri=function(n){return"%"+n.charCodeAt(0).toString(16)},ai=/%2C/g,ii=function(n){return encodeURIComponent(n).replace(ti,ri).replace(ai,",")};function oi(n){try{return decodeURIComponent(n)}catch(n){0}return n}var si=function(n){return null==n||"object"==typeof n?n:String(n)};function li(n){var e={};return(n=n.trim().replace(/^(\?|#|&)/,""))?(n.split("&").forEach((function(n){var t=n.replace(/\+/g," ").split("="),r=oi(t.shift()),a=t.length>0?oi(t.join("=")):null;void 0===e[r]?e[r]=a:Array.isArray(e[r])?e[r].push(a):e[r]=[e[r],a]})),e):e}function ci(n){var e=n?Object.keys(n).map((function(e){var t=n[e];if(void 0===t)return"";if(null===t)return ii(e);if(Array.isArray(t)){var r=[];return t.forEach((function(n){void 0!==n&&(null===n?r.push(ii(e)):r.push(ii(e)+"="+ii(n)))})),r.join("&")}return ii(e)+"="+ii(t)})).filter((function(n){return n.length>0})).join("&"):null;return e?"?"+e:""}var ui=/\/?$/;function pi(n,e,t,r){var a=r&&r.options.stringifyQuery,i=e.query||{};try{i=di(i)}catch(n){}var o={name:e.name||n&&n.name,meta:n&&n.meta||{},path:e.path||"/",hash:e.hash||"",query:i,params:e.params||{},fullPath:gi(e,a),matched:n?mi(n):[]};return t&&(o.redirectedFrom=gi(t,a)),Object.freeze(o)}function di(n){if(Array.isArray(n))return n.map(di);if(n&&"object"==typeof n){var e={};for(var t in n)e[t]=di(n[t]);return e}return n}var hi=pi(null,{path:"/"});function mi(n){for(var e=[];n;)e.unshift(n),n=n.parent;return e}function gi(n,e){var t=n.path,r=n.query;void 0===r&&(r={});var a=n.hash;return void 0===a&&(a=""),(t||"/")+(e||ci)(r)+a}function fi(n,e,t){return e===hi?n===e:!!e&&(n.path&&e.path?n.path.replace(ui,"")===e.path.replace(ui,"")&&(t||n.hash===e.hash&&vi(n.query,e.query)):!(!n.name||!e.name)&&(n.name===e.name&&(t||n.hash===e.hash&&vi(n.query,e.query)&&vi(n.params,e.params))))}function vi(n,e){if(void 0===n&&(n={}),void 0===e&&(e={}),!n||!e)return n===e;var t=Object.keys(n).sort(),r=Object.keys(e).sort();return t.length===r.length&&t.every((function(t,a){var i=n[t];if(r[a]!==t)return!1;var o=e[t];return null==i||null==o?i===o:"object"==typeof i&&"object"==typeof o?vi(i,o):String(i)===String(o)}))}function bi(n){for(var e=0;e<n.matched.length;e++){var t=n.matched[e];for(var r in t.instances){var a=t.instances[r],i=t.enteredCbs[r];if(a&&i){delete t.enteredCbs[r];for(var o=0;o<i.length;o++)a._isBeingDestroyed||i[o](a)}}}}var yi={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(n,e){var t=e.props,r=e.children,a=e.parent,i=e.data;i.routerView=!0;for(var o=a.$createElement,s=t.name,l=a.$route,c=a._routerViewCache||(a._routerViewCache={}),u=0,p=!1;a&&a._routerRoot!==a;){var d=a.$vnode?a.$vnode.data:{};d.routerView&&u++,d.keepAlive&&a._directInactive&&a._inactive&&(p=!0),a=a.$parent}if(i.routerViewDepth=u,p){var h=c[s],m=h&&h.component;return m?(h.configProps&&wi(m,i,h.route,h.configProps),o(m,i,r)):o()}var g=l.matched[u],f=g&&g.components[s];if(!g||!f)return c[s]=null,o();c[s]={component:f},i.registerRouteInstance=function(n,e){var t=g.instances[s];(e&&t!==n||!e&&t===n)&&(g.instances[s]=e)},(i.hook||(i.hook={})).prepatch=function(n,e){g.instances[s]=e.componentInstance},i.hook.init=function(n){n.data.keepAlive&&n.componentInstance&&n.componentInstance!==g.instances[s]&&(g.instances[s]=n.componentInstance),bi(l)};var v=g.props&&g.props[s];return v&&(ei(c[s],{route:l,configProps:v}),wi(f,i,l,v)),o(f,i,r)}};function wi(n,e,t,r){var a=e.props=function(n,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(n);case"boolean":return e?n.params:void 0;default:0}}(t,r);if(a){a=e.props=ei({},a);var i=e.attrs=e.attrs||{};for(var o in a)n.props&&o in n.props||(i[o]=a[o],delete a[o])}}function xi(n,e,t){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;var a=e.split("/");t&&a[a.length-1]||a.pop();for(var i=n.replace(/^\//,"").split("/"),o=0;o<i.length;o++){var s=i[o];".."===s?a.pop():"."!==s&&a.push(s)}return""!==a[0]&&a.unshift(""),a.join("/")}function ki(n){return n.replace(/\/(?:\s*\/)+/g,"/")}var _i=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)},Si=qi,Ti=Ii,ji=function(n,e){return zi(Ii(n,e),e)},Ei=zi,Ci=Li,Ai=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function Ii(n,e){for(var t,r=[],a=0,i=0,o="",s=e&&e.delimiter||"/";null!=(t=Ai.exec(n));){var l=t[0],c=t[1],u=t.index;if(o+=n.slice(i,u),i=u+l.length,c)o+=c[1];else{var p=n[i],d=t[2],h=t[3],m=t[4],g=t[5],f=t[6],v=t[7];o&&(r.push(o),o="");var b=null!=d&&null!=p&&p!==d,y="+"===f||"*"===f,w="?"===f||"*"===f,x=t[2]||s,k=m||g;r.push({name:h||a++,prefix:d||"",delimiter:x,optional:w,repeat:y,partial:b,asterisk:!!v,pattern:k?Bi(k):v?".*":"[^"+Oi(x)+"]+?"})}}return i<n.length&&(o+=n.substr(i)),o&&r.push(o),r}function Pi(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function zi(n,e){for(var t=new Array(n.length),r=0;r<n.length;r++)"object"==typeof n[r]&&(t[r]=new RegExp("^(?:"+n[r].pattern+")$",Gi(e)));return function(e,r){for(var a="",i=e||{},o=(r||{}).pretty?Pi:encodeURIComponent,s=0;s<n.length;s++){var l=n[s];if("string"!=typeof l){var c,u=i[l.name];if(null==u){if(l.optional){l.partial&&(a+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(_i(u)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(u)+"`");if(0===u.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var p=0;p<u.length;p++){if(c=o(u[p]),!t[s].test(c))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(c)+"`");a+=(0===p?l.prefix:l.delimiter)+c}}else{if(c=l.asterisk?encodeURI(u).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):o(u),!t[s].test(c))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+c+'"');a+=l.prefix+c}}else a+=l}return a}}function Oi(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function Bi(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function Mi(n,e){return n.keys=e,n}function Gi(n){return n&&n.sensitive?"":"i"}function Li(n,e,t){_i(e)||(t=e||t,e=[]);for(var r=(t=t||{}).strict,a=!1!==t.end,i="",o=0;o<n.length;o++){var s=n[o];if("string"==typeof s)i+=Oi(s);else{var l=Oi(s.prefix),c="(?:"+s.pattern+")";e.push(s),s.repeat&&(c+="(?:"+l+c+")*"),i+=c=s.optional?s.partial?l+"("+c+")?":"(?:"+l+"("+c+"))?":l+"("+c+")"}}var u=Oi(t.delimiter||"/"),p=i.slice(-u.length)===u;return r||(i=(p?i.slice(0,-u.length):i)+"(?:"+u+"(?=$))?"),i+=a?"$":r&&p?"":"(?="+u+"|$)",Mi(new RegExp("^"+i,Gi(t)),e)}function qi(n,e,t){return _i(e)||(t=e||t,e=[]),t=t||{},n instanceof RegExp?function(n,e){var t=n.source.match(/\((?!\?)/g);if(t)for(var r=0;r<t.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return Mi(n,e)}(n,e):_i(n)?function(n,e,t){for(var r=[],a=0;a<n.length;a++)r.push(qi(n[a],e,t).source);return Mi(new RegExp("(?:"+r.join("|")+")",Gi(t)),e)}(n,e,t):function(n,e,t){return Li(Ii(n,t),e,t)}(n,e,t)}Si.parse=Ti,Si.compile=ji,Si.tokensToFunction=Ei,Si.tokensToRegExp=Ci;var Ri=Object.create(null);function Di(n,e,t){e=e||{};try{var r=Ri[n]||(Ri[n]=Si.compile(n));return"string"==typeof e.pathMatch&&(e[0]=e.pathMatch),r(e,{pretty:!0})}catch(n){return""}finally{delete e[0]}}function $i(n,e,t,r){var a="string"==typeof n?{path:n}:n;if(a._normalized)return a;if(a.name){var i=(a=ei({},n)).params;return i&&"object"==typeof i&&(a.params=ei({},i)),a}if(!a.path&&a.params&&e){(a=ei({},a))._normalized=!0;var o=ei(ei({},e.params),a.params);if(e.name)a.name=e.name,a.params=o;else if(e.matched.length){var s=e.matched[e.matched.length-1].path;a.path=Di(s,o,e.path)}else 0;return a}var l=function(n){var e="",t="",r=n.indexOf("#");r>=0&&(e=n.slice(r),n=n.slice(0,r));var a=n.indexOf("?");return a>=0&&(t=n.slice(a+1),n=n.slice(0,a)),{path:n,query:t,hash:e}}(a.path||""),c=e&&e.path||"/",u=l.path?xi(l.path,c,t||a.append):c,p=function(n,e,t){void 0===e&&(e={});var r,a=t||li;try{r=a(n||"")}catch(n){r={}}for(var i in e){var o=e[i];r[i]=Array.isArray(o)?o.map(si):si(o)}return r}(l.query,a.query,r&&r.options.parseQuery),d=a.hash||l.hash;return d&&"#"!==d.charAt(0)&&(d="#"+d),{_normalized:!0,path:u,query:p,hash:d}}var Ni,Fi=function(){},Hi={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(n){var e=this,t=this.$router,r=this.$route,a=t.resolve(this.to,r,this.append),i=a.location,o=a.route,s=a.href,l={},c=t.options.linkActiveClass,u=t.options.linkExactActiveClass,p=null==c?"router-link-active":c,d=null==u?"router-link-exact-active":u,h=null==this.activeClass?p:this.activeClass,m=null==this.exactActiveClass?d:this.exactActiveClass,g=o.redirectedFrom?pi(null,$i(o.redirectedFrom),null,t):o;l[m]=fi(r,g,this.exactPath),l[h]=this.exact||this.exactPath?l[m]:function(n,e){return 0===n.path.replace(ui,"/").indexOf(e.path.replace(ui,"/"))&&(!e.hash||n.hash===e.hash)&&function(n,e){for(var t in e)if(!(t in n))return!1;return!0}(n.query,e.query)}(r,g);var f=l[m]?this.ariaCurrentValue:null,v=function(n){Wi(n)&&(e.replace?t.replace(i,Fi):t.push(i,Fi))},b={click:Wi};Array.isArray(this.event)?this.event.forEach((function(n){b[n]=v})):b[this.event]=v;var y={class:l},w=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:s,route:o,navigate:v,isActive:l[h],isExactActive:l[m]});if(w){if(1===w.length)return w[0];if(w.length>1||!w.length)return 0===w.length?n():n("span",{},w)}if("a"===this.tag)y.on=b,y.attrs={href:s,"aria-current":f};else{var x=function n(e){var t;if(e)for(var r=0;r<e.length;r++){if("a"===(t=e[r]).tag)return t;if(t.children&&(t=n(t.children)))return t}}(this.$slots.default);if(x){x.isStatic=!1;var k=x.data=ei({},x.data);for(var _ in k.on=k.on||{},k.on){var S=k.on[_];_ in b&&(k.on[_]=Array.isArray(S)?S:[S])}for(var T in b)T in k.on?k.on[T].push(b[T]):k.on[T]=v;var j=x.data.attrs=ei({},x.data.attrs);j.href=s,j["aria-current"]=f}else y.on=b}return n(this.tag,y,this.$slots.default)}};function Wi(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var e=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return n.preventDefault&&n.preventDefault(),!0}}var Vi="undefined"!=typeof window;function Ji(n,e,t,r,a){var i=e||[],o=t||Object.create(null),s=r||Object.create(null);n.forEach((function(n){!function n(e,t,r,a,i,o){var s=a.path,l=a.name;0;var c=a.pathToRegexpOptions||{},u=function(n,e,t){t||(n=n.replace(/\/$/,""));if("/"===n[0])return n;if(null==e)return n;return ki(e.path+"/"+n)}(s,i,c.strict);"boolean"==typeof a.caseSensitive&&(c.sensitive=a.caseSensitive);var p={path:u,regex:Ui(u,c),components:a.components||{default:a.component},alias:a.alias?"string"==typeof a.alias?[a.alias]:a.alias:[],instances:{},enteredCbs:{},name:l,parent:i,matchAs:o,redirect:a.redirect,beforeEnter:a.beforeEnter,meta:a.meta||{},props:null==a.props?{}:a.components?a.props:{default:a.props}};a.children&&a.children.forEach((function(a){var i=o?ki(o+"/"+a.path):void 0;n(e,t,r,a,p,i)}));t[p.path]||(e.push(p.path),t[p.path]=p);if(void 0!==a.alias)for(var d=Array.isArray(a.alias)?a.alias:[a.alias],h=0;h<d.length;++h){0;var m={path:d[h],children:a.children};n(e,t,r,m,i,p.path||"/")}l&&(r[l]||(r[l]=p))}(i,o,s,n,a)}));for(var l=0,c=i.length;l<c;l++)"*"===i[l]&&(i.push(i.splice(l,1)[0]),c--,l--);return{pathList:i,pathMap:o,nameMap:s}}function Ui(n,e){return Si(n,[],e)}function Qi(n,e){var t=Ji(n),r=t.pathList,a=t.pathMap,i=t.nameMap;function o(n,t,o){var s=$i(n,t,!1,e),c=s.name;if(c){var u=i[c];if(!u)return l(null,s);var p=u.regex.keys.filter((function(n){return!n.optional})).map((function(n){return n.name}));if("object"!=typeof s.params&&(s.params={}),t&&"object"==typeof t.params)for(var d in t.params)!(d in s.params)&&p.indexOf(d)>-1&&(s.params[d]=t.params[d]);return s.path=Di(u.path,s.params),l(u,s,o)}if(s.path){s.params={};for(var h=0;h<r.length;h++){var m=r[h],g=a[m];if(Xi(g.regex,s.path,s.params))return l(g,s,o)}}return l(null,s)}function s(n,t){var r=n.redirect,a="function"==typeof r?r(pi(n,t,null,e)):r;if("string"==typeof a&&(a={path:a}),!a||"object"!=typeof a)return l(null,t);var s=a,c=s.name,u=s.path,p=t.query,d=t.hash,h=t.params;if(p=s.hasOwnProperty("query")?s.query:p,d=s.hasOwnProperty("hash")?s.hash:d,h=s.hasOwnProperty("params")?s.params:h,c){i[c];return o({_normalized:!0,name:c,query:p,hash:d,params:h},void 0,t)}if(u){var m=function(n,e){return xi(n,e.parent?e.parent.path:"/",!0)}(u,n);return o({_normalized:!0,path:Di(m,h),query:p,hash:d},void 0,t)}return l(null,t)}function l(n,t,r){return n&&n.redirect?s(n,r||t):n&&n.matchAs?function(n,e,t){var r=o({_normalized:!0,path:Di(t,e.params)});if(r){var a=r.matched,i=a[a.length-1];return e.params=r.params,l(i,e)}return l(null,e)}(0,t,n.matchAs):pi(n,t,r,e)}return{match:o,addRoute:function(n,e){var t="object"!=typeof n?i[n]:void 0;Ji([e||n],r,a,i,t),t&&t.alias.length&&Ji(t.alias.map((function(n){return{path:n,children:[e]}})),r,a,i,t)},getRoutes:function(){return r.map((function(n){return a[n]}))},addRoutes:function(n){Ji(n,r,a,i)}}}function Xi(n,e,t){var r=e.match(n);if(!r)return!1;if(!t)return!0;for(var a=1,i=r.length;a<i;++a){var o=n.keys[a-1];o&&(t[o.name||"pathMatch"]="string"==typeof r[a]?oi(r[a]):r[a])}return!0}var Ki=Vi&&window.performance&&window.performance.now?window.performance:Date;function Zi(){return Ki.now().toFixed(3)}var Yi=Zi();function no(){return Yi}function eo(n){return Yi=n}var to=Object.create(null);function ro(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var n=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(n,""),t=ei({},window.history.state);return t.key=no(),window.history.replaceState(t,"",e),window.addEventListener("popstate",oo),function(){window.removeEventListener("popstate",oo)}}function ao(n,e,t,r){if(n.app){var a=n.options.scrollBehavior;a&&n.app.$nextTick((function(){var i=function(){var n=no();if(n)return to[n]}(),o=a.call(n,e,t,r?i:null);o&&("function"==typeof o.then?o.then((function(n){po(n,i)})).catch((function(n){0})):po(o,i))}))}}function io(){var n=no();n&&(to[n]={x:window.pageXOffset,y:window.pageYOffset})}function oo(n){io(),n.state&&n.state.key&&eo(n.state.key)}function so(n){return co(n.x)||co(n.y)}function lo(n){return{x:co(n.x)?n.x:window.pageXOffset,y:co(n.y)?n.y:window.pageYOffset}}function co(n){return"number"==typeof n}var uo=/^#\d/;function po(n,e){var t,r="object"==typeof n;if(r&&"string"==typeof n.selector){var a=uo.test(n.selector)?document.getElementById(n.selector.slice(1)):document.querySelector(n.selector);if(a){var i=n.offset&&"object"==typeof n.offset?n.offset:{};e=function(n,e){var t=document.documentElement.getBoundingClientRect(),r=n.getBoundingClientRect();return{x:r.left-t.left-e.x,y:r.top-t.top-e.y}}(a,i={x:co((t=i).x)?t.x:0,y:co(t.y)?t.y:0})}else so(n)&&(e=lo(n))}else r&&so(n)&&(e=lo(n));e&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:e.x,top:e.y,behavior:n.behavior}):window.scrollTo(e.x,e.y))}var ho,mo=Vi&&((-1===(ho=window.navigator.userAgent).indexOf("Android 2.")&&-1===ho.indexOf("Android 4.0")||-1===ho.indexOf("Mobile Safari")||-1!==ho.indexOf("Chrome")||-1!==ho.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function go(n,e){io();var t=window.history;try{if(e){var r=ei({},t.state);r.key=no(),t.replaceState(r,"",n)}else t.pushState({key:eo(Zi())},"",n)}catch(t){window.location[e?"replace":"assign"](n)}}function fo(n){go(n,!0)}var vo={redirected:2,aborted:4,cancelled:8,duplicated:16};function bo(n,e){return wo(n,e,vo.redirected,'Redirected when going from "'+n.fullPath+'" to "'+function(n){if("string"==typeof n)return n;if("path"in n)return n.path;var e={};return xo.forEach((function(t){t in n&&(e[t]=n[t])})),JSON.stringify(e,null,2)}(e)+'" via a navigation guard.')}function yo(n,e){return wo(n,e,vo.cancelled,'Navigation cancelled from "'+n.fullPath+'" to "'+e.fullPath+'" with a new navigation.')}function wo(n,e,t,r){var a=new Error(r);return a._isRouter=!0,a.from=n,a.to=e,a.type=t,a}var xo=["params","query","hash"];function ko(n){return Object.prototype.toString.call(n).indexOf("Error")>-1}function _o(n,e){return ko(n)&&n._isRouter&&(null==e||n.type===e)}function So(n,e,t){var r=function(a){a>=n.length?t():n[a]?e(n[a],(function(){r(a+1)})):r(a+1)};r(0)}function To(n){return function(e,t,r){var a=!1,i=0,o=null;jo(n,(function(n,e,t,s){if("function"==typeof n&&void 0===n.cid){a=!0,i++;var l,c=Ao((function(e){var a;((a=e).__esModule||Co&&"Module"===a[Symbol.toStringTag])&&(e=e.default),n.resolved="function"==typeof e?e:Ni.extend(e),t.components[s]=e,--i<=0&&r()})),u=Ao((function(n){var e="Failed to resolve async component "+s+": "+n;o||(o=ko(n)?n:new Error(e),r(o))}));try{l=n(c,u)}catch(n){u(n)}if(l)if("function"==typeof l.then)l.then(c,u);else{var p=l.component;p&&"function"==typeof p.then&&p.then(c,u)}}})),a||r()}}function jo(n,e){return Eo(n.map((function(n){return Object.keys(n.components).map((function(t){return e(n.components[t],n.instances[t],n,t)}))})))}function Eo(n){return Array.prototype.concat.apply([],n)}var Co="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function Ao(n){var e=!1;return function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];if(!e)return e=!0,n.apply(this,t)}}var Io=function(n,e){this.router=n,this.base=function(n){if(!n)if(Vi){var e=document.querySelector("base");n=(n=e&&e.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else n="/";"/"!==n.charAt(0)&&(n="/"+n);return n.replace(/\/$/,"")}(e),this.current=hi,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function Po(n,e,t,r){var a=jo(n,(function(n,r,a,i){var o=function(n,e){"function"!=typeof n&&(n=Ni.extend(n));return n.options[e]}(n,e);if(o)return Array.isArray(o)?o.map((function(n){return t(n,r,a,i)})):t(o,r,a,i)}));return Eo(r?a.reverse():a)}function zo(n,e){if(e)return function(){return n.apply(e,arguments)}}Io.prototype.listen=function(n){this.cb=n},Io.prototype.onReady=function(n,e){this.ready?n():(this.readyCbs.push(n),e&&this.readyErrorCbs.push(e))},Io.prototype.onError=function(n){this.errorCbs.push(n)},Io.prototype.transitionTo=function(n,e,t){var r,a=this;try{r=this.router.match(n,this.current)}catch(n){throw this.errorCbs.forEach((function(e){e(n)})),n}var i=this.current;this.confirmTransition(r,(function(){a.updateRoute(r),e&&e(r),a.ensureURL(),a.router.afterHooks.forEach((function(n){n&&n(r,i)})),a.ready||(a.ready=!0,a.readyCbs.forEach((function(n){n(r)})))}),(function(n){t&&t(n),n&&!a.ready&&(_o(n,vo.redirected)&&i===hi||(a.ready=!0,a.readyErrorCbs.forEach((function(e){e(n)}))))}))},Io.prototype.confirmTransition=function(n,e,t){var r=this,a=this.current;this.pending=n;var i,o,s=function(n){!_o(n)&&ko(n)&&(r.errorCbs.length?r.errorCbs.forEach((function(e){e(n)})):console.error(n)),t&&t(n)},l=n.matched.length-1,c=a.matched.length-1;if(fi(n,a)&&l===c&&n.matched[l]===a.matched[c])return this.ensureURL(),n.hash&&ao(this.router,a,n,!1),s(((o=wo(i=a,n,vo.duplicated,'Avoided redundant navigation to current location: "'+i.fullPath+'".')).name="NavigationDuplicated",o));var u=function(n,e){var t,r=Math.max(n.length,e.length);for(t=0;t<r&&n[t]===e[t];t++);return{updated:e.slice(0,t),activated:e.slice(t),deactivated:n.slice(t)}}(this.current.matched,n.matched),p=u.updated,d=u.deactivated,h=u.activated,m=[].concat(function(n){return Po(n,"beforeRouteLeave",zo,!0)}(d),this.router.beforeHooks,function(n){return Po(n,"beforeRouteUpdate",zo)}(p),h.map((function(n){return n.beforeEnter})),To(h)),g=function(e,t){if(r.pending!==n)return s(yo(a,n));try{e(n,a,(function(e){!1===e?(r.ensureURL(!0),s(function(n,e){return wo(n,e,vo.aborted,'Navigation aborted from "'+n.fullPath+'" to "'+e.fullPath+'" via a navigation guard.')}(a,n))):ko(e)?(r.ensureURL(!0),s(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(s(bo(a,n)),"object"==typeof e&&e.replace?r.replace(e):r.push(e)):t(e)}))}catch(n){s(n)}};So(m,g,(function(){So(function(n){return Po(n,"beforeRouteEnter",(function(n,e,t,r){return function(n,e,t){return function(r,a,i){return n(r,a,(function(n){"function"==typeof n&&(e.enteredCbs[t]||(e.enteredCbs[t]=[]),e.enteredCbs[t].push(n)),i(n)}))}}(n,t,r)}))}(h).concat(r.router.resolveHooks),g,(function(){if(r.pending!==n)return s(yo(a,n));r.pending=null,e(n),r.router.app&&r.router.app.$nextTick((function(){bi(n)}))}))}))},Io.prototype.updateRoute=function(n){this.current=n,this.cb&&this.cb(n)},Io.prototype.setupListeners=function(){},Io.prototype.teardown=function(){this.listeners.forEach((function(n){n()})),this.listeners=[],this.current=hi,this.pending=null};var Oo=function(n){function e(e,t){n.call(this,e,t),this._startLocation=Bo(this.base)}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router,t=e.options.scrollBehavior,r=mo&&t;r&&this.listeners.push(ro());var a=function(){var t=n.current,a=Bo(n.base);n.current===hi&&a===n._startLocation||n.transitionTo(a,(function(n){r&&ao(e,n,t,!0)}))};window.addEventListener("popstate",a),this.listeners.push((function(){window.removeEventListener("popstate",a)}))}},e.prototype.go=function(n){window.history.go(n)},e.prototype.push=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){go(ki(r.base+n.fullPath)),ao(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){fo(ki(r.base+n.fullPath)),ao(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.ensureURL=function(n){if(Bo(this.base)!==this.current.fullPath){var e=ki(this.base+this.current.fullPath);n?go(e):fo(e)}},e.prototype.getCurrentLocation=function(){return Bo(this.base)},e}(Io);function Bo(n){var e=window.location.pathname,t=e.toLowerCase(),r=n.toLowerCase();return!n||t!==r&&0!==t.indexOf(ki(r+"/"))||(e=e.slice(n.length)),(e||"/")+window.location.search+window.location.hash}var Mo=function(n){function e(e,t,r){n.call(this,e,t),r&&function(n){var e=Bo(n);if(!/^\/#/.test(e))return window.location.replace(ki(n+"/#"+e)),!0}(this.base)||Go()}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router.options.scrollBehavior,t=mo&&e;t&&this.listeners.push(ro());var r=function(){var e=n.current;Go()&&n.transitionTo(Lo(),(function(r){t&&ao(n.router,r,e,!0),mo||Do(r.fullPath)}))},a=mo?"popstate":"hashchange";window.addEventListener(a,r),this.listeners.push((function(){window.removeEventListener(a,r)}))}},e.prototype.push=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){Ro(n.fullPath),ao(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){Do(n.fullPath),ao(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.go=function(n){window.history.go(n)},e.prototype.ensureURL=function(n){var e=this.current.fullPath;Lo()!==e&&(n?Ro(e):Do(e))},e.prototype.getCurrentLocation=function(){return Lo()},e}(Io);function Go(){var n=Lo();return"/"===n.charAt(0)||(Do("/"+n),!1)}function Lo(){var n=window.location.href,e=n.indexOf("#");return e<0?"":n=n.slice(e+1)}function qo(n){var e=window.location.href,t=e.indexOf("#");return(t>=0?e.slice(0,t):e)+"#"+n}function Ro(n){mo?go(qo(n)):window.location.hash=n}function Do(n){mo?fo(qo(n)):window.location.replace(qo(n))}var $o=function(n){function e(e,t){n.call(this,e,t),this.stack=[],this.index=-1}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.push=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index+1).concat(n),r.index++,e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index).concat(n),e&&e(n)}),t)},e.prototype.go=function(n){var e=this,t=this.index+n;if(!(t<0||t>=this.stack.length)){var r=this.stack[t];this.confirmTransition(r,(function(){var n=e.current;e.index=t,e.updateRoute(r),e.router.afterHooks.forEach((function(e){e&&e(r,n)}))}),(function(n){_o(n,vo.duplicated)&&(e.index=t)}))}},e.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:"/"},e.prototype.ensureURL=function(){},e}(Io),No=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Qi(n.routes||[],this);var e=n.mode||"hash";switch(this.fallback="history"===e&&!mo&&!1!==n.fallback,this.fallback&&(e="hash"),Vi||(e="abstract"),this.mode=e,e){case"history":this.history=new Oo(this,n.base);break;case"hash":this.history=new Mo(this,n.base,this.fallback);break;case"abstract":this.history=new $o(this,n.base);break;default:0}},Fo={currentRoute:{configurable:!0}};No.prototype.match=function(n,e,t){return this.matcher.match(n,e,t)},Fo.currentRoute.get=function(){return this.history&&this.history.current},No.prototype.init=function(n){var e=this;if(this.apps.push(n),n.$once("hook:destroyed",(function(){var t=e.apps.indexOf(n);t>-1&&e.apps.splice(t,1),e.app===n&&(e.app=e.apps[0]||null),e.app||e.history.teardown()})),!this.app){this.app=n;var t=this.history;if(t instanceof Oo||t instanceof Mo){var r=function(n){t.setupListeners(),function(n){var r=t.current,a=e.options.scrollBehavior;mo&&a&&"fullPath"in n&&ao(e,n,r,!1)}(n)};t.transitionTo(t.getCurrentLocation(),r,r)}t.listen((function(n){e.apps.forEach((function(e){e._route=n}))}))}},No.prototype.beforeEach=function(n){return Wo(this.beforeHooks,n)},No.prototype.beforeResolve=function(n){return Wo(this.resolveHooks,n)},No.prototype.afterEach=function(n){return Wo(this.afterHooks,n)},No.prototype.onReady=function(n,e){this.history.onReady(n,e)},No.prototype.onError=function(n){this.history.onError(n)},No.prototype.push=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.push(n,e,t)}));this.history.push(n,e,t)},No.prototype.replace=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.replace(n,e,t)}));this.history.replace(n,e,t)},No.prototype.go=function(n){this.history.go(n)},No.prototype.back=function(){this.go(-1)},No.prototype.forward=function(){this.go(1)},No.prototype.getMatchedComponents=function(n){var e=n?n.matched?n:this.resolve(n).route:this.currentRoute;return e?[].concat.apply([],e.matched.map((function(n){return Object.keys(n.components).map((function(e){return n.components[e]}))}))):[]},No.prototype.resolve=function(n,e,t){var r=$i(n,e=e||this.history.current,t,this),a=this.match(r,e),i=a.redirectedFrom||a.fullPath;return{location:r,route:a,href:function(n,e,t){var r="hash"===t?"#"+e:e;return n?ki(n+"/"+r):r}(this.history.base,i,this.mode),normalizedTo:r,resolved:a}},No.prototype.getRoutes=function(){return this.matcher.getRoutes()},No.prototype.addRoute=function(n,e){this.matcher.addRoute(n,e),this.history.current!==hi&&this.history.transitionTo(this.history.getCurrentLocation())},No.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==hi&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(No.prototype,Fo);var Ho=No;function Wo(n,e){return n.push(e),function(){var t=n.indexOf(e);t>-1&&n.splice(t,1)}}No.install=function n(e){if(!n.installed||Ni!==e){n.installed=!0,Ni=e;var t=function(n){return void 0!==n},r=function(n,e){var r=n.$options._parentVnode;t(r)&&t(r=r.data)&&t(r=r.registerRouteInstance)&&r(n,e)};e.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,r(this,this)},destroyed:function(){r(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("RouterView",yi),e.component("RouterLink",Hi);var a=e.config.optionMergeStrategies;a.beforeRouteEnter=a.beforeRouteLeave=a.beforeRouteUpdate=a.created}},No.version="3.6.5",No.isNavigationFailure=_o,No.NavigationFailureType=vo,No.START_LOCATION=hi,Vi&&window.Vue&&window.Vue.use(No);t(103);t(16),t(130);var Vo={NotFound:()=>Promise.all([t.e(0),t.e(5)]).then(t.bind(null,332)),Layout:()=>Promise.all([t.e(0),t.e(3),t.e(2)]).then(t.bind(null,331))},Jo={"v-79de9bb8":()=>t.e(8).then(t.bind(null,333)),"v-6fa1b7c2":()=>t.e(7).then(t.bind(null,334)),"v-0741303c":()=>t.e(9).then(t.bind(null,335)),"v-1b7ac458":()=>t.e(10).then(t.bind(null,336)),"v-e759cae6":()=>t.e(6).then(t.bind(null,337)),"v-2a5b0312":()=>t.e(12).then(t.bind(null,338)),"v-32ff3e21":()=>t.e(14).then(t.bind(null,339)),"v-5ca9ee02":()=>t.e(15).then(t.bind(null,340)),"v-1098946a":()=>t.e(13).then(t.bind(null,341)),"v-1537d5df":()=>t.e(11).then(t.bind(null,342)),"v-72160dbf":()=>t.e(17).then(t.bind(null,343)),"v-3352041f":()=>t.e(16).then(t.bind(null,344)),"v-427adef7":()=>t.e(20).then(t.bind(null,345)),"v-328d6153":()=>t.e(18).then(t.bind(null,346)),"v-148f6fd2":()=>t.e(21).then(t.bind(null,347)),"v-43d05cd8":()=>t.e(22).then(t.bind(null,348)),"v-076a0add":()=>t.e(19).then(t.bind(null,349)),"v-19eef250":()=>t.e(23).then(t.bind(null,350)),"v-a34e4bf2":()=>t.e(25).then(t.bind(null,351)),"v-643850aa":()=>t.e(24).then(t.bind(null,352)),"v-0597a28a":()=>t.e(27).then(t.bind(null,353)),"v-72817f84":()=>t.e(26).then(t.bind(null,354)),"v-5c4a9caa":()=>t.e(28).then(t.bind(null,355)),"v-01b176ac":()=>t.e(30).then(t.bind(null,356)),"v-a48e1eac":()=>t.e(29).then(t.bind(null,357)),"v-db47cc2c":()=>t.e(32).then(t.bind(null,358)),"v-0e2d80f1":()=>t.e(33).then(t.bind(null,359)),"v-1ac9fe62":()=>t.e(31).then(t.bind(null,360)),"v-209d7f1d":()=>t.e(34).then(t.bind(null,361))};function Uo(n){const e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}const Qo=/-(\w)/g,Xo=Uo(n=>n.replace(Qo,(n,e)=>e?e.toUpperCase():"")),Ko=/\B([A-Z])/g,Zo=Uo(n=>n.replace(Ko,"-$1").toLowerCase()),Yo=Uo(n=>n.charAt(0).toUpperCase()+n.slice(1));function ns(n,e){if(!e)return;if(n(e))return n(e);return e.includes("-")?n(Yo(Xo(e))):n(Yo(e))||n(Zo(e))}const es=Object.assign({},Vo,Jo),ts=n=>es[n],rs=n=>Jo[n],as=n=>Vo[n],is=n=>Vt.component(n);function os(n){return ns(rs,n)}function ss(n){return ns(as,n)}function ls(n){return ns(ts,n)}function cs(n){return ns(is,n)}function us(...n){return Promise.all(n.filter(n=>n).map(async n=>{if(!cs(n)&&ls(n)){const e=await ls(n)();Vt.component(n,e.default)}}))}function ps(n,e){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=e)}var ds=t(92),hs=t.n(ds),ms=t(93),gs=t.n(ms),fs={created(){if(this.siteMeta=this.$site.headTags.filter(([n])=>"meta"===n).map(([n,e])=>e),this.$ssrContext){const e=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(n=e)?n.map(n=>{let e="<meta";return Object.keys(n).forEach(t=>{e+=` ${t}="${gs()(n[t])}"`}),e+">"}).join("\n    "):"",this.$ssrContext.canonicalLink=bs(this.$canonicalUrl)}var n},mounted(){this.currentMetaTags=[...document.querySelectorAll("meta")],this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta(){document.title=this.$title,document.documentElement.lang=this.$lang;const n=this.getMergedMetaTags();this.currentMetaTags=ys(n,this.currentMetaTags)},getMergedMetaTags(){const n=this.$page.frontmatter.meta||[];return hs()([{name:"description",content:this.$description}],n,this.siteMeta,ws)},updateCanonicalLink(){vs(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",bs(this.$canonicalUrl))}},watch:{$page(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy(){ys(null,this.currentMetaTags),vs()}};function vs(){const n=document.querySelector("link[rel='canonical']");n&&n.remove()}function bs(n=""){return n?`<link href="${n}" rel="canonical" />`:""}function ys(n,e){if(e&&[...e].filter(n=>n.parentNode===document.head).forEach(n=>document.head.removeChild(n)),n)return n.map(n=>{const e=document.createElement("meta");return Object.keys(n).forEach(t=>{e.setAttribute(t,n[t])}),document.head.appendChild(e),e})}function ws(n){for(const e of["name","property","itemprop"])if(n.hasOwnProperty(e))return n[e]+e;return JSON.stringify(n)}var xs=t(50),ks={mounted(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:t.n(xs)()((function(){this.setActiveHash()}),300),setActiveHash(){const n=[].slice.call(document.querySelectorAll(".sidebar-link")),e=[].slice.call(document.querySelectorAll(".header-anchor")).filter(e=>n.some(n=>n.hash===e.hash)),t=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),r=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),a=window.innerHeight+t;for(let n=0;n<e.length;n++){const i=e[n],o=e[n+1],s=0===n&&0===t||t>=i.parentElement.offsetTop+10&&(!o||t<o.parentElement.offsetTop-10),l=decodeURIComponent(this.$route.hash);if(s&&l!==decodeURIComponent(i.hash)){const t=i;if(a===r)for(let t=n+1;t<e.length;t++)if(l===decodeURIComponent(e[t].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(t.hash),()=>{this.$nextTick(()=>{this.$vuepress.$set("disableScrollBehavior",!1)})})}}}},beforeDestroy(){window.removeEventListener("scroll",this.onScroll)}},_s=t(24),Ss=t.n(_s),Ts={mounted(){Ss.a.configure({showSpinner:!1}),this.$router.beforeEach((n,e,t)=>{n.path===e.path||Vt.component(n.name)||Ss.a.start(),t()}),this.$router.afterEach(()=>{Ss.a.done(),this.isSidebarOpen=!1})}};t(239),t(240);class js{constructor(){this.containerEl=document.getElementById("message-container"),this.containerEl||(this.containerEl=document.createElement("div"),this.containerEl.id="message-container",document.body.appendChild(this.containerEl))}show({text:n="",duration:e=3e3}){let t=document.createElement("div");t.className="message move-in",t.innerHTML=`\n      <i style="fill: #06a35a;font-size: 14px;display:inline-flex;align-items: center;">\n        <svg style="fill: #06a35a;font-size: 14px;" t="1572421810237" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2323" width="16" height="16"><path d="M822.811993 824.617989c-83.075838 81.99224-188.546032 124.613757-316.049383 127.86455-122.085362-3.250794-223.943563-45.87231-305.935802-127.86455s-124.613757-184.21164-127.86455-305.935802c3.250794-127.503351 45.87231-232.973545 127.86455-316.049383 81.99224-83.075838 184.21164-126.058554 305.935802-129.309347 127.503351 3.250794 232.973545 46.23351 316.049383 129.309347 83.075838 83.075838 126.058554 188.546032 129.309347 316.049383C949.231746 640.406349 905.887831 742.62575 822.811993 824.617989zM432.716755 684.111464c3.973192 3.973192 8.307584 5.779189 13.364374 6.140388 5.05679 0.361199 9.752381-1.444797 13.364374-5.417989l292.571429-287.514638c3.973192-3.973192 5.779189-8.307584 5.779189-13.364374 0-5.05679-1.805996-9.752381-5.779189-13.364374l1.805996 1.805996c-3.973192-3.973192-8.668783-5.779189-14.086772-6.140388-5.417989-0.361199-10.47478 1.444797-14.809171 5.417989l-264.397884 220.33157c-3.973192 3.250794-8.668783 4.695591-14.447972 4.695591-5.779189 0-10.835979-1.444797-15.53157-3.973192l-94.273016-72.962257c-4.334392-3.250794-9.391182-4.334392-14.447972-3.973192s-9.391182 3.250794-12.641975 7.585185l-2.889594 3.973192c-3.250794 4.334392-4.334392 9.391182-3.973192 14.809171 0.722399 5.417989 2.528395 10.11358 5.779189 14.086772L432.716755 684.111464z" p-id="2324"></path></svg>\n      </i>\n      <div class="text">${n}</div>\n    `,this.containerEl.appendChild(t),e>0&&setTimeout(()=>{this.close(t)},e)}close(n){n.className=n.className.replace("move-in",""),n.className+="move-out",n.addEventListener("animationend",()=>{n.remove()})}}var Es={mounted(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},updated(){!!/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||this.updateCopy()},methods:{updateCopy(){setTimeout(()=>{(['div[class*="language-"] pre','div[class*="aside-code"] aside']instanceof Array||Array.isArray(['div[class*="language-"] pre','div[class*="aside-code"] aside']))&&['div[class*="language-"] pre','div[class*="aside-code"] aside'].forEach(n=>{document.querySelectorAll(n).forEach(this.generateCopyButton)})},1e3)},generateCopyButton(n){if(n.classList.contains("codecopy-enabled"))return;const e=document.createElement("i");e.className="code-copy",e.innerHTML='<svg  style="color:#aaa;font-size:14px" t="1572422231464" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3201" width="14" height="14"><path d="M866.461538 39.384615H354.461538c-43.323077 0-78.769231 35.446154-78.76923 78.769231v39.384616h472.615384c43.323077 0 78.769231 35.446154 78.769231 78.76923v551.384616h39.384615c43.323077 0 78.769231-35.446154 78.769231-78.769231V118.153846c0-43.323077-35.446154-78.769231-78.769231-78.769231z m-118.153846 275.692308c0-43.323077-35.446154-78.769231-78.76923-78.769231H157.538462c-43.323077 0-78.769231 35.446154-78.769231 78.769231v590.769231c0 43.323077 35.446154 78.769231 78.769231 78.769231h512c43.323077 0 78.769231-35.446154 78.76923-78.769231V315.076923z m-354.461538 137.846154c0 11.815385-7.876923 19.692308-19.692308 19.692308h-157.538461c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h157.538461c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z m157.538461 315.076923c0 11.815385-7.876923 19.692308-19.692307 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h315.076923c11.815385 0 19.692308 7.876923 19.692307 19.692308v39.384615z m78.769231-157.538462c0 11.815385-7.876923 19.692308-19.692308 19.692308H216.615385c-11.815385 0-19.692308-7.876923-19.692308-19.692308v-39.384615c0-11.815385 7.876923-19.692308 19.692308-19.692308h393.846153c11.815385 0 19.692308 7.876923 19.692308 19.692308v39.384615z" p-id="3202"></path></svg>',e.title="Copy to clipboard",e.addEventListener("click",()=>{this.copyToClipboard(n.innerText)}),n.appendChild(e),n.classList.add("codecopy-enabled")},copyToClipboard(n){const e=document.createElement("textarea");e.value=n,e.setAttribute("readonly",""),e.style.position="absolute",e.style.left="-9999px",document.body.appendChild(e);const t=document.getSelection().rangeCount>0&&document.getSelection().getRangeAt(0);e.select(),document.execCommand("copy");(new js).show({text:"复制成功",duration:1e3}),document.body.removeChild(e),t&&(document.getSelection().removeAllRanges(),document.getSelection().addRange(t))}}};!function(n,e){void 0===e&&(e={});var t=e.insertAt;if(n&&"undefined"!=typeof document){var r=document.head||document.getElementsByTagName("head")[0],a=document.createElement("style");a.type="text/css","top"===t&&r.firstChild?r.insertBefore(a,r.firstChild):r.appendChild(a),a.styleSheet?a.styleSheet.cssText=n:a.appendChild(document.createTextNode(n))}}("@media (max-width: 1000px) {\n  .vuepress-plugin-demo-block__h_code {\n    display: none;\n  }\n  .vuepress-plugin-demo-block__app {\n    margin-left: auto !important;\n    margin-right: auto !important;\n  }\n}\n.vuepress-plugin-demo-block__wrapper {\n  margin-top: 10px;\n  border: 1px solid #ebebeb;\n  border-radius: 4px;\n  transition: all 0.2s;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display {\n  height: 400px;\n  display: flex;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__app {\n  width: 300px;\n  border: 1px solid #ebebeb;\n  box-shadow: 1px 1px 3px #ebebeb;\n  margin-right: 5px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code {\n  flex: 1;\n  overflow: auto;\n  height: 100%;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code > pre {\n  overflow: visible;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  max-height: 400px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper div {\n  box-sizing: border-box;\n}\n.vuepress-plugin-demo-block__wrapper:hover {\n  box-shadow: 0 0 11px rgba(33, 33, 33, 0.2);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code {\n  overflow: hidden;\n  height: 0;\n  padding: 0 !important;\n  background-color: #282c34;\n  border-radius: 0 !important;\n  transition: height 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code pre {\n  margin: 0 !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  padding: 20px;\n  border-bottom: 1px solid #ebebeb;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer {\n  position: relative;\n  text-align: center;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__codepen {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__expand::before {\n  border-top: none;\n  border-right: 6px solid transparent;\n  border-bottom: 6px solid #ccc;\n  border-left: 6px solid transparent;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__codepen,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand span,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand::before {\n  border-top-color: #3eaf7c !important;\n  border-bottom-color: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover svg {\n  fill: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand-text {\n  transition: all 0.5s;\n  opacity: 0;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:nth-last-child(2) {\n  right: 50px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:last-child {\n  right: 10px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button {\n  border-color: transparent;\n  background-color: transparent;\n  font-size: 14px;\n  color: #3eaf7c;\n  cursor: pointer;\n  outline: none;\n  margin: 0;\n  width: 46px;\n  position: relative;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::before {\n  content: attr(data-tip);\n  white-space: nowrap;\n  position: absolute;\n  top: -30px;\n  left: 50%;\n  color: #eee;\n  line-height: 1;\n  z-index: 1000;\n  border-radius: 4px;\n  padding: 6px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  background-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::after {\n  content: '' !important;\n  display: block;\n  position: absolute;\n  left: 50%;\n  top: -5px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  border: 5px solid transparent;\n  border-top-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button svg {\n  width: 34px;\n  height: 20px;\n  fill: #ccc;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__codepen {\n  position: absolute;\n  top: 10px;\n  transition: all 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand {\n  position: relative;\n  width: 100px;\n  height: 40px;\n  margin: 0;\n  color: #3eaf7c;\n  font-size: 14px;\n  background-color: transparent;\n  border-color: transparent;\n  outline: none;\n  transition: all 0.5s;\n  cursor: pointer;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand::before {\n  content: \"\";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 0;\n  height: 0;\n  border-top: 6px solid #ccc;\n  border-right: 6px solid transparent;\n  border-left: 6px solid transparent;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n}\n");var Cs={jsLib:[],cssLib:[],jsfiddle:!0,codepen:!0,codepenLayout:"left",codepenJsProcessor:"babel",codepenEditors:"101",horizontal:!1,vue:"https://cdn.jsdelivr.net/npm/vue/dist/vue.min.js",react:"https://cdn.jsdelivr.net/npm/react/umd/react.production.min.js",reactDOM:"https://cdn.jsdelivr.net/npm/react-dom/umd/react-dom.production.min.js"},As={},Is=function(n){return'<div id="app">\n'.concat(n,"\n</div>")},Ps=function(n){return window.$VUEPRESS_DEMO_BLOCK&&void 0!==window.$VUEPRESS_DEMO_BLOCK[n]?window.$VUEPRESS_DEMO_BLOCK[n]:Cs[n]},zs=function n(e,t,r){var a=document.createElement(e);return t&&Object.keys(t).forEach((function(n){if(n.indexOf("data"))a[n]=t[n];else{var e=n.replace("data","");a.dataset[e]=t[n]}})),r&&r.forEach((function(e){var t=e.tag,r=e.attrs,i=e.children;a.appendChild(n(t,r,i))})),a},Os=function(n,e,t){var r,a=(r=n.querySelectorAll(".".concat(e)),Array.prototype.slice.call(r));return 1!==a.length||t?a:a[0]},Bs=function(n,e){var t,r,a=n.match(/<style>([\s\S]+)<\/style>/),i=n.match(/<template>([\s\S]+)<\/template>/),o=n.match(/<script>([\s\S]+)<\/script>/),s={css:a&&a[1].replace(/^\n|\n$/g,""),html:i&&i[1].replace(/^\n|\n$/g,""),js:o&&o[1].replace(/^\n|\n$/g,""),jsLib:e.jsLib||[],cssLib:e.cssLib||[]};s.htmlTpl=Is(s.html),s.jsTpl=(t=s.js,r=t.replace(/export\s+default\s*?\{\n*/,"").replace(/\n*\}\s*$/,"").trim(),"new Vue({\n  el: '#app',\n  ".concat(r,"\n})")),s.script=function(n,e){var t=n.split(/export\s+default/),r="(function() {".concat(t[0]," ; return ").concat(t[1],"})()"),a=window.Babel?window.Babel.transform(r,{presets:["es2015"]}).code:r,i=[eval][0](a);return i.template=e,i}(s.js,s.html);var l=Ps("vue");return s.jsLib.unshift(l),s},Ms=function(n,e){var t,r=n.match(/<style>([\s\S]+)<\/style>/),a=n.match(/<html>([\s\S]+)<\/html>/),i=n.match(/<script>([\s\S]+)<\/script>/),o={css:r&&r[1].replace(/^\n|\n$/g,""),html:a&&a[1].replace(/^\n|\n$/g,""),js:i&&i[1].replace(/^\n|\n$/g,""),jsLib:e.jsLib||[],cssLib:e.cssLib||[]};return o.htmlTpl=o.html,o.jsTpl=o.js,o.script=(t=o.js,window.Babel?window.Babel.transform(t,{presets:["es2015"]}).code:t),o},Gs=function(n){return n=n.replace("export default ","").replace(/App\.__style__(\s*)=(\s*)`([\s\S]*)?`/,""),n+='ReactDOM.render(React.createElement(App), document.getElementById("app"))'};function Ls(){var n=Os(document,"vuepress-plugin-demo-block__wrapper",!0);n.length?n.forEach((function(n){if("true"!==n.dataset.created){n.style.display="block";var e=Os(n,"vuepress-plugin-demo-block__code"),t=Os(n,"vuepress-plugin-demo-block__display"),r=Os(n,"vuepress-plugin-demo-block__footer"),a=Os(t,"vuepress-plugin-demo-block__app"),i=decodeURIComponent(n.dataset.code),o=decodeURIComponent(n.dataset.config),s=decodeURIComponent(n.dataset.type);o=o?JSON.parse(o):{};var l=e.querySelector("div").clientHeight,c="react"===s?function(n,e){var t=(0,window.Babel.transform)(n,{presets:["es2015","react"]}).code,r="(function(exports){var module={};module.exports=exports;".concat(t,";return module.exports.__esModule?module.exports.default:module.exports;})({})"),a=new Function("return ".concat(r))(),i={js:a,css:a.__style__||"",jsLib:e.jsLib||[],cssLib:e.cssLib||[],jsTpl:Gs(n),htmlTpl:Is("")},o=Ps("react"),s=Ps("reactDOM");return i.jsLib.unshift(o,s),i}(i,o):"vanilla"===s?Ms(i,o):Bs(i,o),u=zs("button",{className:"".concat("vuepress-plugin-demo-block__expand")});if(r.appendChild(u),u.addEventListener("click",qs.bind(null,u,l,e,r)),Ps("jsfiddle")&&r.appendChild(function(n){var e=n.css,t=n.htmlTpl,r=n.jsTpl,a=n.jsLib,i=n.cssLib,o=a.concat(i).concat(Ps("cssLib")).concat(Ps("jsLib")).join(",");return zs("form",{className:"vuepress-plugin-demo-block__jsfiddle",target:"_blank",action:"https://jsfiddle.net/api/post/library/pure/",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"css",value:e}},{tag:"input",attrs:{type:"hidden",name:"html",value:t}},{tag:"input",attrs:{type:"hidden",name:"js",value:r}},{tag:"input",attrs:{type:"hidden",name:"panel_js",value:3}},{tag:"input",attrs:{type:"hidden",name:"wrap",value:1}},{tag:"input",attrs:{type:"hidden",name:"resources",value:o}},{tag:"button",attrs:{type:"submit",className:"vuepress-plugin-demo-block__button",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088289967" class="icon" style="" viewBox="0 0 1170 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1952" xmlns:xlink="http://www.w3.org/1999/xlink" width="228.515625" height="200"><defs><style type="text/css"></style></defs><path d="M1028.571429 441.142857q63.428571 26.285714 102.571428 83.142857T1170.285714 650.857143q0 93.714286-67.428571 160.285714T940 877.714286q-2.285714 0-6.571429-0.285715t-6-0.285714H232q-97.142857-5.714286-164.571429-71.714286T0 645.142857q0-62.857143 31.428571-116t84-84q-6.857143-22.285714-6.857142-46.857143 0-65.714286 46.857142-112t113.714286-46.285714q54.285714 0 98.285714 33.142857 42.857143-88 127.142858-141.714286t186.571428-53.714285q94.857143 0 174.857143 46T982.571429 248.571429t46.571428 172q0 3.428571-0.285714 10.285714t-0.285714 10.285714zM267.428571 593.142857q0 69.714286 48 110.285714t118.857143 40.571429q78.285714 0 137.142857-56.571429-9.142857-11.428571-27.142857-32.285714T519.428571 626.285714q-38.285714 37.142857-82.285714 37.142857-31.428571 0-53.428571-19.142857T361.714286 594.285714q0-30.285714 22-49.714285t52.285714-19.428572q25.142857 0 48.285714 12t41.714286 31.428572 37.142857 42.857142 39.428572 46.857143 44 42.857143 55.428571 31.428572 69.428571 12q69.142857 0 116.857143-40.857143T936 594.857143q0-69.142857-48-109.714286t-118.285714-40.571428q-81.714286 0-137.714286 55.428571l53.142857 61.714286q37.714286-36.571429 81.142857-36.571429 29.714286 0 52.571429 18.857143t22.857143 48q0 32.571429-21.142857 52.285714t-53.714286 19.714286q-24.571429 0-47.142857-12t-41.142857-31.428571-37.428572-42.857143-39.714286-46.857143-44.285714-42.857143-55.142857-31.428571T434.285714 444.571429q-69.714286 0-118.285714 40.285714T267.428571 593.142857z" p-id="1953"></path></svg>',datatip:"JSFiddle"}}])}(c)),Ps("codepen")&&r.appendChild(function(n){var e=n.css,t=n.htmlTpl,r=n.jsTpl,a=n.jsLib,i=n.cssLib,o=JSON.stringify({css:e,html:t,js:r,js_external:a.concat(Ps("jsLib")).join(";"),css_external:i.concat(Ps("cssLib")).join(";"),layout:Ps("codepenLayout"),js_pre_processor:Ps("codepenJsProcessor"),editors:Ps("codepenEditors")});return zs("form",{className:"vuepress-plugin-demo-block__codepen",target:"_blank",action:"https://codepen.io/pen/define",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"data",value:o}},{tag:"button",attrs:{type:"submit",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088271207" class="icon" style="" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1737" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="200"><defs><style type="text/css"></style></defs><path d="M123.428571 668l344.571429 229.714286v-205.142857L277.142857 565.142857z m-35.428571-82.285714l110.285714-73.714286-110.285714-73.714286v147.428572z m468 312l344.571429-229.714286-153.714286-102.857143-190.857143 127.428572v205.142857z m-44-281.714286l155.428571-104-155.428571-104-155.428571 104zM277.142857 458.857143l190.857143-127.428572V126.285714L123.428571 356z m548.571429 53.142857l110.285714 73.714286V438.285714z m-78.857143-53.142857l153.714286-102.857143-344.571429-229.714286v205.142857z m277.142857-102.857143v312q0 23.428571-19.428571 36.571429l-468 312q-12 7.428571-24.571429 7.428571t-24.571429-7.428571L19.428571 704.571429q-19.428571-13.142857-19.428571-36.571429V356q0-23.428571 19.428571-36.571429L487.428571 7.428571q12-7.428571 24.571429-7.428571t24.571429 7.428571l468 312q19.428571 13.142857 19.428571 36.571429z" p-id="1738"></path></svg>',className:"vuepress-plugin-demo-block__button",datatip:"Codepen"}}])}(c)),void 0!==o.horizontal?o.horizontal:Ps("horizontal")){n.classList.add("vuepress-plugin-demo-block__horizontal");var p=e.firstChild.cloneNode(!0);p.classList.add("vuepress-plugin-demo-block__h_code"),t.appendChild(p)}if(c.css&&function(n){if(!As[n]){var e=zs("style",{innerHTML:n});document.body.appendChild(e),As[n]=!0}}(c.css),"react"===s)ReactDOM.render(React.createElement(c.js),a);else if("vue"===s){var d=(new(Vue.extend(c.script))).$mount();a.appendChild(d.$el)}else"vanilla"===s&&(a.innerHTML=c.html,new Function("return (function(){".concat(c.script,"})()"))());n.dataset.created="true"}})):setTimeout((function(n){Ls()}),300)}function qs(n,e,t,r){var a="1"!==n.dataset.isExpand;t.style.height=a?"".concat(e,"px"):0,a?r.classList.add("vuepress-plugin-demo-block__show-link"):r.classList.remove("vuepress-plugin-demo-block__show-link"),n.dataset.isExpand=a?"1":"0"}var Rs={mounted:function(){window.$VUEPRESS_DEMO_BLOCK={jsfiddle:!1,codepen:!0,horizontal:!1},Ls()},updated:function(){Ls()}},Ds="auto",$s="zoom-in",Ns="zoom-out",Fs="grab",Hs="move";function Ws(n,e,t){var r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],a={passive:!1};r?n.addEventListener(e,t,a):n.removeEventListener(e,t,a)}function Vs(n,e){if(n){var t=new Image;t.onload=function(){e&&e(t)},t.src=n}}function Js(n){return n.dataset.original?n.dataset.original:"A"===n.parentNode.tagName?n.parentNode.getAttribute("href"):null}function Us(n,e,t){!function(n){var e=Qs,t=Xs;if(n.transition){var r=n.transition;delete n.transition,n[e]=r}if(n.transform){var a=n.transform;delete n.transform,n[t]=a}}(e);var r=n.style,a={};for(var i in e)t&&(a[i]=r[i]||""),r[i]=e[i];return a}var Qs="transition",Xs="transform",Ks="transform",Zs="transitionend";var Ys=function(){},nl={enableGrab:!0,preloadImage:!1,closeOnWindowResize:!0,transitionDuration:.4,transitionTimingFunction:"cubic-bezier(0.4, 0, 0, 1)",bgColor:"rgb(255, 255, 255)",bgOpacity:1,scaleBase:1,scaleExtra:.5,scrollThreshold:40,zIndex:998,customSize:null,onOpen:Ys,onClose:Ys,onGrab:Ys,onMove:Ys,onRelease:Ys,onBeforeOpen:Ys,onBeforeClose:Ys,onBeforeGrab:Ys,onBeforeRelease:Ys,onImageLoading:Ys,onImageLoaded:Ys},el={init:function(n){var e,t;e=this,t=n,Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach((function(n){e[n]=e[n].bind(t)}))},click:function(n){if(n.preventDefault(),rl(n))return window.open(this.target.srcOriginal||n.currentTarget.src,"_blank");this.shown?this.released?this.close():this.release():this.open(n.currentTarget)},scroll:function(){var n=document.documentElement||document.body.parentNode||document.body,e=window.pageXOffset||n.scrollLeft,t=window.pageYOffset||n.scrollTop;null===this.lastScrollPosition&&(this.lastScrollPosition={x:e,y:t});var r=this.lastScrollPosition.x-e,a=this.lastScrollPosition.y-t,i=this.options.scrollThreshold;(Math.abs(a)>=i||Math.abs(r)>=i)&&(this.lastScrollPosition=null,this.close())},keydown:function(n){(function(n){return"Escape"===(n.key||n.code)||27===n.keyCode})(n)&&(this.released?this.close():this.release(this.close))},mousedown:function(n){if(tl(n)&&!rl(n)){n.preventDefault();var e=n.clientX,t=n.clientY;this.pressTimer=setTimeout(function(){this.grab(e,t)}.bind(this),200)}},mousemove:function(n){this.released||this.move(n.clientX,n.clientY)},mouseup:function(n){tl(n)&&!rl(n)&&(clearTimeout(this.pressTimer),this.released?this.close():this.release())},touchstart:function(n){n.preventDefault();var e=n.touches[0],t=e.clientX,r=e.clientY;this.pressTimer=setTimeout(function(){this.grab(t,r)}.bind(this),200)},touchmove:function(n){if(!this.released){var e=n.touches[0],t=e.clientX,r=e.clientY;this.move(t,r)}},touchend:function(n){(function(n){n.targetTouches.length})(n)||(clearTimeout(this.pressTimer),this.released?this.close():this.release())},clickOverlay:function(){this.close()},resizeWindow:function(){this.close()}};function tl(n){return 0===n.button}function rl(n){return n.metaKey||n.ctrlKey}var al={init:function(n){this.el=document.createElement("div"),this.instance=n,this.parent=document.body,Us(this.el,{position:"fixed",top:0,left:0,right:0,bottom:0,opacity:0}),this.updateStyle(n.options),Ws(this.el,"click",n.handler.clickOverlay.bind(n))},updateStyle:function(n){Us(this.el,{zIndex:n.zIndex,backgroundColor:n.bgColor,transition:"opacity\n        "+n.transitionDuration+"s\n        "+n.transitionTimingFunction})},insert:function(){this.parent.appendChild(this.el)},remove:function(){this.parent.removeChild(this.el)},fadeIn:function(){this.el.offsetWidth,this.el.style.opacity=this.instance.options.bgOpacity},fadeOut:function(){this.el.style.opacity=0}},il="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},ol=function(){function n(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}}(),sl=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},ll={init:function(n,e){this.el=n,this.instance=e,this.srcThumbnail=this.el.getAttribute("src"),this.srcset=this.el.getAttribute("srcset"),this.srcOriginal=Js(this.el),this.rect=this.el.getBoundingClientRect(),this.translate=null,this.scale=null,this.styleOpen=null,this.styleClose=null},zoomIn:function(){var n=this.instance.options,e=n.zIndex,t=n.enableGrab,r=n.transitionDuration,a=n.transitionTimingFunction;this.translate=this.calculateTranslate(),this.scale=this.calculateScale(),this.styleOpen={position:"relative",zIndex:e+1,cursor:t?Fs:Ns,transition:Ks+"\n        "+r+"s\n        "+a,transform:"translate3d("+this.translate.x+"px, "+this.translate.y+"px, 0px)\n        scale("+this.scale.x+","+this.scale.y+")",height:this.rect.height+"px",width:this.rect.width+"px"},this.el.offsetWidth,this.styleClose=Us(this.el,this.styleOpen,!0)},zoomOut:function(){this.el.offsetWidth,Us(this.el,{transform:"none"})},grab:function(n,e,t){var r=cl(),a=r.x-n,i=r.y-e;Us(this.el,{cursor:Hs,transform:"translate3d(\n        "+(this.translate.x+a)+"px, "+(this.translate.y+i)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},move:function(n,e,t){var r=cl(),a=r.x-n,i=r.y-e;Us(this.el,{transition:Ks,transform:"translate3d(\n        "+(this.translate.x+a)+"px, "+(this.translate.y+i)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},restoreCloseStyle:function(){Us(this.el,this.styleClose)},restoreOpenStyle:function(){Us(this.el,this.styleOpen)},upgradeSource:function(){if(this.srcOriginal){var n=this.el.parentNode;this.srcset&&this.el.removeAttribute("srcset");var e=this.el.cloneNode(!1);e.setAttribute("src",this.srcOriginal),e.style.position="fixed",e.style.visibility="hidden",n.appendChild(e),setTimeout(function(){this.el.setAttribute("src",this.srcOriginal),n.removeChild(e)}.bind(this),50)}},downgradeSource:function(){this.srcOriginal&&(this.srcset&&this.el.setAttribute("srcset",this.srcset),this.el.setAttribute("src",this.srcThumbnail))},calculateTranslate:function(){var n=cl(),e=this.rect.left+this.rect.width/2,t=this.rect.top+this.rect.height/2;return{x:n.x-e,y:n.y-t}},calculateScale:function(){var n=this.el.dataset,e=n.zoomingHeight,t=n.zoomingWidth,r=this.instance.options,a=r.customSize,i=r.scaleBase;if(!a&&e&&t)return{x:t/this.rect.width,y:e/this.rect.height};if(a&&"object"===(void 0===a?"undefined":il(a)))return{x:a.width/this.rect.width,y:a.height/this.rect.height};var o=this.rect.width/2,s=this.rect.height/2,l=cl(),c={x:l.x-o,y:l.y-s},u=c.x/o,p=c.y/s,d=i+Math.min(u,p);if(a&&"string"==typeof a){var h=t||this.el.naturalWidth,m=e||this.el.naturalHeight,g=parseFloat(a)*h/(100*this.rect.width),f=parseFloat(a)*m/(100*this.rect.height);if(d>g||d>f)return{x:g,y:f}}return{x:d,y:d}}};function cl(){var n=document.documentElement;return{x:Math.min(n.clientWidth,window.innerWidth)/2,y:Math.min(n.clientHeight,window.innerHeight)/2}}function ul(n,e,t){["mousedown","mousemove","mouseup","touchstart","touchmove","touchend"].forEach((function(r){Ws(n,r,e[r],t)}))}var pl=function(){function n(e){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.target=Object.create(ll),this.overlay=Object.create(al),this.handler=Object.create(el),this.body=document.body,this.shown=!1,this.lock=!1,this.released=!0,this.lastScrollPosition=null,this.pressTimer=null,this.options=sl({},nl,e),this.overlay.init(this),this.handler.init(this)}return ol(n,[{key:"listen",value:function(n){if("string"==typeof n)for(var e=document.querySelectorAll(n),t=e.length;t--;)this.listen(e[t]);else"IMG"===n.tagName&&(n.style.cursor=$s,Ws(n,"click",this.handler.click),this.options.preloadImage&&Vs(Js(n)));return this}},{key:"config",value:function(n){return n?(sl(this.options,n),this.overlay.updateStyle(this.options),this):this.options}},{key:"open",value:function(n){var e=this,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.options.onOpen;if(!this.shown&&!this.lock){var r="string"==typeof n?document.querySelector(n):n;if("IMG"===r.tagName){if(this.options.onBeforeOpen(r),this.target.init(r,this),!this.options.preloadImage){var a=this.target.srcOriginal;null!=a&&(this.options.onImageLoading(r),Vs(a,this.options.onImageLoaded))}this.shown=!0,this.lock=!0,this.target.zoomIn(),this.overlay.insert(),this.overlay.fadeIn(),Ws(document,"scroll",this.handler.scroll),Ws(document,"keydown",this.handler.keydown),this.options.closeOnWindowResize&&Ws(window,"resize",this.handler.resizeWindow);var i=function n(){Ws(r,Zs,n,!1),e.lock=!1,e.target.upgradeSource(),e.options.enableGrab&&ul(document,e.handler,!0),t(r)};return Ws(r,Zs,i),this}}}},{key:"close",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onClose;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeClose(t),this.lock=!0,this.body.style.cursor=Ds,this.overlay.fadeOut(),this.target.zoomOut(),Ws(document,"scroll",this.handler.scroll,!1),Ws(document,"keydown",this.handler.keydown,!1),this.options.closeOnWindowResize&&Ws(window,"resize",this.handler.resizeWindow,!1);var r=function r(){Ws(t,Zs,r,!1),n.shown=!1,n.lock=!1,n.target.downgradeSource(),n.options.enableGrab&&ul(document,n.handler,!1),n.target.restoreCloseStyle(),n.overlay.remove(),e(t)};return Ws(t,Zs,r),this}}},{key:"grab",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onGrab;if(this.shown&&!this.lock){var a=this.target.el;this.options.onBeforeGrab(a),this.released=!1,this.target.grab(n,e,t);var i=function n(){Ws(a,Zs,n,!1),r(a)};return Ws(a,Zs,i),this}}},{key:"move",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onMove;if(this.shown&&!this.lock){this.released=!1,this.body.style.cursor=Hs,this.target.move(n,e,t);var a=this.target.el,i=function n(){Ws(a,Zs,n,!1),r(a)};return Ws(a,Zs,i),this}}},{key:"release",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onRelease;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeRelease(t),this.lock=!0,this.body.style.cursor=Ds,this.target.restoreOpenStyle();var r=function r(){Ws(t,Zs,r,!1),n.lock=!1,n.released=!0,e(t)};return Ws(t,Zs,r),this}}}]),n}();const dl=JSON.parse('{"bgColor":"rgba(0,0,0,0.6)"}'),hl=Number("500");class ml{constructor(){this.instance=new pl(dl)}update(n=".theme-vdoing-content img:not(.no-zoom)"){"undefined"!=typeof window&&this.instance.listen(n)}updateDelay(n=".theme-vdoing-content img:not(.no-zoom)",e=hl){setTimeout(()=>this.update(n),e)}}var gl=[fs,ks,Ts,Es,Rs,{watch:{"$page.path"(){void 0!==this.$vuepress.zooming&&this.$vuepress.zooming.updateDelay()}},mounted(){this.$vuepress.zooming=new ml,this.$vuepress.zooming.updateDelay()}}],fl={name:"GlobalLayout",computed:{layout(){const n=this.getLayout();return ps("layout",n),Vt.component(n)}},methods:{getLayout(){if(this.$page.path){const n=this.$page.frontmatter.layout;return n&&(this.$vuepress.getLayoutAsyncComponent(n)||this.$vuepress.getVueComponent(n))?n:"Layout"}return"NotFound"}}},vl=t(7),bl=Object(vl.a)(fl,(function(){return(0,this._self._c)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;!function(n,e,t){switch(e){case"components":n[e]||(n[e]={}),Object.assign(n[e],t);break;case"mixins":n[e]||(n[e]=[]),n[e].push(...t);break;default:throw new Error("Unknown option name.")}}(bl,"mixins",gl);const yl=[{name:"v-79de9bb8",path:"/pages/interView/java/003/",component:bl,beforeEnter:(n,e,t)=>{us("Layout","v-79de9bb8").then(t)}},{path:"/pages/interView/java/003/index.html",redirect:"/pages/interView/java/003/"},{path:"/01.面经园地/01.Java/03.MyBatis面试题1~18.html",redirect:"/pages/interView/java/003/"},{name:"v-6fa1b7c2",path:"/pages/interView/java/002/",component:bl,beforeEnter:(n,e,t)=>{us("Layout","v-6fa1b7c2").then(t)}},{path:"/pages/interView/java/002/index.html",redirect:"/pages/interView/java/002/"},{path:"/01.面经园地/01.Java/02.Spring面试高频问题.html",redirect:"/pages/interView/java/002/"},{name:"v-0741303c",path:"/pages/interView/java/004/",component:bl,beforeEnter:(n,e,t)=>{us("Layout","v-0741303c").then(t)}},{path:"/pages/interView/java/004/index.html",redirect:"/pages/interView/java/004/"},{path:"/01.面经园地/01.Java/04.Java架构师面试高频问题1-18.html",redirect:"/pages/interView/java/004/"},{name:"v-1b7ac458",path:"/pages/interView/DotNet/001/",component:bl,beforeEnter:(n,e,t)=>{us("Layout","v-1b7ac458").then(t)}},{path:"/pages/interView/DotNet/001/index.html",redirect:"/pages/interView/DotNet/001/"},{path:"/01.面经园地/02.DotNet/001.Dotnet面试题汇总1.html",redirect:"/pages/interView/DotNet/001/"},{name:"v-e759cae6",path:"/pages/interView/java/001/",component:bl,beforeEnter:(n,e,t)=>{us("Layout","v-e759cae6").then(t)}},{path:"/pages/interView/java/001/index.html",redirect:"/pages/interView/java/001/"},{path:"/01.面经园地/01.Java/01.Java基础面试高频问题.html",redirect:"/pages/interView/java/001/"},{name:"v-2a5b0312",path:"/pages/43f8ea/",component:bl,beforeEnter:(n,e,t)=>{us("Layout","v-2a5b0312").then(t)}},{path:"/pages/43f8ea/index.html",redirect:"/pages/43f8ea/"},{path:"/02.开发笔记/01.架构设计/01.面向对象设计五大原则.html",redirect:"/pages/43f8ea/"},{name:"v-32ff3e21",path:"/pages/Notes/java/001/",component:bl,beforeEnter:(n,e,t)=>{us("Layout","v-32ff3e21").then(t)}},{path:"/pages/Notes/java/001/index.html",redirect:"/pages/Notes/java/001/"},{path:"/02.开发笔记/02.Java/01.Java常用中间件.html",redirect:"/pages/Notes/java/001/"},{name:"v-5ca9ee02",path:"/pages/Notes/java/002/",component:bl,beforeEnter:(n,e,t)=>{us("Layout","v-5ca9ee02").then(t)}},{path:"/pages/Notes/java/002/index.html",redirect:"/pages/Notes/java/002/"},{path:"/02.开发笔记/02.Java/02.Java常用工作流框架.html",redirect:"/pages/Notes/java/002/"},{name:"v-1098946a",path:"/pages/e08693/",component:bl,beforeEnter:(n,e,t)=>{us("Layout","v-1098946a").then(t)}},{path:"/pages/e08693/index.html",redirect:"/pages/e08693/"},{path:"/02.开发笔记/01.架构设计/02.微服务常用组件.html",redirect:"/pages/e08693/"},{name:"v-1537d5df",path:"/pages/interView/DB/001/",component:bl,beforeEnter:(n,e,t)=>{us("Layout","v-1537d5df").then(t)}},{path:"/pages/interView/DB/001/index.html",redirect:"/pages/interView/DB/001/"},{path:"/01.面经园地/04.数据库/001.Oracle面试题1~33.html",redirect:"/pages/interView/DB/001/"},{name:"v-72160dbf",path:"/pages/Notes/Python/miniServer/001/",component:bl,beforeEnter:(n,e,t)=>{us("Layout","v-72160dbf").then(t)}},{path:"/pages/Notes/Python/miniServer/001/index.html",redirect:"/pages/Notes/Python/miniServer/001/"},{path:"/02.开发笔记/03.Python/01.Python+Flask开发微服务/001.环境初始化.html",redirect:"/pages/Notes/Python/miniServer/001/"},{name:"v-3352041f",path:"/pages/Notes/Python/miniServer/000/",component:bl,beforeEnter:(n,e,t)=>{us("Layout","v-3352041f").then(t)}},{path:"/pages/Notes/Python/miniServer/000/index.html",redirect:"/pages/Notes/Python/miniServer/000/"},{path:"/02.开发笔记/03.Python/01.Python+Flask开发微服务/000.目录.html",redirect:"/pages/Notes/Python/miniServer/000/"},{name:"v-427adef7",path:"/pages/GoTour/002/",component:bl,beforeEnter:(n,e,t)=>{us("Layout","v-427adef7").then(t)}},{path:"/pages/GoTour/002/index.html",redirect:"/pages/GoTour/002/"},{path:"/03.中文翻译/01.Go语言文档中文翻译/03.Go入门教程.html",redirect:"/pages/GoTour/002/"},{name:"v-328d6153",path:"/pages/GoTour/000/",component:bl,beforeEnter:(n,e,t)=>{us("Layout","v-328d6153").then(t)}},{path:"/pages/GoTour/000/index.html",redirect:"/pages/GoTour/000/"},{path:"/03.中文翻译/01.Go语言文档中文翻译/01.序言和目录.html",redirect:"/pages/GoTour/000/"},{name:"v-148f6fd2",path:"/pages/GoTour/003/",component:bl,beforeEnter:(n,e,t)=>{us("Layout","v-148f6fd2").then(t)}},{path:"/pages/GoTour/003/index.html",redirect:"/pages/GoTour/003/"},{path:"/03.中文翻译/01.Go语言文档中文翻译/04.Go模块教程.html",redirect:"/pages/GoTour/003/"},{name:"v-43d05cd8",path:"/pages/GoTour/004/",component:bl,beforeEnter:(n,e,t)=>{us("Layout","v-43d05cd8").then(t)}},{path:"/pages/GoTour/004/index.html",redirect:"/pages/GoTour/004/"},{path:"/03.中文翻译/01.Go语言文档中文翻译/05.使用Go和Gin开发RESTful API.html",redirect:"/pages/GoTour/004/"},{name:"v-076a0add",path:"/pages/GoTour/001/",component:bl,beforeEnter:(n,e,t)=>{us("Layout","v-076a0add").then(t)}},{path:"/pages/GoTour/001/index.html",redirect:"/pages/GoTour/001/"},{path:"/03.中文翻译/01.Go语言文档中文翻译/02.Go语言的下载和安装.html",redirect:"/pages/GoTour/001/"},{name:"v-19eef250",path:"/pages/GoTour/005/",component:bl,beforeEnter:(n,e,t)=>{us("Layout","v-19eef250").then(t)}},{path:"/pages/GoTour/005/index.html",redirect:"/pages/GoTour/005/"},{path:"/03.中文翻译/01.Go语言文档中文翻译/06.使用Go开发Web应用程序.html",redirect:"/pages/GoTour/005/"},{name:"v-a34e4bf2",path:"/pages/Microsoft/UIAutomation/000/",component:bl,beforeEnter:(n,e,t)=>{us("Layout","v-a34e4bf2").then(t)}},{path:"/pages/Microsoft/UIAutomation/000/index.html",redirect:"/pages/Microsoft/UIAutomation/000/"},{path:"/03.中文翻译/03.微软UIAutomation文档翻译.md/01.UI自动化课程简介.html",redirect:"/pages/Microsoft/UIAutomation/000/"},{name:"v-643850aa",path:"/pages/python/PyAutoGui/001/",component:bl,beforeEnter:(n,e,t)=>{us("Layout","v-643850aa").then(t)}},{path:"/pages/python/PyAutoGui/001/index.html",redirect:"/pages/python/PyAutoGui/001/"},{path:"/03.中文翻译/02.Python-PyAutoGui文档中文翻译/01.Windows下PyAutoGui的安装和使用.html",redirect:"/pages/python/PyAutoGui/001/"},{name:"v-0597a28a",path:"/pages/720440/",component:bl,beforeEnter:(n,e,t)=>{us("Layout","v-0597a28a").then(t)}},{path:"/pages/720440/index.html",redirect:"/pages/720440/"},{path:"/03.中文翻译/04.openpyxl文档中文翻译.md/001.课程·安装.html",redirect:"/pages/720440/"},{name:"v-72817f84",path:"/pages/Python/openpyxlDoc/000/",component:bl,beforeEnter:(n,e,t)=>{us("Layout","v-72817f84").then(t)}},{path:"/pages/Python/openpyxlDoc/000/index.html",redirect:"/pages/Python/openpyxlDoc/000/"},{path:"/03.中文翻译/04.openpyxl文档中文翻译.md/000.导言.html",redirect:"/pages/Python/openpyxlDoc/000/"},{name:"v-5c4a9caa",path:"/pages/unemploymentLog/Day000/",component:bl,beforeEnter:(n,e,t)=>{us("Layout","v-5c4a9caa").then(t)}},{path:"/pages/unemploymentLog/Day000/index.html",redirect:"/pages/unemploymentLog/Day000/"},{path:"/05.职场随笔/01.失业笔记/01.2023-04-05.html",redirect:"/pages/unemploymentLog/Day000/"},{name:"v-01b176ac",path:"/pages/unemploymentLog/Day002/",component:bl,beforeEnter:(n,e,t)=>{us("Layout","v-01b176ac").then(t)}},{path:"/pages/unemploymentLog/Day002/index.html",redirect:"/pages/unemploymentLog/Day002/"},{path:"/05.职场随笔/01.失业笔记/03.2023-04-07.html",redirect:"/pages/unemploymentLog/Day002/"},{name:"v-a48e1eac",path:"/pages/unemploymentLog/Day001/",component:bl,beforeEnter:(n,e,t)=>{us("Layout","v-a48e1eac").then(t)}},{path:"/pages/unemploymentLog/Day001/index.html",redirect:"/pages/unemploymentLog/Day001/"},{path:"/05.职场随笔/01.失业笔记/02.2023-04-06.html",redirect:"/pages/unemploymentLog/Day001/"},{name:"v-db47cc2c",path:"/pages/unemploymentLog/Day004/",component:bl,beforeEnter:(n,e,t)=>{us("Layout","v-db47cc2c").then(t)}},{path:"/pages/unemploymentLog/Day004/index.html",redirect:"/pages/unemploymentLog/Day004/"},{path:"/05.职场随笔/01.失业笔记/05.2023-04-10.html",redirect:"/pages/unemploymentLog/Day004/"},{name:"v-0e2d80f1",path:"/blog/",component:bl,beforeEnter:(n,e,t)=>{us("Layout","v-0e2d80f1").then(t)}},{path:"/blog/index.html",redirect:"/blog/"},{path:"/@pages/archivesPage.html",redirect:"/blog/"},{name:"v-1ac9fe62",path:"/pages/unemploymentLog/Day003/",component:bl,beforeEnter:(n,e,t)=>{us("Layout","v-1ac9fe62").then(t)}},{path:"/pages/unemploymentLog/Day003/index.html",redirect:"/pages/unemploymentLog/Day003/"},{path:"/05.职场随笔/01.失业笔记/04.2023-04-08~09.html",redirect:"/pages/unemploymentLog/Day003/"},{name:"v-209d7f1d",path:"/",component:bl,beforeEnter:(n,e,t)=>{us("Layout","v-209d7f1d").then(t)}},{path:"/index.html",redirect:"/"},{path:"*",component:bl}],wl={title:"土肥猿的面经园地",description:"程序员的面经园地和知识仓库",base:"/",headTags:[["link",{rel:"icon",href:"/img/favicon.ico"}],["meta",{name:"keywords",content:"vuepress,theme,blog,vdoing"}],["meta",{name:"theme-color",content:"#11a8cd"}]],pages:[{title:"MyBatis面试高频问题1~18",frontmatter:{title:"MyBatis面试高频问题1~18",date:"2023-04-12T14:37:33.000Z",permalink:"/pages/interView/java/003/"},regularPath:"/01.%E9%9D%A2%E7%BB%8F%E5%9B%AD%E5%9C%B0/01.Java/03.MyBatis%E9%9D%A2%E8%AF%95%E9%A2%981~18.html",relativePath:"01.面经园地/01.Java/03.MyBatis面试题1~18.md",key:"v-79de9bb8",path:"/pages/interView/java/003/",headers:[{level:2,title:"1、#{}和\\${}的区别是什么？",slug:"_1、-和-的区别是什么",normalizedTitle:"1、#{}和${}的区别是什么？",charIndex:21},{level:2,title:"2、Xml 映射文件中，除了常见的 select|insert|update|delete 标签之外，还有哪些标签？",slug:"_2、xml-映射文件中-除了常见的-select-insert-update-delete-标签之外-还有哪些标签",normalizedTitle:"2、xml 映射文件中，除了常见的 select|insert|update|delete 标签之外，还有哪些标签？",charIndex:365},{level:2,title:"3、最佳实践中，通常一个 Xml 映射文件，都会写一个 Dao 接口与之对应，请问，这个 Dao 接口的工作原理是什么？Dao 接口里的方法，参数不同时，方法能重载吗？",slug:"_3、最佳实践中-通常一个-xml-映射文件-都会写一个-dao-接口与之对应-请问-这个-dao-接口的工作原理是什么-dao-接口里的方法-参数不同时-方法能重载吗",normalizedTitle:"3、最佳实践中，通常一个 xml 映射文件，都会写一个 dao 接口与之对应，请问，这个 dao 接口的工作原理是什么？dao 接口里的方法，参数不同时，方法能重载吗？",charIndex:656},{level:3,title:"==补充：==",slug:"补充",normalizedTitle:"==补充：==",charIndex:1887},{level:2,title:"4、MyBatis 是如何进行分页的？分页插件的原理是什么？",slug:"_4、mybatis-是如何进行分页的-分页插件的原理是什么",normalizedTitle:"4、mybatis 是如何进行分页的？分页插件的原理是什么？",charIndex:3596},{level:2,title:"5、简述 MyBatis 的插件运行原理，以及如何编写一个插件",slug:"_5、简述-mybatis-的插件运行原理-以及如何编写一个插件",normalizedTitle:"5、简述 mybatis 的插件运行原理，以及如何编写一个插件",charIndex:3954},{level:2,title:"6、MyBatis 执行批量插入，能返回数据库主键列表吗？",slug:"_6、mybatis-执行批量插入-能返回数据库主键列表吗",normalizedTitle:"6、mybatis 执行批量插入，能返回数据库主键列表吗？",charIndex:4318},{level:2,title:"7、MyBatis 动态 sql 是做什么的？都有哪些动态 sql？能简述一下动态 sql 的执行原理不？",slug:"_7、mybatis-动态-sql-是做什么的-都有哪些动态-sql-能简述一下动态-sql-的执行原理不",normalizedTitle:"7、mybatis 动态 sql 是做什么的？都有哪些动态 sql？能简述一下动态 sql 的执行原理不？",charIndex:4381},{level:2,title:"8、MyBatis 是如何将 sql 执行结果封装为目标对象并返回的？都有哪些映射形式？",slug:"_8、mybatis-是如何将-sql-执行结果封装为目标对象并返回的-都有哪些映射形式",normalizedTitle:"8、mybatis 是如何将 sql 执行结果封装为目标对象并返回的？都有哪些映射形式？",charIndex:4659},{level:2,title:"9、MyBatis 能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别",slug:"_9、mybatis-能执行一对一、一对多的关联查询吗-都有哪些实现方式-以及它们之间的区别",normalizedTitle:"9、mybatis 能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别",charIndex:4980},{level:2,title:"10、MyBatis 是否支持延迟加载？如果支持，它的实现原理是什么？",slug:"_10、mybatis-是否支持延迟加载-如果支持-它的实现原理是什么",normalizedTitle:"10、mybatis 是否支持延迟加载？如果支持，它的实现原理是什么？",charIndex:5651},{level:2,title:"11、MyBatis 的 Xml 映射文件中，不同的 Xml 映射文件，id 是否可以重复？",slug:"_11、mybatis-的-xml-映射文件中-不同的-xml-映射文件-id-是否可以重复",normalizedTitle:"11、mybatis 的 xml 映射文件中，不同的 xml 映射文件，id 是否可以重复？",charIndex:6122},{level:2,title:"12、MyBatis 中如何执行批处理？",slug:"_12、mybatis-中如何执行批处理",normalizedTitle:"12、mybatis 中如何执行批处理？",charIndex:6436},{level:2,title:"13、MyBatis 都有哪些 Executor 执行器？它们之间的区别是什么？",slug:"_13、mybatis-都有哪些-executor-执行器-它们之间的区别是什么",normalizedTitle:"13、mybatis 都有哪些 executor 执行器？它们之间的区别是什么？",charIndex:6490},{level:2,title:"14、MyBatis 中如何指定使用哪一种 Executor 执行器？",slug:"_14、mybatis-中如何指定使用哪一种-executor-执行器",normalizedTitle:"14、mybatis 中如何指定使用哪一种 executor 执行器？",charIndex:7115},{level:2,title:"15、MyBatis 是否可以映射 Enum 枚举类？",slug:"_15、mybatis-是否可以映射-enum-枚举类",normalizedTitle:"15、mybatis 是否可以映射 enum 枚举类？",charIndex:7275},{level:2,title:"16、MyBatis 映射文件中，如果 A 标签通过 include 引用了 B 标签的内容，请问，B 标签能否定义在 A 标签的后面，还是说必须定义在 A 标签的前面？",slug:"_16、mybatis-映射文件中-如果-a-标签通过-include-引用了-b-标签的内容-请问-b-标签能否定义在-a-标签的后面-还是说必须定义在-a-标签的前面",normalizedTitle:"16、mybatis 映射文件中，如果 a 标签通过 include 引用了 b 标签的内容，请问，b 标签能否定义在 a 标签的后面，还是说必须定义在 a 标签的前面？",charIndex:7580},{level:2,title:"17、简述 MyBatis 的 Xml 映射文件和 MyBatis 内部数据结构之间的映射关系？",slug:"_17、简述-mybatis-的-xml-映射文件和-mybatis-内部数据结构之间的映射关系",normalizedTitle:"17、简述 mybatis 的 xml 映射文件和 mybatis 内部数据结构之间的映射关系？",charIndex:7923},{level:2,title:"18、为什么说 MyBatis 是半自动 ORM 映射工具？它与全自动的区别在哪里？",slug:"_18、为什么说-mybatis-是半自动-orm-映射工具-它与全自动的区别在哪里",normalizedTitle:"18、为什么说 mybatis 是半自动 orm 映射工具？它与全自动的区别在哪里？",charIndex:8283}],headersStr:"1、#{}和\\${}的区别是什么？ 2、Xml 映射文件中，除了常见的 select|insert|update|delete 标签之外，还有哪些标签？ 3、最佳实践中，通常一个 Xml 映射文件，都会写一个 Dao 接口与之对应，请问，这个 Dao 接口的工作原理是什么？Dao 接口里的方法，参数不同时，方法能重载吗？ ==补充：== 4、MyBatis 是如何进行分页的？分页插件的原理是什么？ 5、简述 MyBatis 的插件运行原理，以及如何编写一个插件 6、MyBatis 执行批量插入，能返回数据库主键列表吗？ 7、MyBatis 动态 sql 是做什么的？都有哪些动态 sql？能简述一下动态 sql 的执行原理不？ 8、MyBatis 是如何将 sql 执行结果封装为目标对象并返回的？都有哪些映射形式？ 9、MyBatis 能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别 10、MyBatis 是否支持延迟加载？如果支持，它的实现原理是什么？ 11、MyBatis 的 Xml 映射文件中，不同的 Xml 映射文件，id 是否可以重复？ 12、MyBatis 中如何执行批处理？ 13、MyBatis 都有哪些 Executor 执行器？它们之间的区别是什么？ 14、MyBatis 中如何指定使用哪一种 Executor 执行器？ 15、MyBatis 是否可以映射 Enum 枚举类？ 16、MyBatis 映射文件中，如果 A 标签通过 include 引用了 B 标签的内容，请问，B 标签能否定义在 A 标签的后面，还是说必须定义在 A 标签的前面？ 17、简述 MyBatis 的 Xml 映射文件和 MyBatis 内部数据结构之间的映射关系？ 18、为什么说 MyBatis 是半自动 ORM 映射工具？它与全自动的区别在哪里？",content:'> 本文收集自网络，原出处不明。\n\n\n# 1、#{}和${}的区别是什么？\n\n答：\n\n * ${}是 Properties 文件中的变量占位符，它可以用于标签属性值和 sql 内部，属于静态文本替换，比如${driver}会被静态替换为com.mysql.jdbc. Driver。\n * #{}是 sql 的参数占位符，MyBatis 会将 sql 中的#{}替换为? 号，在 sql 执行前会使用 PreparedStatement 的参数设置方法，按序给 sql 的? 号占位符设置参数值，比如 ps.setInt(0, parameterValue)，#{item.name} 的取值方式为使用反射从参数对象中获取 item 对象的 name 属性值，相当于 param.getItem().getName()。\n\n\n# 2、Xml 映射文件中，除了常见的 select|insert|update|delete 标签之外，还有哪些标签？\n\n答：\n\n还有很多其他的标签， <resultMap> 、 <parameterMap> 、 <sql> 、 <include> 、 <selectKey> ，加上动态 sql 的 9 个标签， trim|where|set|foreach|if|choose|when|otherwise|bind 等，其中 <sql> 为 sql 片段标签，通过 <include> 标签引入 sql 片段， <selectKey> 为不支持自增的主键生成策略标签。\n\n\n# 3、最佳实践中，通常一个 Xml 映射文件，都会写一个 Dao 接口与之对应，请问，这个 Dao 接口的工作原理是什么？Dao 接口里的方法，参数不同时，方法能重载吗？\n\n答：\n\nDao 接口，就是人们常说的 Mapper 接口，接口的全限名，就是映射文件中的 namespace 的值，接口的方法名，就是映射文件中 MappedStatement 的 id 值，接口方法内的参数，就是传递给 sql 的参数。 Mapper 接口是没有实现类的，当调用接口方法时，接口全限名+方法名拼接字符串作为 key 值，可唯一定位一个 MappedStatement ，举例： com.mybatis3.mappers. StudentDao.findStudentById ，可以唯一找到 namespace 为 com.mybatis3.mappers. StudentDao 下面 id = findStudentById 的 MappedStatement 。在 MyBatis 中，每一个 <select> 、 <insert> 、 <update> 、 <delete> 标签，都会被解析为一个 MappedStatement 对象。\n\nDao 接口里的方法可以重载，但是 Mybatis 的 XML 里面的 ID 不允许重复。\n\nMybatis 版本 3.3.0，亲测如下：\n\n/**\n * Mapper接口里面方法重载\n */\npublic interface StuMapper {\n\n List<Student> getAllStu();\n List<Student> getAllStu(@Param("id") Integer id);\n}\n\n\n然后在 StuMapper.xml 中利用 Mybatis 的动态 sql 就可以实现。\n\n <select id="getAllStu" resultType="com.pojo.Student">\n   select * from student\n  <where>\n   <if test="id != null">\n    id = #{id}\n   </if>\n  </where>\n  </select>\n\n\n能正常运行，并能得到相应的结果，这样就实现了在 Dao 接口中写重载方法。\n\nMybatis 的 Dao 接口可以有多个重载方法，但是多个接口对应的映射必须只有一个，否则启动会报错。\n\n相关 issue ：更正：Dao 接口里的方法可以重载，但是 Mybatis 的 XML 里面的 ID 不允许重复！。\n\nDao 接口的工作原理是 JDK 动态代理，MyBatis 运行时会使用 JDK 动态代理为 Dao 接口生成代理 proxy 对象，代理对象 proxy 会拦截接口方法，转而执行 MappedStatement 所代表的 sql，然后将 sql 执行结果返回。\n\n\n# ==补充：==\n\nDao 接口方法可以重载，但是需要满足以下条件：\n\n 1. 仅有一个无参方法和一个有参方法\n 2. 多个有参方法时，参数数量必须一致。且使用相同的 @Param ，或者使用 param1 这种\n\n测试如下：\n\nPersonDao.java\n\nPerson queryById();\n\nPerson queryById(@Param("id") Long id);\n\nPerson queryById(@Param("id") Long id, @Param("name") String name);\n\n\nPersonMapper.xml\n\n<select id="queryById" resultMap="PersonMap">\n    select\n      id, name, age, address\n    from person\n    <where>\n        <if test="id != null">\n            id = #{id}\n        </if>\n        <if test="name != null and name != \'\'">\n            name = #{name}\n        </if>\n    </where>\n    limit 1\n</select>\n\n\norg.apache.ibatis.scripting.xmltags. DynamicContext. ContextAccessor#getProperty 方法用于获取 <if> 标签中的条件值\n\npublic Object getProperty(Map context, Object target, Object name) {\n  Map map = (Map) target;\n\n  Object result = map.get(name);\n  if (map.containsKey(name) || result != null) {\n    return result;\n  }\n\n  Object parameterObject = map.get(PARAMETER_OBJECT_KEY);\n  if (parameterObject instanceof Map) {\n    return ((Map)parameterObject).get(name);\n  }\n\n  return null;\n}\n\n\nparameterObject 为 map，存放的是 Dao 接口中参数相关信息。\n\n((Map)parameterObject).get(name) 方法如下\n\npublic V get(Object key) {\n  if (!super.containsKey(key)) {\n    throw new BindingException("Parameter \'" + key + "\' not found. Available parameters are " + keySet());\n  }\n  return super.get(key);\n}\n\n\n 1. queryById()方法执行时，parameterObject为 null，getProperty方法返回 null 值，<if>标签获取的所有条件值都为 null，所有条件不成立，动态 sql 可以正常执行。\n 2. queryById(1L)方法执行时，parameterObject为 map，包含了id和param1两个 key 值。当获取<if>标签中name的属性值时，进入((Map)parameterObject).get(name)方法中，map 中 key 不包含name，所以抛出异常。\n 3. queryById(1L,"1")方法执行时，parameterObject中包含id,param1,name,param2四个 key 值，id和name属性都可以获取到，动态 sql 正常执行。\n\n\n# 4、MyBatis 是如何进行分页的？分页插件的原理是什么？\n\n答：\n\n(1) MyBatis 使用 RowBounds 对象进行分页，它是针对 ResultSet 结果集执行的内存分页，而非物理分页；(2) 可以在 sql 内直接书写带有物理分页的参数来完成物理分页功能，(3) 也可以使用分页插件来完成物理分页。\n\n分页插件的基本原理是使用 MyBatis 提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的 sql，然后重写 sql，根据 dialect 方言，添加对应的物理分页语句和物理分页参数。\n\n举例： select _ from student ，拦截 sql 后重写为： select t._ from （select \\* from student）t limit 0，10\n\n\n# 5、简述 MyBatis 的插件运行原理，以及如何编写一个插件\n\n答：\n\nMyBatis 仅可以编写针对 ParameterHandler 、 ResultSetHandler 、 StatementHandler 、 Executor 这 4 种接口的插件，MyBatis 使用 JDK 的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行这 4 种接口对象的方法时，就会进入拦截方法，具体就是 InvocationHandler 的 invoke() 方法，当然，只会拦截那些你指定需要拦截的方法。\n\n实现 MyBatis 的 Interceptor 接口并复写 intercept() 方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，记住，别忘了在配置文件中配置你编写的插件。\n\n\n# 6、MyBatis 执行批量插入，能返回数据库主键列表吗？\n\n答：\n\n能，JDBC 都能，MyBatis 当然也能。\n\n\n# 7、MyBatis 动态 sql 是做什么的？都有哪些动态 sql？能简述一下动态 sql 的执行原理不？\n\n答：\n\nMyBatis 动态 sql 可以让我们在 Xml 映射文件内，以标签的形式编写动态 sql，完成逻辑判断和动态拼接 sql 的功能，MyBatis 提供了 9 种动态 sql 标签 trim|where|set|foreach|if|choose|when|otherwise|bind 。\n\n其执行原理为，使用 OGNL 从 sql 参数对象中计算表达式的值，根据表达式的值动态拼接 sql，以此来完成动态 sql 的功能。\n\n\n# 8、MyBatis 是如何将 sql 执行结果封装为目标对象并返回的？都有哪些映射形式？\n\n答：\n\n第一种是使用 <resultMap> 标签，逐一定义列名和对象属性名之间的映射关系。第二种是使用 sql 列的别名功能，将列别名书写为对象属性名，比如 T_NAME AS NAME，对象属性名一般是 name，小写，但是列名不区分大小写，MyBatis 会忽略列名大小写，智能找到与之对应对象属性名，你甚至可以写成 T_NAME AS NaMe，MyBatis 一样可以正常工作。\n\n有了列名与属性名的映射关系后，MyBatis 通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回，那些找不到映射关系的属性，是无法完成赋值的。\n\n\n# 9、MyBatis 能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别\n\n答：\n\n关联对象查询，有两种实现方式，一种是单独发送一个 sql 去查询关联对象，赋给主对象，然后返回主对象。另一种是使用嵌套查询，嵌套查询的含义为使用 join 查询，一部分列是 A 对象的属性值，另外一部分列是关联对象 B 的属性值，好处是只发一个 sql 查询，就可以把主对象和其关联对象查出来。\n\n那么问题来了，join 查询出来 100 条记录，如何确定主对象是 5 个，而不是 100 个？其去重复的原理是 <resultMap> 标签内的 <id> 子标签，指定了唯一确定一条记录的 id 列，MyBatis 根据 <id> 列值来完成 100 条记录的去重复功能， <id> 可以有多个，代表了联合主键的语意。\n\n同样主对象的关联对象，也是根据这个原理去重复的，尽管一般情况下，只有主对象会有重复记录，关联对象一般不会重复。\n\n举例：下面 join 查询出来 6 条记录，一、二列是 Teacher 对象列，第三列为 Student 对象列，MyBatis 去重复处理后，结果为 1 个老师 6 个学生，而不是 6 个老师 6 个学生。\n\nT_ID   T_NAME    S_ID\n1      teacher   38\n1      teacher   39\n1      teacher   40\n1      teacher   41\n1      teacher   42\n1      teacher   43\n\n\n# 10、MyBatis 是否支持延迟加载？如果支持，它的实现原理是什么？\n\n答：\n\nMyBatis 仅支持 association 关联对象和 collection 关联集合对象的延迟加载，association 指的就是一对一，collection 指的就是一对多查询。在 MyBatis 配置文件中，可以配置是否启用延迟加载 lazyLoadingEnabled=true|false。\n\n它的原理是，使用 CGLIB 创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用 a.getB().getName() ，拦截器 invoke() 方法发现 a.getB() 是 null 值，那么就会单独发送事先保存好的查询关联 B 对象的 sql，把 B 查询上来，然后调用 a.setB(b)，于是 a 的对象 b 属性就有值了，接着完成 a.getB().getName() 方法的调用。这就是延迟加载的基本原理。\n\n当然了，不光是 MyBatis，几乎所有的包括 Hibernate，支持延迟加载的原理都是一样的。\n\n\n# 11、MyBatis 的 Xml 映射文件中，不同的 Xml 映射文件，id 是否可以重复？\n\n答：\n\n不同的 Xml 映射文件，如果配置了 namespace，那么 id 可以重复；如果没有配置 namespace，那么 id 不能重复；毕竟 namespace 不是必须的，只是最佳实践而已。\n\n原因就是 namespace+id 是作为 Map<String, MappedStatement> 的 key 使用的，如果没有 namespace，就剩下 id，那么，id 重复会导致数据互相覆盖。有了 namespace，自然 id 就可以重复，namespace 不同，namespace+id 自然也就不同。\n\n\n# 12、MyBatis 中如何执行批处理？\n\n答：\n\n使用 BatchExecutor 完成批处理。\n\n\n# 13、MyBatis 都有哪些 Executor 执行器？它们之间的区别是什么？\n\n答：\n\nMyBatis 有三种基本的 Executor 执行器，SimpleExecutor 、 ReuseExecutor 、 BatchExecutor 。\n\n**SimpleExecutor ：**每执行一次 update 或 select，就开启一个 Statement 对象，用完立刻关闭 Statement 对象。\n\n**ReuseExecutor ：**执行 update 或 select，以 sql 作为 key 查找 Statement 对象，存在就使用，不存在就创建，用完后，不关闭 Statement 对象，而是放置于 Map<String, Statement>内，供下一次使用。简言之，就是重复使用 Statement 对象。\n\n**BatchExecutor ：**执行 update（没有 select，JDBC 批处理不支持 select），将所有 sql 都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个 Statement 对象，每个 Statement 对象都是 addBatch()完毕后，等待逐一执行 executeBatch()批处理。与 JDBC 批处理相同。\n\n作用范围：Executor 的这些特点，都严格限制在 SqlSession 生命周期范围内。\n\n\n# 14、MyBatis 中如何指定使用哪一种 Executor 执行器？\n\n答：\n\n在 MyBatis 配置文件中，可以指定默认的 ExecutorType 执行器类型，也可以手动给 DefaultSqlSessionFactory 的创建 SqlSession 的方法传递 ExecutorType 类型参数。\n\n\n# 15、MyBatis 是否可以映射 Enum 枚举类？\n\n答：\n\nMyBatis 可以映射枚举类，不单可以映射枚举类，MyBatis 可以映射任何对象到表的一列上。映射方式为自定义一个 TypeHandler ，实现 TypeHandler 的 setParameter() 和 getResult() 接口方法。 TypeHandler 有两个作用，一是完成从 javaType 至 jdbcType 的转换，二是完成 jdbcType 至 javaType 的转换，体现为 setParameter() 和 getResult() 两个方法，分别代表设置 sql 问号占位符参数和获取列查询结果。\n\n\n# 16、MyBatis 映射文件中，如果 A 标签通过 include 引用了 B 标签的内容，请问，B 标签能否定义在 A 标签的后面，还是说必须定义在 A 标签的前面？\n\n答：\n\n虽然 MyBatis 解析 Xml 映射文件是按照顺序解析的，但是，被引用的 B 标签依然可以定义在任何地方，MyBatis 都可以正确识别。\n\n原理是，MyBatis 解析 A 标签，发现 A 标签引用了 B 标签，但是 B 标签尚未解析到，尚不存在，此时，MyBatis 会将 A 标签标记为未解析状态，然后继续解析余下的标签，包含 B 标签，待所有标签解析完毕，MyBatis 会重新解析那些被标记为未解析的标签，此时再解析 A 标签时，B 标签已经存在，A 标签也就可以正常解析完成了。\n\n\n# 17、简述 MyBatis 的 Xml 映射文件和 MyBatis 内部数据结构之间的映射关系？\n\n答：\n\nMyBatis 将所有 Xml 配置信息都封装到 All-In-One 重量级对象 Configuration 内部。在 Xml 映射文件中， <parameterMap> 标签会被解析为 ParameterMap 对象，其每个子元素会被解析为 ParameterMapping 对象。 <resultMap> 标签会被解析为 ResultMap 对象，其每个子元素会被解析为 ResultMapping 对象。每一个 <select>、<insert>、<update>、<delete> 标签均会被解析为 MappedStatement 对象，标签内的 sql 会被解析为 BoundSql 对象。\n\n\n# 18、为什么说 MyBatis 是半自动 ORM 映射工具？它与全自动的区别在哪里？\n\n答：\n\nHibernate 属于全自动 ORM 映射工具，使用 Hibernate 查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取，所以它是全自动的。而 MyBatis 在查询关联对象或关联集合对象时，需要手动编写 sql 来完成，所以，称之为半自动 ORM 映射工具。\n\n面试题看似都很简单，但是想要能正确回答上来，必定是研究过源码且深入的人，而不是仅会使用的人或者用的很熟的人，以上所有面试题及其答案所涉及的内容，在我的 MyBatis 系列博客中都有详细讲解和原理分析。',normalizedContent:'> 本文收集自网络，原出处不明。\n\n\n# 1、#{}和${}的区别是什么？\n\n答：\n\n * ${}是 properties 文件中的变量占位符，它可以用于标签属性值和 sql 内部，属于静态文本替换，比如${driver}会被静态替换为com.mysql.jdbc. driver。\n * #{}是 sql 的参数占位符，mybatis 会将 sql 中的#{}替换为? 号，在 sql 执行前会使用 preparedstatement 的参数设置方法，按序给 sql 的? 号占位符设置参数值，比如 ps.setint(0, parametervalue)，#{item.name} 的取值方式为使用反射从参数对象中获取 item 对象的 name 属性值，相当于 param.getitem().getname()。\n\n\n# 2、xml 映射文件中，除了常见的 select|insert|update|delete 标签之外，还有哪些标签？\n\n答：\n\n还有很多其他的标签， <resultmap> 、 <parametermap> 、 <sql> 、 <include> 、 <selectkey> ，加上动态 sql 的 9 个标签， trim|where|set|foreach|if|choose|when|otherwise|bind 等，其中 <sql> 为 sql 片段标签，通过 <include> 标签引入 sql 片段， <selectkey> 为不支持自增的主键生成策略标签。\n\n\n# 3、最佳实践中，通常一个 xml 映射文件，都会写一个 dao 接口与之对应，请问，这个 dao 接口的工作原理是什么？dao 接口里的方法，参数不同时，方法能重载吗？\n\n答：\n\ndao 接口，就是人们常说的 mapper 接口，接口的全限名，就是映射文件中的 namespace 的值，接口的方法名，就是映射文件中 mappedstatement 的 id 值，接口方法内的参数，就是传递给 sql 的参数。 mapper 接口是没有实现类的，当调用接口方法时，接口全限名+方法名拼接字符串作为 key 值，可唯一定位一个 mappedstatement ，举例： com.mybatis3.mappers. studentdao.findstudentbyid ，可以唯一找到 namespace 为 com.mybatis3.mappers. studentdao 下面 id = findstudentbyid 的 mappedstatement 。在 mybatis 中，每一个 <select> 、 <insert> 、 <update> 、 <delete> 标签，都会被解析为一个 mappedstatement 对象。\n\ndao 接口里的方法可以重载，但是 mybatis 的 xml 里面的 id 不允许重复。\n\nmybatis 版本 3.3.0，亲测如下：\n\n/**\n * mapper接口里面方法重载\n */\npublic interface stumapper {\n\n list<student> getallstu();\n list<student> getallstu(@param("id") integer id);\n}\n\n\n然后在 stumapper.xml 中利用 mybatis 的动态 sql 就可以实现。\n\n <select id="getallstu" resulttype="com.pojo.student">\n   select * from student\n  <where>\n   <if test="id != null">\n    id = #{id}\n   </if>\n  </where>\n  </select>\n\n\n能正常运行，并能得到相应的结果，这样就实现了在 dao 接口中写重载方法。\n\nmybatis 的 dao 接口可以有多个重载方法，但是多个接口对应的映射必须只有一个，否则启动会报错。\n\n相关 issue ：更正：dao 接口里的方法可以重载，但是 mybatis 的 xml 里面的 id 不允许重复！。\n\ndao 接口的工作原理是 jdk 动态代理，mybatis 运行时会使用 jdk 动态代理为 dao 接口生成代理 proxy 对象，代理对象 proxy 会拦截接口方法，转而执行 mappedstatement 所代表的 sql，然后将 sql 执行结果返回。\n\n\n# ==补充：==\n\ndao 接口方法可以重载，但是需要满足以下条件：\n\n 1. 仅有一个无参方法和一个有参方法\n 2. 多个有参方法时，参数数量必须一致。且使用相同的 @param ，或者使用 param1 这种\n\n测试如下：\n\npersondao.java\n\nperson querybyid();\n\nperson querybyid(@param("id") long id);\n\nperson querybyid(@param("id") long id, @param("name") string name);\n\n\npersonmapper.xml\n\n<select id="querybyid" resultmap="personmap">\n    select\n      id, name, age, address\n    from person\n    <where>\n        <if test="id != null">\n            id = #{id}\n        </if>\n        <if test="name != null and name != \'\'">\n            name = #{name}\n        </if>\n    </where>\n    limit 1\n</select>\n\n\norg.apache.ibatis.scripting.xmltags. dynamiccontext. contextaccessor#getproperty 方法用于获取 <if> 标签中的条件值\n\npublic object getproperty(map context, object target, object name) {\n  map map = (map) target;\n\n  object result = map.get(name);\n  if (map.containskey(name) || result != null) {\n    return result;\n  }\n\n  object parameterobject = map.get(parameter_object_key);\n  if (parameterobject instanceof map) {\n    return ((map)parameterobject).get(name);\n  }\n\n  return null;\n}\n\n\nparameterobject 为 map，存放的是 dao 接口中参数相关信息。\n\n((map)parameterobject).get(name) 方法如下\n\npublic v get(object key) {\n  if (!super.containskey(key)) {\n    throw new bindingexception("parameter \'" + key + "\' not found. available parameters are " + keyset());\n  }\n  return super.get(key);\n}\n\n\n 1. querybyid()方法执行时，parameterobject为 null，getproperty方法返回 null 值，<if>标签获取的所有条件值都为 null，所有条件不成立，动态 sql 可以正常执行。\n 2. querybyid(1l)方法执行时，parameterobject为 map，包含了id和param1两个 key 值。当获取<if>标签中name的属性值时，进入((map)parameterobject).get(name)方法中，map 中 key 不包含name，所以抛出异常。\n 3. querybyid(1l,"1")方法执行时，parameterobject中包含id,param1,name,param2四个 key 值，id和name属性都可以获取到，动态 sql 正常执行。\n\n\n# 4、mybatis 是如何进行分页的？分页插件的原理是什么？\n\n答：\n\n(1) mybatis 使用 rowbounds 对象进行分页，它是针对 resultset 结果集执行的内存分页，而非物理分页；(2) 可以在 sql 内直接书写带有物理分页的参数来完成物理分页功能，(3) 也可以使用分页插件来完成物理分页。\n\n分页插件的基本原理是使用 mybatis 提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的 sql，然后重写 sql，根据 dialect 方言，添加对应的物理分页语句和物理分页参数。\n\n举例： select _ from student ，拦截 sql 后重写为： select t._ from （select \\* from student）t limit 0，10\n\n\n# 5、简述 mybatis 的插件运行原理，以及如何编写一个插件\n\n答：\n\nmybatis 仅可以编写针对 parameterhandler 、 resultsethandler 、 statementhandler 、 executor 这 4 种接口的插件，mybatis 使用 jdk 的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行这 4 种接口对象的方法时，就会进入拦截方法，具体就是 invocationhandler 的 invoke() 方法，当然，只会拦截那些你指定需要拦截的方法。\n\n实现 mybatis 的 interceptor 接口并复写 intercept() 方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，记住，别忘了在配置文件中配置你编写的插件。\n\n\n# 6、mybatis 执行批量插入，能返回数据库主键列表吗？\n\n答：\n\n能，jdbc 都能，mybatis 当然也能。\n\n\n# 7、mybatis 动态 sql 是做什么的？都有哪些动态 sql？能简述一下动态 sql 的执行原理不？\n\n答：\n\nmybatis 动态 sql 可以让我们在 xml 映射文件内，以标签的形式编写动态 sql，完成逻辑判断和动态拼接 sql 的功能，mybatis 提供了 9 种动态 sql 标签 trim|where|set|foreach|if|choose|when|otherwise|bind 。\n\n其执行原理为，使用 ognl 从 sql 参数对象中计算表达式的值，根据表达式的值动态拼接 sql，以此来完成动态 sql 的功能。\n\n\n# 8、mybatis 是如何将 sql 执行结果封装为目标对象并返回的？都有哪些映射形式？\n\n答：\n\n第一种是使用 <resultmap> 标签，逐一定义列名和对象属性名之间的映射关系。第二种是使用 sql 列的别名功能，将列别名书写为对象属性名，比如 t_name as name，对象属性名一般是 name，小写，但是列名不区分大小写，mybatis 会忽略列名大小写，智能找到与之对应对象属性名，你甚至可以写成 t_name as name，mybatis 一样可以正常工作。\n\n有了列名与属性名的映射关系后，mybatis 通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回，那些找不到映射关系的属性，是无法完成赋值的。\n\n\n# 9、mybatis 能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别\n\n答：\n\n关联对象查询，有两种实现方式，一种是单独发送一个 sql 去查询关联对象，赋给主对象，然后返回主对象。另一种是使用嵌套查询，嵌套查询的含义为使用 join 查询，一部分列是 a 对象的属性值，另外一部分列是关联对象 b 的属性值，好处是只发一个 sql 查询，就可以把主对象和其关联对象查出来。\n\n那么问题来了，join 查询出来 100 条记录，如何确定主对象是 5 个，而不是 100 个？其去重复的原理是 <resultmap> 标签内的 <id> 子标签，指定了唯一确定一条记录的 id 列，mybatis 根据 <id> 列值来完成 100 条记录的去重复功能， <id> 可以有多个，代表了联合主键的语意。\n\n同样主对象的关联对象，也是根据这个原理去重复的，尽管一般情况下，只有主对象会有重复记录，关联对象一般不会重复。\n\n举例：下面 join 查询出来 6 条记录，一、二列是 teacher 对象列，第三列为 student 对象列，mybatis 去重复处理后，结果为 1 个老师 6 个学生，而不是 6 个老师 6 个学生。\n\nt_id   t_name    s_id\n1      teacher   38\n1      teacher   39\n1      teacher   40\n1      teacher   41\n1      teacher   42\n1      teacher   43\n\n\n# 10、mybatis 是否支持延迟加载？如果支持，它的实现原理是什么？\n\n答：\n\nmybatis 仅支持 association 关联对象和 collection 关联集合对象的延迟加载，association 指的就是一对一，collection 指的就是一对多查询。在 mybatis 配置文件中，可以配置是否启用延迟加载 lazyloadingenabled=true|false。\n\n它的原理是，使用 cglib 创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用 a.getb().getname() ，拦截器 invoke() 方法发现 a.getb() 是 null 值，那么就会单独发送事先保存好的查询关联 b 对象的 sql，把 b 查询上来，然后调用 a.setb(b)，于是 a 的对象 b 属性就有值了，接着完成 a.getb().getname() 方法的调用。这就是延迟加载的基本原理。\n\n当然了，不光是 mybatis，几乎所有的包括 hibernate，支持延迟加载的原理都是一样的。\n\n\n# 11、mybatis 的 xml 映射文件中，不同的 xml 映射文件，id 是否可以重复？\n\n答：\n\n不同的 xml 映射文件，如果配置了 namespace，那么 id 可以重复；如果没有配置 namespace，那么 id 不能重复；毕竟 namespace 不是必须的，只是最佳实践而已。\n\n原因就是 namespace+id 是作为 map<string, mappedstatement> 的 key 使用的，如果没有 namespace，就剩下 id，那么，id 重复会导致数据互相覆盖。有了 namespace，自然 id 就可以重复，namespace 不同，namespace+id 自然也就不同。\n\n\n# 12、mybatis 中如何执行批处理？\n\n答：\n\n使用 batchexecutor 完成批处理。\n\n\n# 13、mybatis 都有哪些 executor 执行器？它们之间的区别是什么？\n\n答：\n\nmybatis 有三种基本的 executor 执行器，simpleexecutor 、 reuseexecutor 、 batchexecutor 。\n\n**simpleexecutor ：**每执行一次 update 或 select，就开启一个 statement 对象，用完立刻关闭 statement 对象。\n\n**reuseexecutor ：**执行 update 或 select，以 sql 作为 key 查找 statement 对象，存在就使用，不存在就创建，用完后，不关闭 statement 对象，而是放置于 map<string, statement>内，供下一次使用。简言之，就是重复使用 statement 对象。\n\n**batchexecutor ：**执行 update（没有 select，jdbc 批处理不支持 select），将所有 sql 都添加到批处理中（addbatch()），等待统一执行（executebatch()），它缓存了多个 statement 对象，每个 statement 对象都是 addbatch()完毕后，等待逐一执行 executebatch()批处理。与 jdbc 批处理相同。\n\n作用范围：executor 的这些特点，都严格限制在 sqlsession 生命周期范围内。\n\n\n# 14、mybatis 中如何指定使用哪一种 executor 执行器？\n\n答：\n\n在 mybatis 配置文件中，可以指定默认的 executortype 执行器类型，也可以手动给 defaultsqlsessionfactory 的创建 sqlsession 的方法传递 executortype 类型参数。\n\n\n# 15、mybatis 是否可以映射 enum 枚举类？\n\n答：\n\nmybatis 可以映射枚举类，不单可以映射枚举类，mybatis 可以映射任何对象到表的一列上。映射方式为自定义一个 typehandler ，实现 typehandler 的 setparameter() 和 getresult() 接口方法。 typehandler 有两个作用，一是完成从 javatype 至 jdbctype 的转换，二是完成 jdbctype 至 javatype 的转换，体现为 setparameter() 和 getresult() 两个方法，分别代表设置 sql 问号占位符参数和获取列查询结果。\n\n\n# 16、mybatis 映射文件中，如果 a 标签通过 include 引用了 b 标签的内容，请问，b 标签能否定义在 a 标签的后面，还是说必须定义在 a 标签的前面？\n\n答：\n\n虽然 mybatis 解析 xml 映射文件是按照顺序解析的，但是，被引用的 b 标签依然可以定义在任何地方，mybatis 都可以正确识别。\n\n原理是，mybatis 解析 a 标签，发现 a 标签引用了 b 标签，但是 b 标签尚未解析到，尚不存在，此时，mybatis 会将 a 标签标记为未解析状态，然后继续解析余下的标签，包含 b 标签，待所有标签解析完毕，mybatis 会重新解析那些被标记为未解析的标签，此时再解析 a 标签时，b 标签已经存在，a 标签也就可以正常解析完成了。\n\n\n# 17、简述 mybatis 的 xml 映射文件和 mybatis 内部数据结构之间的映射关系？\n\n答：\n\nmybatis 将所有 xml 配置信息都封装到 all-in-one 重量级对象 configuration 内部。在 xml 映射文件中， <parametermap> 标签会被解析为 parametermap 对象，其每个子元素会被解析为 parametermapping 对象。 <resultmap> 标签会被解析为 resultmap 对象，其每个子元素会被解析为 resultmapping 对象。每一个 <select>、<insert>、<update>、<delete> 标签均会被解析为 mappedstatement 对象，标签内的 sql 会被解析为 boundsql 对象。\n\n\n# 18、为什么说 mybatis 是半自动 orm 映射工具？它与全自动的区别在哪里？\n\n答：\n\nhibernate 属于全自动 orm 映射工具，使用 hibernate 查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取，所以它是全自动的。而 mybatis 在查询关联对象或关联集合对象时，需要手动编写 sql 来完成，所以，称之为半自动 orm 映射工具。\n\n面试题看似都很简单，但是想要能正确回答上来，必定是研究过源码且深入的人，而不是仅会使用的人或者用的很熟的人，以上所有面试题及其答案所涉及的内容，在我的 mybatis 系列博客中都有详细讲解和原理分析。',charsets:{cjk:!0}},{title:"Spring面试高频问题1~10",frontmatter:{title:"Spring面试高频问题1~10",date:"2023-04-07T16:17:26.000Z",permalink:"/pages/interView/java/002/"},regularPath:"/01.%E9%9D%A2%E7%BB%8F%E5%9B%AD%E5%9C%B0/01.Java/02.Spring%E9%9D%A2%E8%AF%95%E9%AB%98%E9%A2%91%E9%97%AE%E9%A2%98.html",relativePath:"01.面经园地/01.Java/02.Spring面试高频问题.md",key:"v-6fa1b7c2",path:"/pages/interView/java/002/",headers:[{level:2,title:"1. 开发中主要使用 Spring 的什么技术 ?",slug:"_1-开发中主要使用-spring-的什么技术",normalizedTitle:"1. 开发中主要使用 spring 的什么技术 ?",charIndex:21},{level:2,title:"2. 简述 AOP 和 IOC 概念",slug:"_2-简述-aop-和-ioc-概念",normalizedTitle:"2. 简述 aop 和 ioc 概念",charIndex:98},{level:2,title:"3. 在 Spring 中如何配置 Bean ?",slug:"_3-在-spring-中如何配置-bean",normalizedTitle:"3. 在 spring 中如何配置 bean ?",charIndex:477},{level:2,title:"4. IOC 容器对 Bean 的生命周期",slug:"_4-ioc-容器对-bean-的生命周期",normalizedTitle:"4. ioc 容器对 bean 的生命周期",charIndex:566},{level:2,title:"5. Spring 如何整合 Struts2 ?",slug:"_5-spring-如何整合-struts2",normalizedTitle:"5. spring 如何整合 struts2 ?",charIndex:878},{level:2,title:"6. Spring 如何整合 Hibernate",slug:"_6-spring-如何整合-hibernate",normalizedTitle:"6. spring 如何整合 hibernate",charIndex:1155},{level:2,title:"7. Spring MVC 比较 Struts2",slug:"_7-spring-mvc-比较-struts2",normalizedTitle:"7. spring mvc 比较 struts2",charIndex:1375},{level:2,title:"8. Spring MVC 的运行流程",slug:"_8-spring-mvc-的运行流程",normalizedTitle:"8. spring mvc 的运行流程",charIndex:1668},{level:2,title:"9. 说出 Spring MVC 常用的 5 个注解",slug:"_9-说出-spring-mvc-常用的-5-个注解",normalizedTitle:"9. 说出 spring mvc 常用的 5 个注解",charIndex:2370},{level:2,title:"10. 如何使用 SpringMVC 完成 JSON 操作",slug:"_10-如何使用-springmvc-完成-json-操作",normalizedTitle:"10. 如何使用 springmvc 完成 json 操作",charIndex:2480}],headersStr:"1. 开发中主要使用 Spring 的什么技术 ? 2. 简述 AOP 和 IOC 概念 3. 在 Spring 中如何配置 Bean ? 4. IOC 容器对 Bean 的生命周期 5. Spring 如何整合 Struts2 ? 6. Spring 如何整合 Hibernate 7. Spring MVC 比较 Struts2 8. Spring MVC 的运行流程 9. 说出 Spring MVC 常用的 5 个注解 10. 如何使用 SpringMVC 完成 JSON 操作",content:"> 本文收集自网络，原出处不明。\n\n\n# 1. 开发中主要使用 Spring 的什么技术 ?\n\n①. IOC 容器管理各层的组件 ②. 使用 AOP 配置声明式事务 ③. 整合其他框架.\n\n\n# 2. 简述 AOP 和 IOC 概念\n\nAOP: Aspect Oriented Program, 面向(方面)切面的编程;Filter(过滤器) 也是一种 AOP. AOP 是一种新的方法论, 是对传统 OOP(Object-Oriented Programming, 面向对象编程) 的补充. AOP 的主要编程对象是切面(aspect), 而切面模块化横切关注点.可以举例通过事务说明.\n\nIOC: Invert Of Control, 控制反转. 也成为 DI(依赖注入)其思想是反转 资源获取的方向. 传统的资源查找方式要求组件向容器发起请求查找资源.作为 回应, 容器适时的返回资源. 而应用了 IOC 之后, 则是容器主动地将资源推送 给它所管理的组件,组件所要做的仅是选择一种合适的方式来接受资源. 这种行 为也被称为查找的被动形式\n\n\n# 3. 在 Spring 中如何配置 Bean ?\n\nBean 的配置方式: 通过全类名（反射）、通过工厂方法（静态工厂方法 & 实 例工厂方法）、FactoryBean\n\n\n# 4. IOC 容器对 Bean 的生命周期\n\n①. 通过构造器或工厂方法创建 Bean 实例 ②. 为 Bean 的属性设置值和对其他 Bean 的引用 ③ . 将 Bean 实 例 传 递 给 Bean 后 置 处 理 器 的 postProcessBeforeInitialization 方法 ④. 调用 Bean 的初始化方法(init-method) ⑤ . 将 Bean 实 例 传 递 给 Bean 后 置 处 理 器 的 postProcessAfterInitialization 方法 ⑦. Bean 可以使用了 ⑧. 当容器关闭时, 调用 Bean 的销毁方法(destroy-method)\n\n\n# 5. Spring 如何整合 Struts2 ?\n\n整合 Struts2, 即由 IOC 容器管理 Struts2 的 Action:\n\n> 安装 Spring 插件: 把 struts2-spring-plugin-2.2.1.jar 复制到 当前 WEB 应用的 WEB-INF/lib 目录下 在 Spring 的配置文件中配置 Struts2 的 Action 实例 在 Struts 配置文件中配置 action, 但其 class 属性不再指向该 Action 的实现类, 而是指向 Spring 容器中 Action 实例的 ID\n\n\n# 6. Spring 如何整合 Hibernate\n\n整合 Hibernate, 即由 IOC 容器生成 SessionFactory 对象, 并使用 Spring 的声明式事务\n\n> 利用 LocalSessionFactoryBean 工厂 Bean, 声明一个使用 XML 映 射文件的 SessionFactory 实例. 利用 HibernateTransactionManager 配置 Hibernate 的事务管理器\n\n\n# 7. Spring MVC 比较 Struts2\n\n①. Spring MVC 的入口是 Servlet, 而 Struts2 是 Filter ②. Spring MVC 会稍微比 Struts2 快些. Spring MVC 是基于方法设计, 而 Sturts2 是基于类, 每次发一次请求都会实例一个 Action. ③. Spring MVC 使用更加简洁, 开发效率 Spring MVC 确实比 struts2 高: 支持 JSR303, 处理 ajax 的请求更方便 ④. Struts2 的 OGNL 表达式使页面的开发效率相比 Spring MVC 更高些.\n\n\n# 8. Spring MVC 的运行流程\n\n①. 在整个 Spring MVC 框架中， DispatcherServlet 处于核心位置，负 责协调和组织不同组件以完成请求处理并返回响应的工作 ②. SpringMVC 处理请求过程：\n\n> 若一个请求匹配 DispatcherServlet 的请求映射路径(在 web.xml 中指定), WEB 容器将该请求转交给 DispatcherServlet 处理 DispatcherServlet 接收到请求后, 将根据请求信息(包括 URL、HTTP 方法、请求头、请求参数、Cookie 等)及 HandlerMapping 的配置找到处理请求 的处理器(Handler). 可将 HandlerMapping 看成路由控制器，将 Handler 看成 目标主机。 当 DispatcherServlet 根据 HandlerMapping 得到对应当前请求的 Handler 后，通过 HandlerAdapter 对 Handler 进行封装，再以统一的适配器 接口调用 Handler。 处 理 器 完 成 业 务 逻 辑 的 处 理 后 将 返 回 一 个 ModelAndView 给 DispatcherServlet, ModelAndView 包含了视图逻辑名和模型数据信息 DispatcherServlet 借助 ViewResoler 完成逻辑视图名到真实视图 对象的解析 得到真实视图对象 View 后, DispatcherServlet 使用这个 View 对 ModelAndView 中的模型数据进行视图渲染\n\n\n# 9. 说出 Spring MVC 常用的 5 个注解\n\n@RequestMapping 、 @PathVariable 、 @RequestParam 、 @RequestBoy 、 @ResponseBody\n\n\n# 10. 如何使用 SpringMVC 完成 JSON 操作\n\n①. 配置 MappingJacksonHttpMessageConverter ②. 使用 @RequestBody 注解或 ResponseEntity 作为返回值",normalizedContent:"> 本文收集自网络，原出处不明。\n\n\n# 1. 开发中主要使用 spring 的什么技术 ?\n\n①. ioc 容器管理各层的组件 ②. 使用 aop 配置声明式事务 ③. 整合其他框架.\n\n\n# 2. 简述 aop 和 ioc 概念\n\naop: aspect oriented program, 面向(方面)切面的编程;filter(过滤器) 也是一种 aop. aop 是一种新的方法论, 是对传统 oop(object-oriented programming, 面向对象编程) 的补充. aop 的主要编程对象是切面(aspect), 而切面模块化横切关注点.可以举例通过事务说明.\n\nioc: invert of control, 控制反转. 也成为 di(依赖注入)其思想是反转 资源获取的方向. 传统的资源查找方式要求组件向容器发起请求查找资源.作为 回应, 容器适时的返回资源. 而应用了 ioc 之后, 则是容器主动地将资源推送 给它所管理的组件,组件所要做的仅是选择一种合适的方式来接受资源. 这种行 为也被称为查找的被动形式\n\n\n# 3. 在 spring 中如何配置 bean ?\n\nbean 的配置方式: 通过全类名（反射）、通过工厂方法（静态工厂方法 & 实 例工厂方法）、factorybean\n\n\n# 4. ioc 容器对 bean 的生命周期\n\n①. 通过构造器或工厂方法创建 bean 实例 ②. 为 bean 的属性设置值和对其他 bean 的引用 ③ . 将 bean 实 例 传 递 给 bean 后 置 处 理 器 的 postprocessbeforeinitialization 方法 ④. 调用 bean 的初始化方法(init-method) ⑤ . 将 bean 实 例 传 递 给 bean 后 置 处 理 器 的 postprocessafterinitialization 方法 ⑦. bean 可以使用了 ⑧. 当容器关闭时, 调用 bean 的销毁方法(destroy-method)\n\n\n# 5. spring 如何整合 struts2 ?\n\n整合 struts2, 即由 ioc 容器管理 struts2 的 action:\n\n> 安装 spring 插件: 把 struts2-spring-plugin-2.2.1.jar 复制到 当前 web 应用的 web-inf/lib 目录下 在 spring 的配置文件中配置 struts2 的 action 实例 在 struts 配置文件中配置 action, 但其 class 属性不再指向该 action 的实现类, 而是指向 spring 容器中 action 实例的 id\n\n\n# 6. spring 如何整合 hibernate\n\n整合 hibernate, 即由 ioc 容器生成 sessionfactory 对象, 并使用 spring 的声明式事务\n\n> 利用 localsessionfactorybean 工厂 bean, 声明一个使用 xml 映 射文件的 sessionfactory 实例. 利用 hibernatetransactionmanager 配置 hibernate 的事务管理器\n\n\n# 7. spring mvc 比较 struts2\n\n①. spring mvc 的入口是 servlet, 而 struts2 是 filter ②. spring mvc 会稍微比 struts2 快些. spring mvc 是基于方法设计, 而 sturts2 是基于类, 每次发一次请求都会实例一个 action. ③. spring mvc 使用更加简洁, 开发效率 spring mvc 确实比 struts2 高: 支持 jsr303, 处理 ajax 的请求更方便 ④. struts2 的 ognl 表达式使页面的开发效率相比 spring mvc 更高些.\n\n\n# 8. spring mvc 的运行流程\n\n①. 在整个 spring mvc 框架中， dispatcherservlet 处于核心位置，负 责协调和组织不同组件以完成请求处理并返回响应的工作 ②. springmvc 处理请求过程：\n\n> 若一个请求匹配 dispatcherservlet 的请求映射路径(在 web.xml 中指定), web 容器将该请求转交给 dispatcherservlet 处理 dispatcherservlet 接收到请求后, 将根据请求信息(包括 url、http 方法、请求头、请求参数、cookie 等)及 handlermapping 的配置找到处理请求 的处理器(handler). 可将 handlermapping 看成路由控制器，将 handler 看成 目标主机。 当 dispatcherservlet 根据 handlermapping 得到对应当前请求的 handler 后，通过 handleradapter 对 handler 进行封装，再以统一的适配器 接口调用 handler。 处 理 器 完 成 业 务 逻 辑 的 处 理 后 将 返 回 一 个 modelandview 给 dispatcherservlet, modelandview 包含了视图逻辑名和模型数据信息 dispatcherservlet 借助 viewresoler 完成逻辑视图名到真实视图 对象的解析 得到真实视图对象 view 后, dispatcherservlet 使用这个 view 对 modelandview 中的模型数据进行视图渲染\n\n\n# 9. 说出 spring mvc 常用的 5 个注解\n\n@requestmapping 、 @pathvariable 、 @requestparam 、 @requestboy 、 @responsebody\n\n\n# 10. 如何使用 springmvc 完成 json 操作\n\n①. 配置 mappingjacksonhttpmessageconverter ②. 使用 @requestbody 注解或 responseentity 作为返回值",charsets:{cjk:!0}},{title:"Java架构师面试高频问题1~18",frontmatter:{title:"Java架构师面试高频问题1~18",date:"2023-04-16T16:03:17.000Z",permalink:"/pages/interView/java/004/"},regularPath:"/01.%E9%9D%A2%E7%BB%8F%E5%9B%AD%E5%9C%B0/01.Java/04.Java%E6%9E%B6%E6%9E%84%E5%B8%88%E9%9D%A2%E8%AF%95%E9%AB%98%E9%A2%91%E9%97%AE%E9%A2%981-18.html",relativePath:"01.面经园地/01.Java/04.Java架构师面试高频问题1-18.md",key:"v-0741303c",path:"/pages/interView/java/004/",headers:[{level:3,title:"1、Java J2EE的体系结构是什么？",slug:"_1、java-j2ee的体系结构是什么",normalizedTitle:"1、java j2ee的体系结构是什么？",charIndex:2},{level:4,title:"完整答案",slug:"完整答案",normalizedTitle:"完整答案",charIndex:262},{level:3,title:"2、ETL流程是什么？",slug:"_2、etl流程是什么",normalizedTitle:"2、etl流程是什么？",charIndex:510},{level:3,title:"3、Java中的函数式编程是什么？",slug:"_3、java中的函数式编程是什么",normalizedTitle:"3、java中的函数式编程是什么？",charIndex:647},{level:3,title:"4、JDBC 和 Hibernate 的区别是什么？",slug:"_4、jdbc-和-hibernate-的区别是什么",normalizedTitle:"4、jdbc 和 hibernate 的区别是什么？",charIndex:926},{level:3,title:"5、Hibernate架构是什么？",slug:"_5、hibernate架构是什么",normalizedTitle:"5、hibernate架构是什么？",charIndex:1179},{level:3,title:"6、Hibernate架构的一些基本要素是什么？",slug:"_6、hibernate架构的一些基本要素是什么",normalizedTitle:"6、hibernate架构的一些基本要素是什么？",charIndex:1244},{level:3,title:"7、如果发生数据库死锁，应该将如何处理？",slug:"_7、如果发生数据库死锁-应该将如何处理",normalizedTitle:"7、如果发生数据库死锁，应该将如何处理？",charIndex:1532},{level:3,title:"8、存储会话信息或在请求中使用会话信息会更好吗？",slug:"_8、存储会话信息或在请求中使用会话信息会更好吗",normalizedTitle:"8、存储会话信息或在请求中使用会话信息会更好吗？",charIndex:1677},{level:3,title:"9、Hibernate中的一级缓存和二级缓存有什么区别？",slug:"_9、hibernate中的一级缓存和二级缓存有什么区别",normalizedTitle:"9、hibernate中的一级缓存和二级缓存有什么区别？",charIndex:1790},{level:3,title:"10、如何避免Hibernate延迟初始化异常？",slug:"_10、如何避免hibernate延迟初始化异常",normalizedTitle:"10、如何避免hibernate延迟初始化异常？",charIndex:1894},{level:3,title:"11、Java 中的 Lambda 表达式是什么？",slug:"_11、java-中的-lambda-表达式是什么",normalizedTitle:"11、java 中的 lambda 表达式是什么？",charIndex:2079},{level:3,title:"12、Lambda表达式的优点是什么？",slug:"_12、lambda表达式的优点是什么",normalizedTitle:"12、lambda表达式的优点是什么？",charIndex:2312},{level:3,title:"13、RPC或远程过程调用是什么？",slug:"_13、rpc或远程过程调用是什么",normalizedTitle:"13、rpc或远程过程调用是什么？",charIndex:2510},{level:3,title:"14、在 Java 中使用 Spring Framework有什么好处？",slug:"_14、在-java-中使用-spring-framework有什么好处",normalizedTitle:"14、在 java 中使用 spring framework有什么好处？",charIndex:2693},{level:3,title:"15、数据库分片是什么？",slug:"_15、数据库分片是什么",normalizedTitle:"15、数据库分片是什么？",charIndex:2936},{level:3,title:"16、网络服务(web services)是什么？",slug:"_16、网络服务-web-services-是什么",normalizedTitle:"16、网络服务(web services)是什么？",charIndex:3039},{level:3,title:"17、SOAP 服务和Rest服务的区别？",slug:"_17、soap-服务和rest服务的区别",normalizedTitle:"17、soap 服务和rest服务的区别？",charIndex:3179},{level:3,title:"18、为什么 Web 服务使用 HTTP 作为通信协议？",slug:"_18、为什么-web-服务使用-http-作为通信协议",normalizedTitle:"18、为什么 web 服务使用 http 作为通信协议？",charIndex:3370},{level:3,title:"19、HTTP 和 HTTPS 有什么区别？",slug:"_19、http-和-https-有什么区别",normalizedTitle:"19、http 和 https 有什么区别？",charIndex:3502},{level:3,title:"20、TCP/IP的工作原理是什么？",slug:"_20、tcp-ip的工作原理是什么",normalizedTitle:"20、tcp/ip的工作原理是什么？",charIndex:3655}],headersStr:"1、Java J2EE的体系结构是什么？ 完整答案 2、ETL流程是什么？ 3、Java中的函数式编程是什么？ 4、JDBC 和 Hibernate 的区别是什么？ 5、Hibernate架构是什么？ 6、Hibernate架构的一些基本要素是什么？ 7、如果发生数据库死锁，应该将如何处理？ 8、存储会话信息或在请求中使用会话信息会更好吗？ 9、Hibernate中的一级缓存和二级缓存有什么区别？ 10、如何避免Hibernate延迟初始化异常？ 11、Java 中的 Lambda 表达式是什么？ 12、Lambda表达式的优点是什么？ 13、RPC或远程过程调用是什么？ 14、在 Java 中使用 Spring Framework有什么好处？ 15、数据库分片是什么？ 16、网络服务(web services)是什么？ 17、SOAP 服务和Rest服务的区别？ 18、为什么 Web 服务使用 HTTP 作为通信协议？ 19、HTTP 和 HTTPS 有什么区别？ 20、TCP/IP的工作原理是什么？",content:"# 1、Java J2EE的体系结构是什么？\n\nJ2EE 是 Java 2 企业版，它为开发和实现 Java 企业应用程序提供了一种便捷的方式。J2EE 架构是一个三层架构，分别是客户端、中间层和企业数据层。客户端层是用于与客户端或用户交互的交互媒介。它由 Web 客户端和应用程序客户端组成。中间层定义了功能单元。数据层用于存储目的。它以关系数据库、容器、组件和服务的形式使用。 具体来说，J2EE 架构由四层组成； 客户端、Web、企业 Java Bean 和企业信息层，但中间层包含两个 Web+ EJB 层。\n\n# 完整答案\n\nJ2EE 是 Java 2 企业版，它为开发和实现 Java 企业应用程序提供了一种便捷的方式。J2EE 架构是一个三层架构，分别是客户端、中间层和企业数据层。客户端层是用于与客户端或用户交互的交互媒介。它由 Web 客户端和应用程序客户端组成。 中间层定义了功能单元。 数据层用于存储目的。它以关系数据库、容器、组件和服务的形式使用。\n\n具体来说，J2EE 架构由四层组成； 客户端、Web、企业 Java Bean 和企业信息层，但中间层包含两个 Web+ EJB 层。\n\n\n# 2、ETL流程是什么？\n\nETL代表提取、传输和加载。它是从多个资源中提取数据，然后通过执行连接、计算等操作将其传输并加载到数据仓库系统中的过程。在这个过程中，我们需要开发人员、分析师、测试人员等各个利益相关者的积极投入。这是一个技术上具有挑战性的过程。 完整答案\n\n\n# 3、Java中的函数式编程是什么？\n\nJava 支持函数式编程。从 Java 8 开始，可以使用 Lambda 表达式进行函数式编程。还可以使用代码来声明函数范式。函数式编程是一种编程方法，其中计算可以编码为函数。这些函数是称为 lambda 函数的数学函数。 函数式编程是声明式的，这意味着我们不需要描述计算逻辑的控制流程。下面的程序使用 lambda 表达式在 Java 中实现函数式编程： Test.java //Java program to demonstrate the functional programming i... 完整答案\n\n\n# 4、JDBC 和 Hibernate 的区别是什么？\n\nJDBC(Java 数据库连接)是一种在 Java 应用程序和数据库之间创建连接的编程接口。它在 Java 程序和数据库之间建立链接，以便可以从 Java 代码发送数据并将其存储在数据库中。Hibernate 是一个开源的 ORM(对象关系映射)框架。它允许开发独立于数据库工具的对象并创建独立的持久性逻辑。基本上，它简化了 Java 应用程序和数据库之间的交互过程。它实现了 JPA(Java Persistence API)。 完整答案\n\n\n# 5、Hibernate架构是什么？\n\nHibernate架构由以下四层组成： 应用层框架层反手api层数据库层 完整答案\n\n\n# 6、Hibernate架构的一些基本要素是什么？\n\n以下是 Hibernate 架构的元素： 会话工厂会话事务连接提供者事务工厂 会话工厂SessionFactory保存会话对象。它包含二级数据缓存(可选)。它使用 org.hibernate.SessionFactory 接口提供工厂方法来访问会话对象。 会话会话对象充当应用程序和数据库之间的媒介。它为应用程序提供了一个接口来访问数据库中存储的数据。Session 对象是一个短暂的对象，它包含了 JDBC 连接。它是会话的不同元素的工厂，例如查询、事务、标准。它拥有一级数据缓存(强制)。org... 完整答案\n\n\n# 7、如果发生数据库死锁，应该将如何处理？\n\n死锁是多个请求尝试获取其锁的情况。为了防止数据库进入这种状态，一般会做一个队列来验证每个请求，然后再将其转发到数据库。除了上面提到的策略，还可以遵循以下策略： 可以通过使用更少的游标来避免锁定表来避免数据库死锁。通过使用小事务 完整答案\n\n\n# 8、存储会话信息或在请求中使用会话信息会更好吗？\n\n存储会话信息会比在请求中使用会话信息更好。因为在请求中使用会话信息可能会被拦截和易受攻击。cookie 只能由相应的域访问，并确保用户传递正确的会话信息。 完整答案\n\n\n# 9、Hibernate中的一级缓存和二级缓存有什么区别？\n\n一级缓存是在会话级别维护的，只能对会话进行访问。相比之下，二级缓存维护在 SessionFactory 级别，可供所有会话使用。 完整答案\n\n\n# 10、如何避免Hibernate延迟初始化异常？\n\n按照以下步骤避免 Java 中的 Lazyinitializationexception ： 在Hibernate配置文件中设置lazy=false。在映射处设置 @Basic(fetch=FetchType.EAGER)。确保在关闭会话之前访问依赖对象。在 HQL 中使用 Fetch Join。 完整答案\n\n\n# 11、Java 中的 Lambda 表达式是什么？\n\nJava 从 Java 8 开始支持Lambda 表达式。它是一种短块代码，它接受参数并返回一个值。Lambda 表达式与方法非常相似。方法和 Lambda 表达式的区别在于我们不需要写它的名字；我们可以在方法体中直接实现它们。 lambda 表达式的基本语法如下： parameter -> expression (parameter1, parameter2) -> expression 完整答案\n\n\n# 12、Lambda表达式的优点是什么？\n\n以下是使用 lambda 表达式的一些主要优点： 它减少了代码行数：通过编写 Lambda 表达式，与模棱两可的方法相比，可以通过编写更少的代码行来执行任务。它增加了可读性。它消除了阴影变量。它提供函数式编程。它增加了代码的可重用性。T 提供增强的迭代语法。它提供了简化的变量范围。它允许减少 JAR 文件的大小。它支持并行处理机会。 完整答案\n\n\n# 13、RPC或远程过程调用是什么？\n\nRPC或远程过程调用是在基于客户端的 Web 应用程序中使用的进程间通信技术。它们也称为子程序调用或函数调用。当客户端发出请求时，RPC会对其进行翻译并将其发送到服务器。通常，这些请求是对远程服务器的函数调用或过程。当服务器收到请求时，它会响应客户端； 客户端在此过程中被阻塞，只有在服务器完成执行时才恢复。 完整答案\n\n\n# 14、在 Java 中使用 Spring Framework有什么好处？\n\nSpring 是一个强大的 Java 框架，用于开发企业 Java 应用程序。以下是使用 Spring 框架的一些主要好处： 它为管理业务对象和公开它们的服务提供了支持。它通过使用接口和预定义的类来支持简单且优化的编程实践。它提供对 POJO 和 POJI 模型编程的支持。它是模块化的，可以选择项目的单个部分来处理。它有助于基于 XML 和基于注释的配置。它支持可以轻松激活的轻量级容器。 完整答案\n\n\n# 15、数据库分片是什么？\n\n分片是对数据库或搜索引擎中的数据进行分区的过程。在这个过程中，数据被分成小块或碎片。分片可以是一个表。Postgres 模式或数据库服务器实例上保存的数据库。 完整答案\n\n\n# 16、网络服务(web services)是什么？\n\nWeb 服务是使用 HTTP 协议通过 Internet 进行通信的客户端和服务器应用程序。它们提供了一种方便的机制来在软件应用程序和框架之间进行互操作。还可以将 Web 服务理解为两个设备之间的通信方法。 完整答案\n\n\n# 17、SOAP 服务和Rest服务的区别？\n\nSOAP 代表简单对象访问协议，而 Rest 代表 代表性状态转移。 SOAP 是在 Rest 概念出现之前设计的协议； 它主要用于确保程序可以轻松地在不同平台和编程语言上传输数据。 相比之下，Rest 设计用于在特定设备上处理媒体组件、文件和对象。使用 REST 原则设计的服务称为 RestFul Web 服务。 完整答案\n\n\n# 18、为什么 Web 服务使用 HTTP 作为通信协议？\n\nHTTP 是通过 Web 进行通信的首选方式。如今，大多数应用程序都设计为通过 HTTP 协议进行通信。因此，通过 HTTP 使用 Web 服务可以使应用程序可以从各种应用程序中访问。 完整答案\n\n\n# 19、HTTP 和 HTTPS 有什么区别？\n\nHTTPs 是 HTTP 协议的扩展版本。HTTP 和 HTTPS 之间的主要区别在于 SSL 证书。HTTPs 为应用程序提供了额外的安全性。对于那些保留用户敏感信息(例如信用卡详细信息)的 Web 应用程序，HTTPs 变得非常有用。 完整答案\n\n\n# 20、TCP/IP的工作原理是什么？\n\nTCP/IP 模型的开发是为了在设备之间提供高效和准确的数据传输。它将消息分成几个小数据包，以避免在长文件中传输失败。万一在传输过程中遇到问题，它将从数据包中断的地方重新开始发送数据包，并在目标端口重新组合数据包。每条路线都可以采用不同的路线到达目的地。因此，它提供了安全和不间断的数据传输。 完整答案",normalizedContent:"# 1、java j2ee的体系结构是什么？\n\nj2ee 是 java 2 企业版，它为开发和实现 java 企业应用程序提供了一种便捷的方式。j2ee 架构是一个三层架构，分别是客户端、中间层和企业数据层。客户端层是用于与客户端或用户交互的交互媒介。它由 web 客户端和应用程序客户端组成。中间层定义了功能单元。数据层用于存储目的。它以关系数据库、容器、组件和服务的形式使用。 具体来说，j2ee 架构由四层组成； 客户端、web、企业 java bean 和企业信息层，但中间层包含两个 web+ ejb 层。\n\n# 完整答案\n\nj2ee 是 java 2 企业版，它为开发和实现 java 企业应用程序提供了一种便捷的方式。j2ee 架构是一个三层架构，分别是客户端、中间层和企业数据层。客户端层是用于与客户端或用户交互的交互媒介。它由 web 客户端和应用程序客户端组成。 中间层定义了功能单元。 数据层用于存储目的。它以关系数据库、容器、组件和服务的形式使用。\n\n具体来说，j2ee 架构由四层组成； 客户端、web、企业 java bean 和企业信息层，但中间层包含两个 web+ ejb 层。\n\n\n# 2、etl流程是什么？\n\netl代表提取、传输和加载。它是从多个资源中提取数据，然后通过执行连接、计算等操作将其传输并加载到数据仓库系统中的过程。在这个过程中，我们需要开发人员、分析师、测试人员等各个利益相关者的积极投入。这是一个技术上具有挑战性的过程。 完整答案\n\n\n# 3、java中的函数式编程是什么？\n\njava 支持函数式编程。从 java 8 开始，可以使用 lambda 表达式进行函数式编程。还可以使用代码来声明函数范式。函数式编程是一种编程方法，其中计算可以编码为函数。这些函数是称为 lambda 函数的数学函数。 函数式编程是声明式的，这意味着我们不需要描述计算逻辑的控制流程。下面的程序使用 lambda 表达式在 java 中实现函数式编程： test.java //java program to demonstrate the functional programming i... 完整答案\n\n\n# 4、jdbc 和 hibernate 的区别是什么？\n\njdbc(java 数据库连接)是一种在 java 应用程序和数据库之间创建连接的编程接口。它在 java 程序和数据库之间建立链接，以便可以从 java 代码发送数据并将其存储在数据库中。hibernate 是一个开源的 orm(对象关系映射)框架。它允许开发独立于数据库工具的对象并创建独立的持久性逻辑。基本上，它简化了 java 应用程序和数据库之间的交互过程。它实现了 jpa(java persistence api)。 完整答案\n\n\n# 5、hibernate架构是什么？\n\nhibernate架构由以下四层组成： 应用层框架层反手api层数据库层 完整答案\n\n\n# 6、hibernate架构的一些基本要素是什么？\n\n以下是 hibernate 架构的元素： 会话工厂会话事务连接提供者事务工厂 会话工厂sessionfactory保存会话对象。它包含二级数据缓存(可选)。它使用 org.hibernate.sessionfactory 接口提供工厂方法来访问会话对象。 会话会话对象充当应用程序和数据库之间的媒介。它为应用程序提供了一个接口来访问数据库中存储的数据。session 对象是一个短暂的对象，它包含了 jdbc 连接。它是会话的不同元素的工厂，例如查询、事务、标准。它拥有一级数据缓存(强制)。org... 完整答案\n\n\n# 7、如果发生数据库死锁，应该将如何处理？\n\n死锁是多个请求尝试获取其锁的情况。为了防止数据库进入这种状态，一般会做一个队列来验证每个请求，然后再将其转发到数据库。除了上面提到的策略，还可以遵循以下策略： 可以通过使用更少的游标来避免锁定表来避免数据库死锁。通过使用小事务 完整答案\n\n\n# 8、存储会话信息或在请求中使用会话信息会更好吗？\n\n存储会话信息会比在请求中使用会话信息更好。因为在请求中使用会话信息可能会被拦截和易受攻击。cookie 只能由相应的域访问，并确保用户传递正确的会话信息。 完整答案\n\n\n# 9、hibernate中的一级缓存和二级缓存有什么区别？\n\n一级缓存是在会话级别维护的，只能对会话进行访问。相比之下，二级缓存维护在 sessionfactory 级别，可供所有会话使用。 完整答案\n\n\n# 10、如何避免hibernate延迟初始化异常？\n\n按照以下步骤避免 java 中的 lazyinitializationexception ： 在hibernate配置文件中设置lazy=false。在映射处设置 @basic(fetch=fetchtype.eager)。确保在关闭会话之前访问依赖对象。在 hql 中使用 fetch join。 完整答案\n\n\n# 11、java 中的 lambda 表达式是什么？\n\njava 从 java 8 开始支持lambda 表达式。它是一种短块代码，它接受参数并返回一个值。lambda 表达式与方法非常相似。方法和 lambda 表达式的区别在于我们不需要写它的名字；我们可以在方法体中直接实现它们。 lambda 表达式的基本语法如下： parameter -> expression (parameter1, parameter2) -> expression 完整答案\n\n\n# 12、lambda表达式的优点是什么？\n\n以下是使用 lambda 表达式的一些主要优点： 它减少了代码行数：通过编写 lambda 表达式，与模棱两可的方法相比，可以通过编写更少的代码行来执行任务。它增加了可读性。它消除了阴影变量。它提供函数式编程。它增加了代码的可重用性。t 提供增强的迭代语法。它提供了简化的变量范围。它允许减少 jar 文件的大小。它支持并行处理机会。 完整答案\n\n\n# 13、rpc或远程过程调用是什么？\n\nrpc或远程过程调用是在基于客户端的 web 应用程序中使用的进程间通信技术。它们也称为子程序调用或函数调用。当客户端发出请求时，rpc会对其进行翻译并将其发送到服务器。通常，这些请求是对远程服务器的函数调用或过程。当服务器收到请求时，它会响应客户端； 客户端在此过程中被阻塞，只有在服务器完成执行时才恢复。 完整答案\n\n\n# 14、在 java 中使用 spring framework有什么好处？\n\nspring 是一个强大的 java 框架，用于开发企业 java 应用程序。以下是使用 spring 框架的一些主要好处： 它为管理业务对象和公开它们的服务提供了支持。它通过使用接口和预定义的类来支持简单且优化的编程实践。它提供对 pojo 和 poji 模型编程的支持。它是模块化的，可以选择项目的单个部分来处理。它有助于基于 xml 和基于注释的配置。它支持可以轻松激活的轻量级容器。 完整答案\n\n\n# 15、数据库分片是什么？\n\n分片是对数据库或搜索引擎中的数据进行分区的过程。在这个过程中，数据被分成小块或碎片。分片可以是一个表。postgres 模式或数据库服务器实例上保存的数据库。 完整答案\n\n\n# 16、网络服务(web services)是什么？\n\nweb 服务是使用 http 协议通过 internet 进行通信的客户端和服务器应用程序。它们提供了一种方便的机制来在软件应用程序和框架之间进行互操作。还可以将 web 服务理解为两个设备之间的通信方法。 完整答案\n\n\n# 17、soap 服务和rest服务的区别？\n\nsoap 代表简单对象访问协议，而 rest 代表 代表性状态转移。 soap 是在 rest 概念出现之前设计的协议； 它主要用于确保程序可以轻松地在不同平台和编程语言上传输数据。 相比之下，rest 设计用于在特定设备上处理媒体组件、文件和对象。使用 rest 原则设计的服务称为 restful web 服务。 完整答案\n\n\n# 18、为什么 web 服务使用 http 作为通信协议？\n\nhttp 是通过 web 进行通信的首选方式。如今，大多数应用程序都设计为通过 http 协议进行通信。因此，通过 http 使用 web 服务可以使应用程序可以从各种应用程序中访问。 完整答案\n\n\n# 19、http 和 https 有什么区别？\n\nhttps 是 http 协议的扩展版本。http 和 https 之间的主要区别在于 ssl 证书。https 为应用程序提供了额外的安全性。对于那些保留用户敏感信息(例如信用卡详细信息)的 web 应用程序，https 变得非常有用。 完整答案\n\n\n# 20、tcp/ip的工作原理是什么？\n\ntcp/ip 模型的开发是为了在设备之间提供高效和准确的数据传输。它将消息分成几个小数据包，以避免在长文件中传输失败。万一在传输过程中遇到问题，它将从数据包中断的地方重新开始发送数据包，并在目标端口重新组合数据包。每条路线都可以采用不同的路线到达目的地。因此，它提供了安全和不间断的数据传输。 完整答案",charsets:{cjk:!0}},{title:"DotNet面试题汇总",frontmatter:{title:"DotNet面试题汇总",date:"2023-04-26T11:03:17.000Z",permalink:"/pages/interView/DotNet/001/"},regularPath:"/01.%E9%9D%A2%E7%BB%8F%E5%9B%AD%E5%9C%B0/02.DotNet/001.Dotnet%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB1.html",relativePath:"01.面经园地/02.DotNet/001.Dotnet面试题汇总1.md",key:"v-1b7ac458",path:"/pages/interView/DotNet/001/",headers:[{level:4,title:"1.锁表原因及如何处理",slug:"_1-锁表原因及如何处理",normalizedTitle:"1.锁表原因及如何处理",charIndex:2},{level:4,title:"2.乐观锁和悲观锁的区别",slug:"_2-乐观锁和悲观锁的区别",normalizedTitle:"2.乐观锁和悲观锁的区别",charIndex:385},{level:4,title:"3.缓存",slug:"_3-缓存",normalizedTitle:"3.缓存",charIndex:1299},{level:4,title:"4.MVC特点",slug:"_4-mvc特点",normalizedTitle:"4.mvc特点",charIndex:1556},{level:4,title:"5.大数据存储解决方案",slug:"_5-大数据存储解决方案",normalizedTitle:"5.大数据存储解决方案",charIndex:1897},{level:4,title:"6.redis容灾策略",slug:"_6-redis容灾策略",normalizedTitle:"6.redis容灾策略",charIndex:2306},{level:4,title:"7.Redis常用五大数据类型",slug:"_7-redis常用五大数据类型",normalizedTitle:"7.redis常用五大数据类型",charIndex:2759},{level:3,title:"Solr",slug:"solr",normalizedTitle:"solr",charIndex:3312},{level:4,title:"8.rabbitMQ汇总",slug:"_8-rabbitmq汇总",normalizedTitle:"8.rabbitmq汇总",charIndex:3320},{level:5,title:"rabbitMQ特点",slug:"rabbitmq特点",normalizedTitle:"rabbitmq特点",charIndex:3336},{level:5,title:"RabbitMQ概念",slug:"rabbitmq概念",normalizedTitle:"rabbitmq概念",charIndex:4015},{level:5,title:"消息回执（Message acknowledgment）",slug:"消息回执-message-acknowledgment",normalizedTitle:"消息回执（message acknowledgment）",charIndex:4282},{level:5,title:"消息持久化（Message durability）",slug:"消息持久化-message-durability",normalizedTitle:"消息持久化（message durability）",charIndex:4618},{level:5,title:"交换器 Exchange",slug:"交换器-exchange",normalizedTitle:"交换器 exchange",charIndex:4857},{level:5,title:"routing key",slug:"routing-key",normalizedTitle:"routing key",charIndex:4915},{level:5,title:"Exchange Types",slug:"exchange-types",normalizedTitle:"exchange types",charIndex:5185},{level:4,title:"9.C# 垃圾回收机制",slug:"_9-c-垃圾回收机制",normalizedTitle:"9.c# 垃圾回收机制",charIndex:5746},{level:5,title:"10..NET的GC机制有这样两个问题",slug:"_10-net的gc机制有这样两个问题",normalizedTitle:"10..net的gc机制有这样两个问题",charIndex:6132},{level:5,title:"11.GC注意事项",slug:"_11-gc注意事项",normalizedTitle:"11.gc注意事项",charIndex:6343},{level:4,title:"12.Dotnet 异常处理",slug:"_12-dotnet-异常处理",normalizedTitle:"12.dotnet 异常处理",charIndex:7305},{level:4,title:"13.Dotnet 不能被继承类",slug:"_13-dotnet-不能被继承类",normalizedTitle:"13.dotnet 不能被继承类",charIndex:7505},{level:4,title:"14.C#栈和堆",slug:"_14-c-栈和堆",normalizedTitle:"14.c#栈和堆",charIndex:7616},{level:5,title:"15.栈 vs 堆：区别？",slug:"_15-栈-vs-堆-区别",normalizedTitle:"15.栈 vs 堆：区别？",charIndex:7836},{level:4,title:"16.数据库如何优化",slug:"_16-数据库如何优化",normalizedTitle:"16.数据库如何优化",charIndex:8299},{level:4,title:"17.你在你以前的项目中，主要解决了什么技术性难题，如果出现问题，你如何迅速找到问题，你遇到问题都是怎么解决的",slug:"_17-你在你以前的项目中-主要解决了什么技术性难题-如果出现问题-你如何迅速找到问题-你遇到问题都是怎么解决的",normalizedTitle:"17.你在你以前的项目中，主要解决了什么技术性难题，如果出现问题，你如何迅速找到问题，你遇到问题都是怎么解决的",charIndex:8575},{level:4,title:"18.项目中你用到的设计模式有哪些,举例说明",slug:"_18-项目中你用到的设计模式有哪些-举例说明",normalizedTitle:"18.项目中你用到的设计模式有哪些,举例说明",charIndex:8797},{level:4,title:"19.数据库的索引失效？",slug:"_19-数据库的索引失效",normalizedTitle:"19.数据库的索引失效？",charIndex:9540},{level:4,title:"20.IIS 经典模式和集成模式的区别",slug:"_20-iis-经典模式和集成模式的区别",normalizedTitle:"20.iis 经典模式和集成模式的区别",charIndex:9570},{level:4,title:"21.多线程 有几种启动方式",slug:"_21-多线程-有几种启动方式",normalizedTitle:"21.多线程 有几种启动方式",charIndex:9855},{level:4,title:"22.数据库锁有几种",slug:"_22-数据库锁有几种",normalizedTitle:"22.数据库锁有几种",charIndex:10167},{level:4,title:"23.两个html页面之间怎么传递参数值",slug:"_23-两个html页面之间怎么传递参数值",normalizedTitle:"23.两个html页面之间怎么传递参数值",charIndex:10380},{level:4,title:"24.ViewData和ViewBag区别",slug:"_24-viewdata和viewbag区别",normalizedTitle:"24.viewdata和viewbag区别",charIndex:10662},{level:5,title:"ViewData",slug:"viewdata",normalizedTitle:"viewdata",charIndex:10665},{level:5,title:"ViewBag",slug:"viewbag",normalizedTitle:"viewbag",charIndex:10674},{level:4,title:"25.装箱和取消装箱",slug:"_25-装箱和取消装箱",normalizedTitle:"25.装箱和取消装箱",charIndex:11162},{level:4,title:"26.数据库索引",slug:"_26-数据库索引",normalizedTitle:"26.数据库索引",charIndex:11347},{level:4,title:"27.WebApi和MVC有什么区别",slug:"_27-webapi和mvc有什么区别",normalizedTitle:"27.webapi和mvc有什么区别",charIndex:12274},{level:4,title:"28.Array和ArrayList的区别",slug:"_28-array和arraylist的区别",normalizedTitle:"28.array和arraylist的区别",charIndex:12797},{level:4,title:"29.Web Service，WCF， Web API",slug:"_29-web-service-wcf-web-api",normalizedTitle:"29.web service，wcf， web api",charIndex:13143},{level:5,title:"30.WCF和WEB API我该选择哪个？",slug:"_30-wcf和web-api我该选择哪个",normalizedTitle:"30.wcf和web api我该选择哪个？",charIndex:14067},{level:4,title:"31.const和readonly关键字",slug:"_31-const和readonly关键字",normalizedTitle:"31.const和readonly关键字",charIndex:14361},{level:4,title:"32.值类型、引用类型",slug:"_32-值类型、引用类型",normalizedTitle:"32.值类型、引用类型",charIndex:14834},{level:4,title:"33.装箱和拆箱",slug:"_33-装箱和拆箱",normalizedTitle:"33.装箱和拆箱",charIndex:15197},{level:4,title:"34.ref与out",slug:"_34-ref与out",normalizedTitle:"34.ref与out",charIndex:15397},{level:5,title:"ref关键字",slug:"ref关键字",normalizedTitle:"ref关键字",charIndex:15443},{level:5,title:"out关键字",slug:"out关键字",normalizedTitle:"out关键字",charIndex:15555},{level:4,title:"35.new和override的区别",slug:"_35-new和override的区别",normalizedTitle:"35.new和override的区别",charIndex:15739},{level:4,title:"36.Attribute介绍",slug:"_36-attribute介绍",normalizedTitle:"36.attribute介绍",charIndex:15867},{level:5,title:"attribute通用规则",slug:"attribute通用规则",normalizedTitle:"attribute通用规则",charIndex:16103},{level:4,title:"37.C# .NET内置委托",slug:"_37-c-net内置委托",normalizedTitle:"37.c# .net内置委托",charIndex:16298},{level:5,title:"委托是什么",slug:"委托是什么",normalizedTitle:"委托是什么",charIndex:16316},{level:4,title:"38.什么是AOP?",slug:"_38-什么是aop",normalizedTitle:"38.什么是aop?",charIndex:16703},{level:4,title:"39.Asp.Net MVC -Filter",slug:"_39-asp-net-mvc-filter",normalizedTitle:"39.asp.net mvc -filter",charIndex:16774},{level:4,title:"40.lock 应锁定什么类型对象",slug:"_40-lock-应锁定什么类型对象",normalizedTitle:"40.lock 应锁定什么类型对象",charIndex:16802},{level:5,title:"关于lock的介绍就到这里，有下面几点需要注意的地方",slug:"关于lock的介绍就到这里-有下面几点需要注意的地方",normalizedTitle:"关于lock的介绍就到这里，有下面几点需要注意的地方",charIndex:17739},{level:4,title:"41.RabbitMQ 优点",slug:"_41-rabbitmq-优点",normalizedTitle:"41.rabbitmq 优点",charIndex:17896},{level:4,title:"42.javascript",slug:"_42-javascript",normalizedTitle:"42.javascript",charIndex:18269}],headersStr:"1.锁表原因及如何处理 2.乐观锁和悲观锁的区别 3.缓存 4.MVC特点 5.大数据存储解决方案 6.redis容灾策略 7.Redis常用五大数据类型 Solr 8.rabbitMQ汇总 rabbitMQ特点 RabbitMQ概念 消息回执（Message acknowledgment） 消息持久化（Message durability） 交换器 Exchange routing key Exchange Types 9.C# 垃圾回收机制 10..NET的GC机制有这样两个问题 11.GC注意事项 12.Dotnet 异常处理 13.Dotnet 不能被继承类 14.C#栈和堆 15.栈 vs 堆：区别？ 16.数据库如何优化 17.你在你以前的项目中，主要解决了什么技术性难题，如果出现问题，你如何迅速找到问题，你遇到问题都是怎么解决的 18.项目中你用到的设计模式有哪些,举例说明 19.数据库的索引失效？ 20.IIS 经典模式和集成模式的区别 21.多线程 有几种启动方式 22.数据库锁有几种 23.两个html页面之间怎么传递参数值 24.ViewData和ViewBag区别 ViewData ViewBag 25.装箱和取消装箱 26.数据库索引 27.WebApi和MVC有什么区别 28.Array和ArrayList的区别 29.Web Service，WCF， Web API 30.WCF和WEB API我该选择哪个？ 31.const和readonly关键字 32.值类型、引用类型 33.装箱和拆箱 34.ref与out ref关键字 out关键字 35.new和override的区别 36.Attribute介绍 attribute通用规则 37.C# .NET内置委托 委托是什么 38.什么是AOP? 39.Asp.Net MVC -Filter 40.lock 应锁定什么类型对象 关于lock的介绍就到这里，有下面几点需要注意的地方 41.RabbitMQ 优点 42.javascript",content:"# 1.锁表原因及如何处理\n\n 1. 锁表发生在insert update 、delete 中\n 2. 锁表的原理是 数据库使用独占式封锁机制，当执行上面的语句时，对表进行锁住，直到发生commite 或者 回滚 或者退出数据库用户\n 3. 锁表的原因\n    * A程序执行了对 tableA 的 insert ，并还未 commite时，B程序也对tableA 进行insert 则此时会发生资源正忙的异常 就是锁表\n    * 锁表常发生于并发而不是并行（并行时，一个线程操作数据库时，另一个线程是不能操作数据库的，cpu 和i/o 分配原则）\n 4. 减少锁表的概率，\n\n * 减少insert 、update 、delete 语句执行 到 commite 之间的时间。具体点批量执行改为单个执行、优化sql自身的非执行速度\n * 如果异常对事物进行回滚\n\n# 2.乐观锁和悲观锁的区别\n\n悲观锁(Pessimistic Lock), 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。\n\n乐观锁(Optimistic Lock), 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库如果提供类似于write_condition机制的其实都是提供的乐观锁。\n\n两种锁各有优缺点，不可认为一种好于另一种，像乐观锁适用于写比较少的情况下，即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果经常产生冲突，上层应用会不断的进行retry，这样反倒是降低了性能，所以这种情况下用悲观锁就比较合适。\n\n----------------------------------------\n\n排它锁和共享锁 在数据库中有两种基本的锁类型：排它锁（Exclusive Locks，即X锁）和共享锁（Share Locks，即S锁）。\n当数据对象被加上排它锁时，其他的事务不能对它读取和修改。加了共享锁的数据对象可以被其他事务读取，但不能修改。\n数据库利用这两种基本的锁类型来对数据库的事务进行并发控制。\n\n表级锁和行级锁\nDML锁的目的在于保证并发情况下的数据完整性，主要包括TM锁和TX锁，其中TM锁称为表级锁，TX锁称为事务锁或行级锁。\n当Oracle执行DML语句时，系统自动在所要操作的表上申请TM类型的锁。当TM锁获得后，系统再自动申请TX类型的锁，并将实际锁定的数据行的锁标志位进行置位。这样在事务加锁前检查TX锁相容性时就不用再逐行检查锁标志，而只需检查TM锁模式的相容性即可，大大提高了系统的效率。TM锁包括了SS、SX、S、X等多种模式，在数据库中用0－6来表示。不同的SQL操作产生不同类型的TM锁。\n\n# 3.缓存\n\n * 不需要实时更新但是又极其消耗数据库的数据。比如网站上商品销售排行榜，这种数据一天统计一次就可以了，用户不会关注其是否是实时的。\n * 需要实时更新，但是更新频率不高的数据。比如一个用户的订单列表，他肯定希望能够实时看到自己下的订单，但是大部分用户不会频繁下单。\n * 在某个时刻访问量极大而且更新也很频繁的数据。这种数据有一个很典型的例子就是秒杀，在秒杀那一刻，可能有N倍于平时的流量进来，系统压力会很大。但是这种数据使用的缓存不能和普通缓存一样，这种缓存必须保证不丢失，否则会有大问题。\n\n# 4.MVC特点\n\nM：Modle（模型，主要是Service业务逻辑层和Dao和数据库取得连接并发送数据的层） V：VIEW（视图，也就是用户看的界面，通常是我们所熟知的前台页面，jsp等） C：CONTROLLER（控制层，可以把他看作一个中转，他接收从前台用户发来的请求，并调用service,dao把数据发送到后台，后台经过数据库的操作及业务逻辑分析又将数据返回给controller，最后再返回前台jsp页面）。\n\n说说MVC的优缺点， 优点:\n\n 1. MVC设计模式可以说实现了分层开发。各个层都有各个层的作用。\n 2. 降低了层与层之间的依赖，有利于代码的标准化开发\n 3. 再用新的代码业务逻辑替换时，只需要替换相对应的层，大大降低了我们的工作量，分工明确。\n\n# 5.大数据存储解决方案\n\n * 分区 将数据库分区可提高其性能并易于维护。通过将一个大表拆分成更小的单个表，只访问一小部分数据的查询可以执行得更快，因为需要扫描的数据较少。而且可以更快地执行维护任务（如重建索引或备份表）。 实现分区操作时可以不拆分表，而将表物理地放置在个别的磁盘驱动器上。例如，将表放在某个物理驱动器上并将相关的表放在与之分离的驱动器上可提高查询性能，因为当执行涉及表之间联接的查询时，多个磁头同时读取数据。\n\n * 硬件分区 硬件分区将数据库设计为利用可用的硬件构架。\n\n * 水平分区 水平分区将一个表分段为多个表，每个表包含相同数目的列和较少的行。例如，可以将一个包含十亿行的表水平分区成12个表，每个小表代表特定年份内一个月的数据。任何需要特定月份数据的查询只引用相应月份的表。\n\n * 垂直分区 垂直分区将一个表分段为多个表，每个表包含较少的列。垂直分区的两种类型是规范化和行拆分。\n\n# 6.redis容灾策略\n\n基本的redis的容灾策略为：\n\n 1. 采用master-slave方式\n 2. 为了得到好的读写性能，master不做任何的持久化\n 3. slave同时开启Snapshot和AOF来进行持久化，保证数据的安全性\n 4. 当master挂掉后，修改slave为master\n 5. 恢复原master数据，修改原先master为slave，启动slave\n 6. 若master与slave都挂掉后，调用命令通过aof和snapshot进行恢复 恢复时要先确保恢复文件都正确了，才能启动主库；也可以先启动slave，将master与slave对调 开源方案codishttp://navyaijm.blog.51cto.com/4647068/1637688\n\n哨兵的作用\n\n * 监控：监控主从是否正常\n * 通知：出现问题时，可以通知相关人员\n * 故障迁移：自动主从切换\n * 统一的配置管理：连接者询问sentinel取得主从的地址 Raft算法核心: 可视图\n\n# 7.Redis常用五大数据类型\n\n 1. String（字符串） string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。 string类型是Redis最基本的数据类型，一个redis中字符串value最多可以是512M\n 2. Hash（哈希） Redis hash 是一个键值对集合。 Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。 类似Java里面的Map<String,Object>\n 3. List（列表） Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）。 它的底层实际是个链表\n 4. Set（集合） Redis的Set是string类型的无序集合。它是通过HashTable实现实现的，\n 5. zset(sorted set：有序集合) Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。 不同的是每个元素都会关联一个double类型的分数。 redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。\n\n\n# Solr\n\n# 8.rabbitMQ汇总\n\n# rabbitMQ特点\n\n 1. 可靠性（Reliability）RabbitMQ 使用一些机制来保证可靠性，如持久化、传输确认、发布确认。\n 2. 灵活的路由（Flexible Routing）在消息进入队列之前，通过 Exchange 来路由消息的。对于典型的路由功能，RabbitMQ 已经提供了一些内置的 Exchange 来实现。针对更复杂的路由功能，可以将多个 Exchange 绑定在一起，也通过插件机制实现自己的 Exchange 。\n 3. 消息集群（Clustering）多个 RabbitMQ 服务器可以组成一个集群，形成一个逻辑 Broker 。\n 4. 高可用（Highly Available Queues）队列可以在集群中的机器上进行镜像，使得在部分节点出问题的情况下队列仍然可用。\n 5. 多种协议（Multi-protocol）RabbitMQ 支持多种消息队列协议，比如 STOMP、MQTT 等等。\n 6. 多语言客户端（Many Clients）RabbitMQ 几乎支持所有常用语言，比如 Java、.NET、Ruby 等等。\n 7. 管理界面（Management UI）RabbitMQ 提供了一个易用的用户界面，使得用户可以监控和管理消息 Broker 的许多方面。\n 8. 跟踪机制（Tracing）如果消息异常，RabbitMQ 提供了消息跟踪机制，使用者可以找出发生了什么。\n 9. 插件机制（Plugin System）RabbitMQ 提供了许多插件，来从多方面进行扩展，也可以编写自己的插件。\n\n# RabbitMQ概念\n\nConnectionFactory、Connection、Channel都是RabbitMQ对外提供的API中最基本的对象。Connection是RabbitMQ的socket链接，它封装了socket协议相关部分逻辑。ConnectionFactory为Connection的制造工厂。 Channel是我们与RabbitMQ打交道的最重要的一个接口，我们大部分的业务操作是在Channel这个接口中完成的，包括定义Queue、定义Exchange、绑定Queue与Exchange、发布消息等。\n\n> # 消息回执（Message acknowledgment）\n\n在实际应用中，可能会发生消费者收到Queue中的消息，但没有处理完成就宕机（或出现其他意外）的情况，这种情况下就可能会导致消息丢失。为了避免这种情况发生，我们可以要求消费者在消费完消息后发送一个回执给RabbitMQ，RabbitMQ收到消息回执（Message acknowledgment）后才将该消息从Queue中移除；如果RabbitMQ没有收到回执并检测到消费者的RabbitMQ连接断开，则RabbitMQ会将该消息发送给其他消费者（如果存在多个消费者）进行处理。这里不存在timeout概念，一个消费者处理消息时间再长也不会导致该消息被发送给其他消费者，除非它的RabbitMQ连接断开\n\n> # 消息持久化（Message durability）\n\n如果我们希望即使在RabbitMQ服务重启的情况下，也不会丢失消息，我们可以将Queue与Message都设置为可持久化的（durable），这样可以保证绝大部分情况下我们的RabbitMQ消息不会丢失。但依然解决不了小概率丢失事件的发生（比如RabbitMQ服务器已经接收到生产者的消息，但还没来得及持久化该消息时RabbitMQ服务器就断电了），如果我们需要对这种小概率事件也要管理起来，那么我们要用到事务。\n\n> # 交换器 Exchange\n\nRabbitMQ中的Exchange有四种类型，不同的类型有着不同的路由策略\n\n> # routing key\n\n生产者在将消息发送给Exchange的时候，一般会指定一个routing key，来指定这个消息的路由规则，而这个routing key需要与Exchange Type及binding key联合使用才能最终生效。 在Exchange Type与binding key固定的情况下（在正常使用时一般这些内容都是固定配置好的），我们的生产者就可以在发送消息给Exchange时，通过指定routing key来决定消息流向哪里。 RabbitMQ为routing key设定的长度限制为255 bytes\n\n> # Exchange Types\n\nRabbitMQ常用的Exchange Type有fanout、direct、topic、headers这四种（AMQP规范里还提到两种Exchange Type，分别为system与自定义，这里不予以描述），下面分别进行介绍。\n\n 1. Fanout Exchange 不处理路由键。你只需要简单的将队列绑定到交换机上。一个发送到交换机的消息都会被转发到与该交换机绑定的所有队列上。很像子网广播，每台子网内的主机都获得了一份复制的消息。Fanout交换机转发消息是最快的。\n 2. Direct Exchange 处理路由键。需要将一个队列绑定到交换机上，要求该消息与一个特定的路由键完全匹配。这是一个完整的匹配。如果一个队列绑定到该交换机上要求路由键 “test”，则只有被标记为“test”的消息才被转发，不会转发test.aaa，也不会转发dog.123，只会转发test。\n 3. Topic Exchange 将路由键和某模式进行匹配。此时队列需要绑定要一个模式上。符号 # 匹配一个或多个词，符号 * 匹配不多不少一个词。因此“audit.#”能够匹配到“audit.irs.corporate”，但是“audit.*” 只会匹配到“audit.irs”。\n\n详细资料\n\n# 9.C# 垃圾回收机制\n\n用到GC，命名空间System.GC; 可以强制回收 GC.Collect()\n\n * 什么是GC GC如其名，就是垃圾收集，当然这里仅就内存而言。Garbage Collector（垃圾收集器，在不至于混淆的情况下也成为GC）以应用程序的root为基础，遍历应用程序在Heap上动态分配的所有对象[2]，通过识别它们是否被引用来确定哪些对象是已经死亡的、哪些仍需要被使用。已经不再被应用程序的root或者别的对象所引用的对象就是已经死亡的对象，即所谓的垃圾，需要被回收。这就是GC工作的原理。为了实现这个原理，GC有多种算法。比较常见的算法有Reference Counting，Mark Sweep，Copy Collection等等。目前主流的虚拟系统.NET CLR，Java VM和Rotor都是采用的Mark Sweep算法。\n\n# 10..NET的GC机制有这样两个问题\n\n * 首先，GC并不是能释放所有的资源。它不能自动释放非托管资源。\n * 第二，GC并不是实时性的，这将会造成系统性能上的瓶颈和不确定性。\n\n> GC并不是实时性的，这会造成系统性能上的瓶颈和不确定性。所以有了IDisposable接口，IDisposable接口定义了Dispose方法，这个方法用来供程序员显式调用以释放非托管资源。使用using语句可以简化资源管理。\n\n# 11.GC注意事项\n\n 1.  只管理内存，非托管资源，如文件句柄，GDI资源，数据库连接等还需要用户去管理。\n 2.  循环引用，网状结构等的实现会变得简单。GC的标志-压缩算法能有效的检测这些关系，并将不再被引用的网状结构整体删除。\n 3.  GC通过从程序的根对象开始遍历来检测一个对象是否可被其他对象访问，而不是用类似于COM中的引用计数方法。\n 4.  GC在一个独立的线程中运行来删除不再被引用的内存。\n 5.  GC每次运行时会压缩托管堆。\n 6.  你必须对非托管资源的释放负责。可以通过在类型中定义Finalizer来保证资源得到释放。\n 7.  对象的Finalizer被执行的时间是在对象不再被引用后的某个不确定的时间。注意并非和C++中一样在对象超出声明周期时立即执行析构函数\n 8.  Finalizer的使用有性能上的代价。需要Finalization的对象不会立即被清除，而需要先执行Finalizer.Finalizer，不是在GC执行的线程被调用。GC把每一个需要执行Finalizer的对象放到一个队列中去，然后启动另一个线程来执行所有这些Finalizer，而GC线程继续去删除其他待回收的对象。在下一个GC周期，这些执行完Finalizer的对象的内存才会被回收。\n 9.  .NET GC使用\"代\"(generations)的概念来优化性能。代帮助GC更迅速的识别那些最可能成为垃圾的对象。在上次执行完垃圾回收后新创建的对象为第0代对象。经历了一次GC周期的对象为第1代对象。经历了两次或更多的GC周期的对象为第2代对象。代的作用是为了区分局部变量和需要在应用程序生存周期中一直存活的对象。大部分第0代对象是局部变量。成员变量和全局变量很快变成第1代对象并最终成为第2代对象。\n 10. GC对不同代的对象执行不同的检查策略以优化性能。每个GC周期都会检查第0代对象。大约1/10的GC周期检查第0代和第1代对象。大约1/100的GC周期检查所有的对象。重新思考Finalization的代价：需要Finalization的对象可能比不需要Finalization在内存中停留额外9个GC周期。如果此时它还没有被Finalize，就变成第2代对象，从而在内存中停留更长时间。\n\n# 12.Dotnet 异常处理\n\nC# 语言的异常处理功能有助于处理在程序运行期间发生的任何意外或异常情况。 异常处理功能使用 try、catch 和 finally 关键字来尝试执行可能失败的操作、在你确定合理的情况下处理故障，以及在事后清除资源。 公共语言运行时 (CLR)、.NET Framework/任何第三方库或应用程序代码都可以生成异常。 异常是使用 throw 关键字创建而成。\n\n# 13.Dotnet 不能被继承类\n\n在C#中定义了关键字sealed，被sealed修饰的类不能够被继承。在Java中同样也有关键字final表示一个类不能被继承。C++11提供final关键字使得类不能够被继承。\n\n# 14.C#栈和堆\n\n我们把内存分为堆空间和栈空间\n\n> 线程堆栈：简称栈 Stack 栈空间比较小，但是读取速度快 托管堆： 简称堆 Heap 堆空间比较大，但是读取速度慢\n\n----------------------------------------\n\n栈的特征：数据只能从栈的顶端插入和删除把数据放入栈顶称为入栈（push）从栈顶删除数据称为出栈（pop）\n堆：堆是一块内存区域，与栈不同，堆里的内存能够以任意顺序存入和移除\n\n# 15.栈 vs 堆：区别？\n\n栈通常保存着我们代码执行的步骤，而堆上存放的则多是对象，数据等。我们可以把栈想象成一个接着一个叠放在一起的盒子。当我们使用的时候，每次从最顶部取走一个盒子。栈也是如此，当一个方法（或类型）被调用完成的时候，就从栈顶取走，接着下一个。堆则不然，像是一个仓库，储存着我们使用的各种对象等信息，跟栈不同的是他们被调用完毕不会立即被清理掉。\n\n----------------------------------------\n\n栈存储的是基本值类型，堆存储的是new出来的对象。引用类型在栈中存储一个引用，其实际的存储位置位于托管堆。 当我们程序执行的时候，在栈和堆中分配有四种主要的类型：值类型，引用类型，指针，指令。\n\n----------------------------------------\n\n栈：所分配的内存是在一块连续的内存区域内．当我们声明变量时，那么编译器会自动接着当前栈区的结尾来分配内存\n堆：一般由程序员分配释放(new)， 若程序员不释放，程序结束时可能由操作系统回收\n\n# 16.数据库如何优化\n\n 1. 数据库运维方面的优化：启用数据库缓存。对于一些比较常用的查询可以采用数据库缓存的机制，部署的时候需要注意设置好缓存依赖项，防止“过期”数据的产生。\n 2. 数据库索引方面的优化：比如常用的字段建索引，联合查询考虑联合索引。（PS：如果你有基础，可以敞开谈谈聚集索引和非聚集索引的使用场景和区别）\n 3. 数据库查询方面的优化：避免select * 的写法、尽量不用in和not in 这种耗性能的用法等等\n 4. 数据库算法方面的优化：尽量避免大事务操作、减少循环算法，对于大数据量的操作，避免使用游标的用法等等\n\n# 17.你在你以前的项目中，主要解决了什么技术性难题，如果出现问题，你如何迅速找到问题，你遇到问题都是怎么解决的\n\n 1. 先根据出现的问题，大概排查出问出问题的几个点，逐个排查， 错误日志- sql查询计划-定位程序错误，\n 2. 技术性难题： 自己解决---csdn(博客园)---谷歌---请教技术大牛\n 3. 解决的技术难题：\n    * 微信支付，苹果和安卓的支付力度不一样\n    * 消息推送 signalr(以前是长轮询)\n\n# 18.项目中你用到的设计模式有哪些,举例说明\n\n单例：可以保证系统中一个类只有一个实例，并且自行实例化向整个系统提供(例如一个系统中可以存在多个打印任务，但是只能有一个正在工作的任务)\n最简单的就是写考虑线程安全的单例模式\n\npublic class Singleton {\n    // 定义一个静态变量来保存类的实例\n    private static Singleton uniqueInstance;\n    // 定义一个标识确保线程同步\n    private static readonly object locker = new object();\n    // 定义私有构造函数，使外界不能创建该类实例\n    private Singleton() {}\n    // 定义公有方法提供一个全局访问点,同时你也可以定义公有属性来提供全局访问点\n    public static Singleton GetInstance() {\n        // 双重锁定只需要一句判断就可以了\n        if (uniqueInstance == null) {\n            lock(locker) {\n                // 如果类的实例不存在则创建，否则直接返回\n                if (uniqueInstance == null) {\n                    uniqueInstance = new Singleton();\n                }\n            }\n        }\n        return uniqueInstance;\n    }\n}\n\n\n# 19.数据库的索引失效？\n\n删掉索引,然后再重建索引\n\n# 20.IIS 经典模式和集成模式的区别\n\n * 经典形式是为了与之前的版本兼容，运用ISAPI扩展来调用ASP.NET运转库\n * 集成形式是一种统一的请求处置管道，它将ASP.NET请求管道与IIS中心管道组合在一同，这种形式可以提供更好的性能，可以完成配置和管理的模块化，而且增加了运用托管代码模块扩展IIS时的灵敏性。\n\n假设老的Web应用程序运转于IIS7.0的集成形式下， 可能需求对应用程序的web.config文件停止修正，特别是运用了完成IHttpHandler接口的自定义模块的状况。IIS7.0在同一个效劳器上可以同时支持两种形式的应用程序。\n\n# 21.多线程 有几种启动方式\n\n使用new Thread()和new Thread(Runnable)形式\n\n * 第一种直接调用thread的run方法，所以，往往使用Thread子类，new Thread(){}.start();这表示调用Thread子类对象的run方法， new Thread(){}表示一个Thread的匿名子类的实例对象。\n * 第二种调用Runnable的run方法。 new Thread(new Runnable(){}).start();这表示调用Thread对象接受的Runnable对象的run方法，new Runnable(){}表示一个Runnable的匿名子类的实例对象\n\n# 22.数据库锁有几种\n\n * 共享-S锁：多个事务可封锁一个共享页；任何事务都不能修改该页； 通常是该页被读取完毕，S锁立即被释放。\n * 排它-X锁：仅允许一个事务封锁此页；其他任何事务必须等到X锁被释放才能对该页进行访问；X锁一直到事务结束才能被释放。\n * 更新-U锁：用来预定要对此页施加X锁，它允许其他事务读，但不允许再施加U锁或X锁；当被读取的页将要被更新时，则升级为X锁；U锁一直到事务结束时才能被释放。\n\n# 23.两个html页面之间怎么传递参数值\n\n 1. 如果页面A和页面B是同域的情况,使用Cookie传递参数 ，a页面保存Cookie，b页面读取\n 2. 如果页面A和页面B不同域的情况,页面A通过点击链接跳转到页面B的话，那么数据可以通过search和hash附加在B页面的URL上，传递给页面B,window对象它们是共享的，因此我们可以通过window.xx来传递数据，比如window.name=123;\n 3. 如果页面A和B，不同域，也没有跳转关系,如果浏览器支持HTML5的话，我们可以使用window.postMessage来跨域发送数据。\n\n# 24.ViewData和ViewBag区别\n\n# ViewData\n\n * ViewData是一个继承自ViewDataDictionary类的Dictionary对象。\n * ViewData用来从Controller向对应的View传递值。\n * ViewData的只在当前当前的请求中有效，生命周期和View相同，其值不能在多个请求中共享。\n * 在重定向(redirection)后，ViewData中存储的变量值将变为null。\n * 在取出ViewData中的变量值是，必须进行合适的类型转换(隐式或显式)和空值检查。\n\n# ViewBag\n\n * ViewBag是一个动态类型变量(dynamic)，这是C# 4.0引入的新特性，变量类型会在运行时进行解析。\n * ViewBag基本上是ViewData的包装，也是用来从Controller向View来传递值的。\n * ViewBag也只在当前的请求中有效。\n * 在重定向(redirection)后，ViewBag中存储的变量值将变为null\n * 因为ViewBag是动态类型，所以我们在取得其值时，不需要进行类型转换。\n\n# 25.装箱和取消装箱\n\n装箱是将值类型转换为 object 类型或由此值类型实现的任何接口类型的过程。 当 CLR 对值类型进行装箱时，会将该值包装到 System.Object内部，再将后者存储在托管堆上。 取消装箱将从对象中提取值类型。 装箱是隐式的；取消装箱是显式的。 装箱和取消装箱的概念是类型系统 C#统一视图的基础，其中任一类型的值都被视为一个对象。\n\n# 26.数据库索引\n\n数据库索引有\n\n * sqlserver 主键索引、唯一索引、聚集索引、非聚集索引\n * mysql 唯一索引（主键索引）、聚集索引、非聚集索引、全文索引\n\n唯一索引\n唯一索引不允许两行具有相同的索引值。\n如果现有数据中存在重复的键值，则大多数数据库都不允许将新创建的唯一索引与表一起保存。当新数据将使表中的键值重复时，数据库也拒绝接受此数据。例如，如果在 employee 表中的职员姓氏(lname) 列上创建了唯一索引，则所有职员不能同姓。\n\n主键索引\n主键索引是唯一索引的特殊类型。\n数据库表通常有一列或列组合，其值用来唯一标识表中的每一行。该列称为表的主键。 在数据库关系图中为表定义一个主键将自动创建主键索引，主键索引是唯一索引的特殊类型。主键索引要求主键中的每个值是唯一的。当在查询中使用主键索引时，它还允许快速访问数据。\n\n它们的一些比较：\n\n 1. 对于主健/unique constraint ， oracle/sql server/mysql等都会自动建立唯一索引；\n 2. 主键不一定只包含一个字段，所以如果你在主键的其中一个字段建唯一索引还是必要的；\n 3. 主健可作外健，唯一索引不可；\n 4. 主健不可为空，唯一索引可；\n 5. 主健也可是多个字段的组合；\n 6. 主键与唯一索引不同的是：\n    1. 有not null属性\n    2. 每个表只能有一个。\n\n聚集索引\n一种索引，该索引中键值的逻辑顺序决定了表中相应行的物理顺序。\n\n非聚集索引\n一种索引，该索引中索引的逻辑顺序与磁盘上行的物理存储顺序不同。\n\n> 索引是通过二叉树的数据结构来描述的，我们可以这么理解聚簇索引：索引的叶节点就是数据节点。而非聚簇索引的叶节点仍然是索引节点，只不过有一个指针指向对应的数据块\n\n聚集索引：可以帮助把很大的范围，迅速减小范围。但是查找该记录，就要从这个小范围中Scan了。 非聚集索引：把一个很大的范围，转换成一个小的地图。你需要在这个小地图中找你要寻找的信息的位置。然后通过这个位置，再去找你所需要的记录。\n\n使用场景 基于上述的两种规则，那么在什么时候适合聚集索引，什么时候适合非聚集索引？\n\n# 27.WebApi和MVC有什么区别\n\nWeb API更倾向于基于HTTP协议的服务，直接返回用户的数据请求。MVC是建站的一种框架，倾向于返回用户的页面请求。 ASP.NET Web API 的特性，更能说明Web API是一种数据请求框架：\n\n 1. ASP.NET Web API 可以根据请求报文来返回的相应数据格式。包括JSON和XML。\n 2. ASP.NET Web API 单独做数据请求和MVC做页面请求可以让Web前端和后台更好的解耦，减少开发难度。\n 3. Web API 可以更好地用在移动端网页、桌面端网页或者桌面程序，调用方更加多样化。\n 4. Web API 的宿主可以选择多样：WebHost,，ConsoleHost，甚至是windows Services。\n\n> WebAPI主演提供了一套RestfulAPI的开发框架，提供了较为完整的http语义支持，主要用来做开放API，更抽象，更不注重View的生成。 MVC的主要使用场景在于Web站点的开发，他在后端实现了一套完整的MVC开发框架，能提供方便的页面开发，默认使用Razor视图引擎，提供了后端html构造，用户可以方便地开发出带页面的站点。\n\n# 28.Array和ArrayList的区别\n\n 1. Array类型的变量在声明的同时必须进行实例化(至少得初始化数组的大小)，而ArrayList可以只是先声明。\n 2. Array只能存储同构的对象，而ArrayList可以存储异构的对象。 同构的对象是指类型相同的对象，若声明为int[]的数组就只能存放整形数据,string[]只能存放字符型数据,但声明为object[]的数组除外。\n 3. 在CLR托管对中的存放方式，Array是始终是连续存放的，而ArrayList的存放不一定连续。\n 4. 初始化大小 Array对象的初始化必须只定指定大小，且创建后的数组大小是固定的\n 5. Array不能够随意添加和删除其中的项，而ArrayList可以在任意位置插入和删除项。\n\n# 29.Web Service，WCF， Web API\n\nWeb Service\n\n 1. 它是基于SOAP协议的，数据格式是XML\n 2. 只支持HTTP协议\n 3. 它不是开源的，但可以被任意一个了解XML的人使用\n 4. 它只能部署在IIS上\n\nWCF\n\n 1. 这个也是基于SOAP的，数据格式是XML\n 2. 这个是Web Service（ASMX）的进化版，可以支持各种各样的协议，像TCP，HTTP，HTTPS，Named Pipes, MSMQ.\n 3. WCF的主要问题是，它配置起来特别的繁琐\n 4. 它不是开源的，但可以被任意一个了解XML的人使用\n 5. 它可以部署应用程序中或者IIS上或者Windows服务中\n\nWCF Rest\n\n 1. 想使用WCF Rest service，你必须在WCF中使用webHttpBindings\n 2. 它分别用[WebGet]和[WebInvoke]属性，实现了HTTP的GET和POST动词\n 3. 要想使用其他的HTTP动词，你需要在IIS中做一些配置，使.svc文件可以接受这些动词的请求\n 4. 使用WebGet通过参数传输数据，也需要配置。而且必须指定UriTemplate\n 5. 它支持XML、JSON以及ATOM这些数据格式\n\nWeb API\n\n 1. 这是一个简单的构建HTTP服务的新框架\n 2. 在.net平台上Web API 是一个开源的、理想的、构建REST-ful 服务的技术\n 3. 不像WCF REST Service.它可以使用HTTP的全部特点（比如URIs、request/response头，缓存，版本控制，多种内容格式）\n 4. 它也支持MVC的特征，像路由、控制器、action、filter、模型绑定、控制反转（IOC）或依赖注入（DI），单元测试。这些可以使程序更简单、更健壮\n 5. 它可以部署在应用程序和IIS上\n 6. 这是一个轻量级的框架，并且对限制带宽的设备，比如智能手机等支持的很好\n 7. Response可以被Web API的MediaTypeFormatter转换成Json、XML 或者任何你想转换的格式。\n\n# 30.WCF和WEB API我该选择哪个？\n\n 1. 当你想创建一个支持消息、消息队列、双工通信的服务时，你应该选择WCF\n 2. 当你想创建一个服务，可以用更快速的传输通道时，像TCP、Named Pipes或者甚至是UDP（在WCF4.5中）,在其他传输通道不可用的时候也可以支持HTTP。\n 3. 当你想创建一个基于HTTP的面向资源的服务并且可以使用HTTP的全部特征时（比如URIs、request/response头，缓存，版本控制，多种内容格式），你应该选择Web API\n 4. 当你想让你的服务用于浏览器、手机、iPhone和平板电脑时，你应该选择Web API\n\n# 31.const和readonly关键字\n\n先来了解静态常量和动态常量。\n\n * 静态常量：所谓静态常量就是在编译期间会对变量进行解析，再将常量的值替换成初始化的值。\n * 动态常量：所谓动态常量就是编译期间会将变量标记只读常量，而不用常量的值代替，这样在声明时可以不初始化，可以延迟到构造函数初始化。\n\nconst修饰的常量是上述中的第一种，即静态常量，而readonly是上述中第二种即动态常量。他们的区别可以从静态常量和动态常量的特性来说明：\n\n * const修饰的常量在声明时必须初始化值；readonly修饰的常量可以不初始化值，且可以延迟到构造函数。\n * cons修饰的常量在编译期间会被解析，并将常量的值替换成初始化的值；而readonly延迟到运行的时候。\n * const修饰的常量注重的是效率；readonly修饰的常量注重灵活。\n * const修饰的常量没有内存消耗；readonly因为需要保存常量，所以有内存消耗。\n * const只能修饰基元类型、枚举类、或者字符串类型;readonly却没有这个限制。\n\n# 32.值类型、引用类型\n\n 1. 值类型(ValueType) 值类型包括：数值类型，结构体，bool型，用户定义的结构体，枚举，可空类型。\n    值类型的变量直接存储数据，分配在托管栈中。变量会在创建它们的方法返回时自动释放，例如在一个方法中声明Char型的变量name=’C’，当实例化它的方法结束时，name变量在栈上占用的内存就会自动释放 C#的所有值类型均隐式派生自System.ValueType。\n\n 2. 引用类型(ReferenceType) 引用类型包括：数组，用户定义的类、接口、委托，object，字符串，null类型，类。\n    引用类型的变量持有的是数据的引用，数据存储在数据堆，分配在托管堆中，变量并不会在创建它们的方法结束时释放内存，它们所占用的内存会被CLR中的垃圾回收机制释放。\n\n# 33.装箱和拆箱\n\n * 装箱就是将一个值类型转换成等值的引用类型\n   在堆上为新生成的对象(该对象包含数据，对象本身没有名称)分配内存。\n   将堆栈上值类型变量的值拷贝到堆上的对象中。\n   将堆上创建的对象的地址返回给引用类型变量(从程序员角度看，这个变量的名称就好像堆上对象的名称一样)。\n\n * 拆箱就是将一个引用类型转换成等值的值类型\n   将引用类型变量堆上的值拷贝到栈上面。\n\n# 34.ref与out\n\nref和out都是按地址传递,使用后都将改变原来参数的数值。\n\n# ref关键字\n\n 1. 方法定义和调用方法都必须显式使用 ref 关键字\n 2. 传递到 ref 参数的参数必须初始化,否则程序会报错\n 3. 通过ref的这个特性,一定程度上解决了C#中的函数只能有一个返回值的问题\n\n# out关键字\n\n方法定义和调用方法都必须显式使用 out关键字\n\n 1. 方法定义和调用方法都必须显式使用 out关键字\n 2. out关键字无法将参数值传递到out参数所在的方法中,只能传递参数的引用(个人理解),所以out参数的参数值初始化必须在其方法内进行,否则程序会报错\n 3. 通过out的这个特性,一定程度上解决了C#中的函数只能有一个返回值的问题\n\n# 35.new和override的区别\n\n * override是指“覆盖”，是指子类覆盖了父类的方法。子类的对象无法再访问父类中的该方法。\n * new是指“隐藏”，是指子类隐藏了父类的方法，当然，通过一定的转换，可以在子类的对象中访问父类的方法。\n\n# 36.Attribute介绍\n\n> MSDN中定义为：公共语言运行时运行添加类似关键字的描述声明，叫做Attribute，它对程序中的元素进行标注，如类型、方法、字段和属性等。attribute和Microsoft.Net Framework文件的元数据保存在一起，可以用来在运行时描述你的代码，或者在程序运行时影响应用程序的行为。\n\n我们简单地总结：定制特性attribute，本质上是一个类，其为目标元素提供关联附加信息，并在运行时以反射的方式来获取附件信息。\n\n# attribute通用规则\n\n 1. 特性可以应用的目标元素包括：程序集(assemby)、模块(module)、类型(Type)、属性(Property)、事件(Event)、字段(Field)、方法(Method)、参数(param)、返回值(return).\n 2. 特性以[,]形式展示。放在紧挨着元素上\n 3. attribute实例，是在编译期进行初始化，而不是运行期。\n\n# 37.C# .NET内置委托\n\n# 委托是什么\n\n委托是一个类，它定义了方法的类型，使得可以将方法当作另一个方法的参数来进行传递，这种将方法动态地赋给参数的做法，可以避免在程序中大量使用If-Else(Switch)语句，同时使得程序具有更好的可扩展性。\n\n委托是一种特殊的类型（class），用途是来实现对一种方法的封装。在某种事件发生时，自动调用该方法。好处显然易见，它使用户可以自定义自己的方法实现，通过封装，CLR会在相应事件激发时调用你定义的方法，实现你的功能。\n\nC#内置委托 Action、Action<T>、Func<T>、Predicate<T>\nCLR环境中给我们内置了几个常用委托Action、 Action<T>、Func<T>、Predicate<T>，一般我们要用到委托的时候，尽量不要自己再定义一 个委托了，就用系统内置的这几个已经能够满足大部分的需求，且让代码符合规范。\n\n# 38.什么是AOP?\n\n这种在运行时，动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面的编程。 AOP面向切面编程链接\n\n# 39.Asp.Net MVC -Filter\n\n\n\n# 40.lock 应锁定什么类型对象\n\n首先先上官方Msdn的说法\n\n> lock 关键字可确保当一个线程位于代码的临界区时，另一个线程不会进入该临界区。 如果其他线程尝试进入锁定的代码，则它将一直等待（即被阻止），直到该对象被释放。\n> lock 关键字在块的开始处调用 Enter，而在块的结尾处调用 Exit。 ThreadInterruptedException 引发，如果 Interrupt 中断等待输入 lock 语句的线程。 通常，应避免锁定 public 类型，否则实例将超出代码的控制范围。\n> 常见的结构 lock (this)、lock (typeof (MyType)) 和 lock (\"myLock\") 违反此准则：\n> 如果实例可以被公共访问，将出现 lock (this) 问题。\n> 如果 MyType 可以被公共访问，将出现 lock (typeof (MyType)) 问题。\n> 由于进程中使用同一字符串的任何其他代码都将共享同一个锁，所以出现 lock(\"myLock\") 问题。\n> 最佳做法是定义 private 对象来锁定, 或 private static 对象变量来保护所有实例所共有的数据。\n> 在 lock 语句的正文不能使用 等待 关键字。\n\n打个比方，有这样一个情景，很多公司所在的大厦的厕所的蹲位都是小单间型的，也就是一次只能进去一个人，那么为了避免每次进去一个人，那怎么做呢？不就是一个人进去之后顺手把门锁上么？这样你在里面干啥事，外边的人也只能等待你解放完了，才能进入。而蹲位的资源（蹲位，手纸等）是共享的。\n\n最常使用的锁是如下格式的代码段：\n\nprivate static object objlock = new object();\nlock (objlock )\n{\n    //要执行的代码逻辑\n}\n\n\n为什么锁的对象是私有的呢？还是以厕所为例子吧，私有就好比，这把锁只有你能访问到，而且最好这把锁不会因为外力而有所改变，别人访问不到，这样才能保证你进去了，别人就进不去了，如果是公有的，就好比你蹲位小单间的锁不是安装在里面而是安装在外边的，别人想不想进就不是你所能控制的了，这样也不安全。\n\n# 关于lock的介绍就到这里，有下面几点需要注意的地方\n\n 1. lock的是引用类型的对象，string类型除外。\n 2. lock推荐的做法是使用静态的、只读的、私有的对象。\n 3. 保证lock的对象在外部无法修改才有意义，如果lock的对象在外部改变了，对其他线程就会畅通无阻，失去了lock的意义。\n\n# 41.RabbitMQ 优点\n\n * 安装部署简单，上手门槛低，功能丰富，符合AMQP标准；\n * 企业级消息队列，经过大量实践考验的高可靠；\n * 集群易扩展，可以轻松的增减集群节点；\n * 有强大的WEB管理页面。\n\n> AMQP，即Advanced Message Queuing Protocol,一个提供统一消息服务的应用层标准高级消息队列协议,是应用层协议的一个开放标准,为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端/中间件不同产品，不同的开发语言等条件的限制。Erlang中的实现有 RabbitMQ等。 什么是AMQP 高级消息队列协议使得遵从该规范的客户端应用和消息中间件服务器的全功能互操作成为可能。\n\n----------------------------------------\n\n# 42.javascript\n\n//快速排序 递归\nfunction quickSort(arr){\n    if(arr.length<=1) return arr;\n    var num = Math.floor(arr.length/2);//找到中间数的索引值，如果是浮点数，则向下取整\n    var numValue = arr.splice(num,1);//找到中间数的值\n    var left = [] , right = [];    \n    for(var i = 0; i< arr.length ; i++){\n        if(arr[i]<numValue ){            \n            left.push(arr[i]);//基准点的左边的数传到左边数组\n        }else{\n            right.push(arr[i]);//基准点的右边的数传到右边数组\n        }\n    }\n    return quickSort(left).concat([numValue],quickSort(right));//递归不断重复比较\n}\n// parseInt 实现 \nfunction _parseInt (str, radix) {\n  let str_type = typeof str\n  let res = 0\n  if (str_type !== 'string' && str_type !== 'number') {\n     // 如果类型不是 string 或 number 类型返回NaN\n     return NaN\n  }\n\n  // 字符串处理\n  str = String(str).trim().split('.')[0]\n  let length = str.length\n  if (!length) {\n    // 如果为空则返回 NaN\n    return NaN\n  }\n\n  if (!radix) {\n    // 如果 radix 为0 null undefined\n    // 则转化为 10\n    radix = 10\n  }\n  if (typeof radix !== 'number' || radix < 2 || radix > 36) {\n    return NaN\n  }\n\n  for (let i = 0; i < length; i++) {\n    let arr = str.split('').reverse().join('')\n    res += Math.floor(arr[i]) * Math.pow(radix, i)\n  }\n  return res\n}\n\n//获取url参数返回object对象\nfunction fn(){\n    var _array = location.href.split('?'),obj = {};\n    if(_array.length==1) return obj;\n    var array = _array[1].split('&');\n    for(var i = 0 ;i < array.length; i++){\n     var temp = array[i].split('=')\n     obj[temp[0]] = temp[1];\n    }\n    return obj;\n}\n\nfunction fn2(){\n    var _array = location.href.match(/([^?&=]+)=([^?&=]*)/g),obj = {};\n    if(_array){\n        for(var i = 0 ;i < _array.length; i++){\n           var temp = _array[i].split('=')\n           obj[temp[0]] = temp[1];\n }\n    }\n    return obj;\n}\n\n//去除空格\nstring.replace(/(^\\s*)|(\\s*$)/gi,'');\n\n//call()方法和apply()\n//1. 每个函数都包含两个非继承而来的方法：call()方法和apply()方法。\n//2. 相同点：这两个方法的作用是一样的。\n//3. 不同点：接收参数的方式不同。\n//apply()方法 接收两个参数，一个是函数运行的作用域（this），另一个是参数数组。\napply([thisObj [,argArray] ]);\n//call()方法 第一个参数和apply()方法的一样，但是传递给函数的参数必须列举出来。\ncall([thisObject[,arg1 [,arg2 [,...,argn]]]]);\n\n//闭包\n//定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。\n//表现形式：使函数外部能够调用函数内部定义的变量。\n//什么是跨域？\n//由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域\n//porxy代理 通过nginx代理\n//CORS 【Cross-Origin Resource Sharing】\nres.writeHead(200, {\n    \"Content-Type\": \"text/html; charset=UTF-8\",\n    \"Access-Control-Allow-Origin\":'http://localhost',\n    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n    'Access-Control-Allow-Headers': 'X-Requested-With, Content-Type'\n});\n//jsonp\nfunction testjsonp(data) {\n    console.log(data.name); // 获取返回的结果\n}\nvar _script = document.createElement('script');\n_script.type = \"text/javascript\";\n_script.src = \"http://localhost:8888/jsonp?callback=testjsonp\";\ndocument.head.appendChild(_script);\n",normalizedContent:"# 1.锁表原因及如何处理\n\n 1. 锁表发生在insert update 、delete 中\n 2. 锁表的原理是 数据库使用独占式封锁机制，当执行上面的语句时，对表进行锁住，直到发生commite 或者 回滚 或者退出数据库用户\n 3. 锁表的原因\n    * a程序执行了对 tablea 的 insert ，并还未 commite时，b程序也对tablea 进行insert 则此时会发生资源正忙的异常 就是锁表\n    * 锁表常发生于并发而不是并行（并行时，一个线程操作数据库时，另一个线程是不能操作数据库的，cpu 和i/o 分配原则）\n 4. 减少锁表的概率，\n\n * 减少insert 、update 、delete 语句执行 到 commite 之间的时间。具体点批量执行改为单个执行、优化sql自身的非执行速度\n * 如果异常对事物进行回滚\n\n# 2.乐观锁和悲观锁的区别\n\n悲观锁(pessimistic lock), 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。\n\n乐观锁(optimistic lock), 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库如果提供类似于write_condition机制的其实都是提供的乐观锁。\n\n两种锁各有优缺点，不可认为一种好于另一种，像乐观锁适用于写比较少的情况下，即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。但如果经常产生冲突，上层应用会不断的进行retry，这样反倒是降低了性能，所以这种情况下用悲观锁就比较合适。\n\n----------------------------------------\n\n排它锁和共享锁 在数据库中有两种基本的锁类型：排它锁（exclusive locks，即x锁）和共享锁（share locks，即s锁）。\n当数据对象被加上排它锁时，其他的事务不能对它读取和修改。加了共享锁的数据对象可以被其他事务读取，但不能修改。\n数据库利用这两种基本的锁类型来对数据库的事务进行并发控制。\n\n表级锁和行级锁\ndml锁的目的在于保证并发情况下的数据完整性，主要包括tm锁和tx锁，其中tm锁称为表级锁，tx锁称为事务锁或行级锁。\n当oracle执行dml语句时，系统自动在所要操作的表上申请tm类型的锁。当tm锁获得后，系统再自动申请tx类型的锁，并将实际锁定的数据行的锁标志位进行置位。这样在事务加锁前检查tx锁相容性时就不用再逐行检查锁标志，而只需检查tm锁模式的相容性即可，大大提高了系统的效率。tm锁包括了ss、sx、s、x等多种模式，在数据库中用0－6来表示。不同的sql操作产生不同类型的tm锁。\n\n# 3.缓存\n\n * 不需要实时更新但是又极其消耗数据库的数据。比如网站上商品销售排行榜，这种数据一天统计一次就可以了，用户不会关注其是否是实时的。\n * 需要实时更新，但是更新频率不高的数据。比如一个用户的订单列表，他肯定希望能够实时看到自己下的订单，但是大部分用户不会频繁下单。\n * 在某个时刻访问量极大而且更新也很频繁的数据。这种数据有一个很典型的例子就是秒杀，在秒杀那一刻，可能有n倍于平时的流量进来，系统压力会很大。但是这种数据使用的缓存不能和普通缓存一样，这种缓存必须保证不丢失，否则会有大问题。\n\n# 4.mvc特点\n\nm：modle（模型，主要是service业务逻辑层和dao和数据库取得连接并发送数据的层） v：view（视图，也就是用户看的界面，通常是我们所熟知的前台页面，jsp等） c：controller（控制层，可以把他看作一个中转，他接收从前台用户发来的请求，并调用service,dao把数据发送到后台，后台经过数据库的操作及业务逻辑分析又将数据返回给controller，最后再返回前台jsp页面）。\n\n说说mvc的优缺点， 优点:\n\n 1. mvc设计模式可以说实现了分层开发。各个层都有各个层的作用。\n 2. 降低了层与层之间的依赖，有利于代码的标准化开发\n 3. 再用新的代码业务逻辑替换时，只需要替换相对应的层，大大降低了我们的工作量，分工明确。\n\n# 5.大数据存储解决方案\n\n * 分区 将数据库分区可提高其性能并易于维护。通过将一个大表拆分成更小的单个表，只访问一小部分数据的查询可以执行得更快，因为需要扫描的数据较少。而且可以更快地执行维护任务（如重建索引或备份表）。 实现分区操作时可以不拆分表，而将表物理地放置在个别的磁盘驱动器上。例如，将表放在某个物理驱动器上并将相关的表放在与之分离的驱动器上可提高查询性能，因为当执行涉及表之间联接的查询时，多个磁头同时读取数据。\n\n * 硬件分区 硬件分区将数据库设计为利用可用的硬件构架。\n\n * 水平分区 水平分区将一个表分段为多个表，每个表包含相同数目的列和较少的行。例如，可以将一个包含十亿行的表水平分区成12个表，每个小表代表特定年份内一个月的数据。任何需要特定月份数据的查询只引用相应月份的表。\n\n * 垂直分区 垂直分区将一个表分段为多个表，每个表包含较少的列。垂直分区的两种类型是规范化和行拆分。\n\n# 6.redis容灾策略\n\n基本的redis的容灾策略为：\n\n 1. 采用master-slave方式\n 2. 为了得到好的读写性能，master不做任何的持久化\n 3. slave同时开启snapshot和aof来进行持久化，保证数据的安全性\n 4. 当master挂掉后，修改slave为master\n 5. 恢复原master数据，修改原先master为slave，启动slave\n 6. 若master与slave都挂掉后，调用命令通过aof和snapshot进行恢复 恢复时要先确保恢复文件都正确了，才能启动主库；也可以先启动slave，将master与slave对调 开源方案codishttp://navyaijm.blog.51cto.com/4647068/1637688\n\n哨兵的作用\n\n * 监控：监控主从是否正常\n * 通知：出现问题时，可以通知相关人员\n * 故障迁移：自动主从切换\n * 统一的配置管理：连接者询问sentinel取得主从的地址 raft算法核心: 可视图\n\n# 7.redis常用五大数据类型\n\n 1. string（字符串） string类型是二进制安全的。意思是redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。 string类型是redis最基本的数据类型，一个redis中字符串value最多可以是512m\n 2. hash（哈希） redis hash 是一个键值对集合。 redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。 类似java里面的map<string,object>\n 3. list（列表） redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素导列表的头部（左边）或者尾部（右边）。 它的底层实际是个链表\n 4. set（集合） redis的set是string类型的无序集合。它是通过hashtable实现实现的，\n 5. zset(sorted set：有序集合) redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。 不同的是每个元素都会关联一个double类型的分数。 redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。\n\n\n# solr\n\n# 8.rabbitmq汇总\n\n# rabbitmq特点\n\n 1. 可靠性（reliability）rabbitmq 使用一些机制来保证可靠性，如持久化、传输确认、发布确认。\n 2. 灵活的路由（flexible routing）在消息进入队列之前，通过 exchange 来路由消息的。对于典型的路由功能，rabbitmq 已经提供了一些内置的 exchange 来实现。针对更复杂的路由功能，可以将多个 exchange 绑定在一起，也通过插件机制实现自己的 exchange 。\n 3. 消息集群（clustering）多个 rabbitmq 服务器可以组成一个集群，形成一个逻辑 broker 。\n 4. 高可用（highly available queues）队列可以在集群中的机器上进行镜像，使得在部分节点出问题的情况下队列仍然可用。\n 5. 多种协议（multi-protocol）rabbitmq 支持多种消息队列协议，比如 stomp、mqtt 等等。\n 6. 多语言客户端（many clients）rabbitmq 几乎支持所有常用语言，比如 java、.net、ruby 等等。\n 7. 管理界面（management ui）rabbitmq 提供了一个易用的用户界面，使得用户可以监控和管理消息 broker 的许多方面。\n 8. 跟踪机制（tracing）如果消息异常，rabbitmq 提供了消息跟踪机制，使用者可以找出发生了什么。\n 9. 插件机制（plugin system）rabbitmq 提供了许多插件，来从多方面进行扩展，也可以编写自己的插件。\n\n# rabbitmq概念\n\nconnectionfactory、connection、channel都是rabbitmq对外提供的api中最基本的对象。connection是rabbitmq的socket链接，它封装了socket协议相关部分逻辑。connectionfactory为connection的制造工厂。 channel是我们与rabbitmq打交道的最重要的一个接口，我们大部分的业务操作是在channel这个接口中完成的，包括定义queue、定义exchange、绑定queue与exchange、发布消息等。\n\n> # 消息回执（message acknowledgment）\n\n在实际应用中，可能会发生消费者收到queue中的消息，但没有处理完成就宕机（或出现其他意外）的情况，这种情况下就可能会导致消息丢失。为了避免这种情况发生，我们可以要求消费者在消费完消息后发送一个回执给rabbitmq，rabbitmq收到消息回执（message acknowledgment）后才将该消息从queue中移除；如果rabbitmq没有收到回执并检测到消费者的rabbitmq连接断开，则rabbitmq会将该消息发送给其他消费者（如果存在多个消费者）进行处理。这里不存在timeout概念，一个消费者处理消息时间再长也不会导致该消息被发送给其他消费者，除非它的rabbitmq连接断开\n\n> # 消息持久化（message durability）\n\n如果我们希望即使在rabbitmq服务重启的情况下，也不会丢失消息，我们可以将queue与message都设置为可持久化的（durable），这样可以保证绝大部分情况下我们的rabbitmq消息不会丢失。但依然解决不了小概率丢失事件的发生（比如rabbitmq服务器已经接收到生产者的消息，但还没来得及持久化该消息时rabbitmq服务器就断电了），如果我们需要对这种小概率事件也要管理起来，那么我们要用到事务。\n\n> # 交换器 exchange\n\nrabbitmq中的exchange有四种类型，不同的类型有着不同的路由策略\n\n> # routing key\n\n生产者在将消息发送给exchange的时候，一般会指定一个routing key，来指定这个消息的路由规则，而这个routing key需要与exchange type及binding key联合使用才能最终生效。 在exchange type与binding key固定的情况下（在正常使用时一般这些内容都是固定配置好的），我们的生产者就可以在发送消息给exchange时，通过指定routing key来决定消息流向哪里。 rabbitmq为routing key设定的长度限制为255 bytes\n\n> # exchange types\n\nrabbitmq常用的exchange type有fanout、direct、topic、headers这四种（amqp规范里还提到两种exchange type，分别为system与自定义，这里不予以描述），下面分别进行介绍。\n\n 1. fanout exchange 不处理路由键。你只需要简单的将队列绑定到交换机上。一个发送到交换机的消息都会被转发到与该交换机绑定的所有队列上。很像子网广播，每台子网内的主机都获得了一份复制的消息。fanout交换机转发消息是最快的。\n 2. direct exchange 处理路由键。需要将一个队列绑定到交换机上，要求该消息与一个特定的路由键完全匹配。这是一个完整的匹配。如果一个队列绑定到该交换机上要求路由键 “test”，则只有被标记为“test”的消息才被转发，不会转发test.aaa，也不会转发dog.123，只会转发test。\n 3. topic exchange 将路由键和某模式进行匹配。此时队列需要绑定要一个模式上。符号 # 匹配一个或多个词，符号 * 匹配不多不少一个词。因此“audit.#”能够匹配到“audit.irs.corporate”，但是“audit.*” 只会匹配到“audit.irs”。\n\n详细资料\n\n# 9.c# 垃圾回收机制\n\n用到gc，命名空间system.gc; 可以强制回收 gc.collect()\n\n * 什么是gc gc如其名，就是垃圾收集，当然这里仅就内存而言。garbage collector（垃圾收集器，在不至于混淆的情况下也成为gc）以应用程序的root为基础，遍历应用程序在heap上动态分配的所有对象[2]，通过识别它们是否被引用来确定哪些对象是已经死亡的、哪些仍需要被使用。已经不再被应用程序的root或者别的对象所引用的对象就是已经死亡的对象，即所谓的垃圾，需要被回收。这就是gc工作的原理。为了实现这个原理，gc有多种算法。比较常见的算法有reference counting，mark sweep，copy collection等等。目前主流的虚拟系统.net clr，java vm和rotor都是采用的mark sweep算法。\n\n# 10..net的gc机制有这样两个问题\n\n * 首先，gc并不是能释放所有的资源。它不能自动释放非托管资源。\n * 第二，gc并不是实时性的，这将会造成系统性能上的瓶颈和不确定性。\n\n> gc并不是实时性的，这会造成系统性能上的瓶颈和不确定性。所以有了idisposable接口，idisposable接口定义了dispose方法，这个方法用来供程序员显式调用以释放非托管资源。使用using语句可以简化资源管理。\n\n# 11.gc注意事项\n\n 1.  只管理内存，非托管资源，如文件句柄，gdi资源，数据库连接等还需要用户去管理。\n 2.  循环引用，网状结构等的实现会变得简单。gc的标志-压缩算法能有效的检测这些关系，并将不再被引用的网状结构整体删除。\n 3.  gc通过从程序的根对象开始遍历来检测一个对象是否可被其他对象访问，而不是用类似于com中的引用计数方法。\n 4.  gc在一个独立的线程中运行来删除不再被引用的内存。\n 5.  gc每次运行时会压缩托管堆。\n 6.  你必须对非托管资源的释放负责。可以通过在类型中定义finalizer来保证资源得到释放。\n 7.  对象的finalizer被执行的时间是在对象不再被引用后的某个不确定的时间。注意并非和c++中一样在对象超出声明周期时立即执行析构函数\n 8.  finalizer的使用有性能上的代价。需要finalization的对象不会立即被清除，而需要先执行finalizer.finalizer，不是在gc执行的线程被调用。gc把每一个需要执行finalizer的对象放到一个队列中去，然后启动另一个线程来执行所有这些finalizer，而gc线程继续去删除其他待回收的对象。在下一个gc周期，这些执行完finalizer的对象的内存才会被回收。\n 9.  .net gc使用\"代\"(generations)的概念来优化性能。代帮助gc更迅速的识别那些最可能成为垃圾的对象。在上次执行完垃圾回收后新创建的对象为第0代对象。经历了一次gc周期的对象为第1代对象。经历了两次或更多的gc周期的对象为第2代对象。代的作用是为了区分局部变量和需要在应用程序生存周期中一直存活的对象。大部分第0代对象是局部变量。成员变量和全局变量很快变成第1代对象并最终成为第2代对象。\n 10. gc对不同代的对象执行不同的检查策略以优化性能。每个gc周期都会检查第0代对象。大约1/10的gc周期检查第0代和第1代对象。大约1/100的gc周期检查所有的对象。重新思考finalization的代价：需要finalization的对象可能比不需要finalization在内存中停留额外9个gc周期。如果此时它还没有被finalize，就变成第2代对象，从而在内存中停留更长时间。\n\n# 12.dotnet 异常处理\n\nc# 语言的异常处理功能有助于处理在程序运行期间发生的任何意外或异常情况。 异常处理功能使用 try、catch 和 finally 关键字来尝试执行可能失败的操作、在你确定合理的情况下处理故障，以及在事后清除资源。 公共语言运行时 (clr)、.net framework/任何第三方库或应用程序代码都可以生成异常。 异常是使用 throw 关键字创建而成。\n\n# 13.dotnet 不能被继承类\n\n在c#中定义了关键字sealed，被sealed修饰的类不能够被继承。在java中同样也有关键字final表示一个类不能被继承。c++11提供final关键字使得类不能够被继承。\n\n# 14.c#栈和堆\n\n我们把内存分为堆空间和栈空间\n\n> 线程堆栈：简称栈 stack 栈空间比较小，但是读取速度快 托管堆： 简称堆 heap 堆空间比较大，但是读取速度慢\n\n----------------------------------------\n\n栈的特征：数据只能从栈的顶端插入和删除把数据放入栈顶称为入栈（push）从栈顶删除数据称为出栈（pop）\n堆：堆是一块内存区域，与栈不同，堆里的内存能够以任意顺序存入和移除\n\n# 15.栈 vs 堆：区别？\n\n栈通常保存着我们代码执行的步骤，而堆上存放的则多是对象，数据等。我们可以把栈想象成一个接着一个叠放在一起的盒子。当我们使用的时候，每次从最顶部取走一个盒子。栈也是如此，当一个方法（或类型）被调用完成的时候，就从栈顶取走，接着下一个。堆则不然，像是一个仓库，储存着我们使用的各种对象等信息，跟栈不同的是他们被调用完毕不会立即被清理掉。\n\n----------------------------------------\n\n栈存储的是基本值类型，堆存储的是new出来的对象。引用类型在栈中存储一个引用，其实际的存储位置位于托管堆。 当我们程序执行的时候，在栈和堆中分配有四种主要的类型：值类型，引用类型，指针，指令。\n\n----------------------------------------\n\n栈：所分配的内存是在一块连续的内存区域内．当我们声明变量时，那么编译器会自动接着当前栈区的结尾来分配内存\n堆：一般由程序员分配释放(new)， 若程序员不释放，程序结束时可能由操作系统回收\n\n# 16.数据库如何优化\n\n 1. 数据库运维方面的优化：启用数据库缓存。对于一些比较常用的查询可以采用数据库缓存的机制，部署的时候需要注意设置好缓存依赖项，防止“过期”数据的产生。\n 2. 数据库索引方面的优化：比如常用的字段建索引，联合查询考虑联合索引。（ps：如果你有基础，可以敞开谈谈聚集索引和非聚集索引的使用场景和区别）\n 3. 数据库查询方面的优化：避免select * 的写法、尽量不用in和not in 这种耗性能的用法等等\n 4. 数据库算法方面的优化：尽量避免大事务操作、减少循环算法，对于大数据量的操作，避免使用游标的用法等等\n\n# 17.你在你以前的项目中，主要解决了什么技术性难题，如果出现问题，你如何迅速找到问题，你遇到问题都是怎么解决的\n\n 1. 先根据出现的问题，大概排查出问出问题的几个点，逐个排查， 错误日志- sql查询计划-定位程序错误，\n 2. 技术性难题： 自己解决---csdn(博客园)---谷歌---请教技术大牛\n 3. 解决的技术难题：\n    * 微信支付，苹果和安卓的支付力度不一样\n    * 消息推送 signalr(以前是长轮询)\n\n# 18.项目中你用到的设计模式有哪些,举例说明\n\n单例：可以保证系统中一个类只有一个实例，并且自行实例化向整个系统提供(例如一个系统中可以存在多个打印任务，但是只能有一个正在工作的任务)\n最简单的就是写考虑线程安全的单例模式\n\npublic class singleton {\n    // 定义一个静态变量来保存类的实例\n    private static singleton uniqueinstance;\n    // 定义一个标识确保线程同步\n    private static readonly object locker = new object();\n    // 定义私有构造函数，使外界不能创建该类实例\n    private singleton() {}\n    // 定义公有方法提供一个全局访问点,同时你也可以定义公有属性来提供全局访问点\n    public static singleton getinstance() {\n        // 双重锁定只需要一句判断就可以了\n        if (uniqueinstance == null) {\n            lock(locker) {\n                // 如果类的实例不存在则创建，否则直接返回\n                if (uniqueinstance == null) {\n                    uniqueinstance = new singleton();\n                }\n            }\n        }\n        return uniqueinstance;\n    }\n}\n\n\n# 19.数据库的索引失效？\n\n删掉索引,然后再重建索引\n\n# 20.iis 经典模式和集成模式的区别\n\n * 经典形式是为了与之前的版本兼容，运用isapi扩展来调用asp.net运转库\n * 集成形式是一种统一的请求处置管道，它将asp.net请求管道与iis中心管道组合在一同，这种形式可以提供更好的性能，可以完成配置和管理的模块化，而且增加了运用托管代码模块扩展iis时的灵敏性。\n\n假设老的web应用程序运转于iis7.0的集成形式下， 可能需求对应用程序的web.config文件停止修正，特别是运用了完成ihttphandler接口的自定义模块的状况。iis7.0在同一个效劳器上可以同时支持两种形式的应用程序。\n\n# 21.多线程 有几种启动方式\n\n使用new thread()和new thread(runnable)形式\n\n * 第一种直接调用thread的run方法，所以，往往使用thread子类，new thread(){}.start();这表示调用thread子类对象的run方法， new thread(){}表示一个thread的匿名子类的实例对象。\n * 第二种调用runnable的run方法。 new thread(new runnable(){}).start();这表示调用thread对象接受的runnable对象的run方法，new runnable(){}表示一个runnable的匿名子类的实例对象\n\n# 22.数据库锁有几种\n\n * 共享-s锁：多个事务可封锁一个共享页；任何事务都不能修改该页； 通常是该页被读取完毕，s锁立即被释放。\n * 排它-x锁：仅允许一个事务封锁此页；其他任何事务必须等到x锁被释放才能对该页进行访问；x锁一直到事务结束才能被释放。\n * 更新-u锁：用来预定要对此页施加x锁，它允许其他事务读，但不允许再施加u锁或x锁；当被读取的页将要被更新时，则升级为x锁；u锁一直到事务结束时才能被释放。\n\n# 23.两个html页面之间怎么传递参数值\n\n 1. 如果页面a和页面b是同域的情况,使用cookie传递参数 ，a页面保存cookie，b页面读取\n 2. 如果页面a和页面b不同域的情况,页面a通过点击链接跳转到页面b的话，那么数据可以通过search和hash附加在b页面的url上，传递给页面b,window对象它们是共享的，因此我们可以通过window.xx来传递数据，比如window.name=123;\n 3. 如果页面a和b，不同域，也没有跳转关系,如果浏览器支持html5的话，我们可以使用window.postmessage来跨域发送数据。\n\n# 24.viewdata和viewbag区别\n\n# viewdata\n\n * viewdata是一个继承自viewdatadictionary类的dictionary对象。\n * viewdata用来从controller向对应的view传递值。\n * viewdata的只在当前当前的请求中有效，生命周期和view相同，其值不能在多个请求中共享。\n * 在重定向(redirection)后，viewdata中存储的变量值将变为null。\n * 在取出viewdata中的变量值是，必须进行合适的类型转换(隐式或显式)和空值检查。\n\n# viewbag\n\n * viewbag是一个动态类型变量(dynamic)，这是c# 4.0引入的新特性，变量类型会在运行时进行解析。\n * viewbag基本上是viewdata的包装，也是用来从controller向view来传递值的。\n * viewbag也只在当前的请求中有效。\n * 在重定向(redirection)后，viewbag中存储的变量值将变为null\n * 因为viewbag是动态类型，所以我们在取得其值时，不需要进行类型转换。\n\n# 25.装箱和取消装箱\n\n装箱是将值类型转换为 object 类型或由此值类型实现的任何接口类型的过程。 当 clr 对值类型进行装箱时，会将该值包装到 system.object内部，再将后者存储在托管堆上。 取消装箱将从对象中提取值类型。 装箱是隐式的；取消装箱是显式的。 装箱和取消装箱的概念是类型系统 c#统一视图的基础，其中任一类型的值都被视为一个对象。\n\n# 26.数据库索引\n\n数据库索引有\n\n * sqlserver 主键索引、唯一索引、聚集索引、非聚集索引\n * mysql 唯一索引（主键索引）、聚集索引、非聚集索引、全文索引\n\n唯一索引\n唯一索引不允许两行具有相同的索引值。\n如果现有数据中存在重复的键值，则大多数数据库都不允许将新创建的唯一索引与表一起保存。当新数据将使表中的键值重复时，数据库也拒绝接受此数据。例如，如果在 employee 表中的职员姓氏(lname) 列上创建了唯一索引，则所有职员不能同姓。\n\n主键索引\n主键索引是唯一索引的特殊类型。\n数据库表通常有一列或列组合，其值用来唯一标识表中的每一行。该列称为表的主键。 在数据库关系图中为表定义一个主键将自动创建主键索引，主键索引是唯一索引的特殊类型。主键索引要求主键中的每个值是唯一的。当在查询中使用主键索引时，它还允许快速访问数据。\n\n它们的一些比较：\n\n 1. 对于主健/unique constraint ， oracle/sql server/mysql等都会自动建立唯一索引；\n 2. 主键不一定只包含一个字段，所以如果你在主键的其中一个字段建唯一索引还是必要的；\n 3. 主健可作外健，唯一索引不可；\n 4. 主健不可为空，唯一索引可；\n 5. 主健也可是多个字段的组合；\n 6. 主键与唯一索引不同的是：\n    1. 有not null属性\n    2. 每个表只能有一个。\n\n聚集索引\n一种索引，该索引中键值的逻辑顺序决定了表中相应行的物理顺序。\n\n非聚集索引\n一种索引，该索引中索引的逻辑顺序与磁盘上行的物理存储顺序不同。\n\n> 索引是通过二叉树的数据结构来描述的，我们可以这么理解聚簇索引：索引的叶节点就是数据节点。而非聚簇索引的叶节点仍然是索引节点，只不过有一个指针指向对应的数据块\n\n聚集索引：可以帮助把很大的范围，迅速减小范围。但是查找该记录，就要从这个小范围中scan了。 非聚集索引：把一个很大的范围，转换成一个小的地图。你需要在这个小地图中找你要寻找的信息的位置。然后通过这个位置，再去找你所需要的记录。\n\n使用场景 基于上述的两种规则，那么在什么时候适合聚集索引，什么时候适合非聚集索引？\n\n# 27.webapi和mvc有什么区别\n\nweb api更倾向于基于http协议的服务，直接返回用户的数据请求。mvc是建站的一种框架，倾向于返回用户的页面请求。 asp.net web api 的特性，更能说明web api是一种数据请求框架：\n\n 1. asp.net web api 可以根据请求报文来返回的相应数据格式。包括json和xml。\n 2. asp.net web api 单独做数据请求和mvc做页面请求可以让web前端和后台更好的解耦，减少开发难度。\n 3. web api 可以更好地用在移动端网页、桌面端网页或者桌面程序，调用方更加多样化。\n 4. web api 的宿主可以选择多样：webhost,，consolehost，甚至是windows services。\n\n> webapi主演提供了一套restfulapi的开发框架，提供了较为完整的http语义支持，主要用来做开放api，更抽象，更不注重view的生成。 mvc的主要使用场景在于web站点的开发，他在后端实现了一套完整的mvc开发框架，能提供方便的页面开发，默认使用razor视图引擎，提供了后端html构造，用户可以方便地开发出带页面的站点。\n\n# 28.array和arraylist的区别\n\n 1. array类型的变量在声明的同时必须进行实例化(至少得初始化数组的大小)，而arraylist可以只是先声明。\n 2. array只能存储同构的对象，而arraylist可以存储异构的对象。 同构的对象是指类型相同的对象，若声明为int[]的数组就只能存放整形数据,string[]只能存放字符型数据,但声明为object[]的数组除外。\n 3. 在clr托管对中的存放方式，array是始终是连续存放的，而arraylist的存放不一定连续。\n 4. 初始化大小 array对象的初始化必须只定指定大小，且创建后的数组大小是固定的\n 5. array不能够随意添加和删除其中的项，而arraylist可以在任意位置插入和删除项。\n\n# 29.web service，wcf， web api\n\nweb service\n\n 1. 它是基于soap协议的，数据格式是xml\n 2. 只支持http协议\n 3. 它不是开源的，但可以被任意一个了解xml的人使用\n 4. 它只能部署在iis上\n\nwcf\n\n 1. 这个也是基于soap的，数据格式是xml\n 2. 这个是web service（asmx）的进化版，可以支持各种各样的协议，像tcp，http，https，named pipes, msmq.\n 3. wcf的主要问题是，它配置起来特别的繁琐\n 4. 它不是开源的，但可以被任意一个了解xml的人使用\n 5. 它可以部署应用程序中或者iis上或者windows服务中\n\nwcf rest\n\n 1. 想使用wcf rest service，你必须在wcf中使用webhttpbindings\n 2. 它分别用[webget]和[webinvoke]属性，实现了http的get和post动词\n 3. 要想使用其他的http动词，你需要在iis中做一些配置，使.svc文件可以接受这些动词的请求\n 4. 使用webget通过参数传输数据，也需要配置。而且必须指定uritemplate\n 5. 它支持xml、json以及atom这些数据格式\n\nweb api\n\n 1. 这是一个简单的构建http服务的新框架\n 2. 在.net平台上web api 是一个开源的、理想的、构建rest-ful 服务的技术\n 3. 不像wcf rest service.它可以使用http的全部特点（比如uris、request/response头，缓存，版本控制，多种内容格式）\n 4. 它也支持mvc的特征，像路由、控制器、action、filter、模型绑定、控制反转（ioc）或依赖注入（di），单元测试。这些可以使程序更简单、更健壮\n 5. 它可以部署在应用程序和iis上\n 6. 这是一个轻量级的框架，并且对限制带宽的设备，比如智能手机等支持的很好\n 7. response可以被web api的mediatypeformatter转换成json、xml 或者任何你想转换的格式。\n\n# 30.wcf和web api我该选择哪个？\n\n 1. 当你想创建一个支持消息、消息队列、双工通信的服务时，你应该选择wcf\n 2. 当你想创建一个服务，可以用更快速的传输通道时，像tcp、named pipes或者甚至是udp（在wcf4.5中）,在其他传输通道不可用的时候也可以支持http。\n 3. 当你想创建一个基于http的面向资源的服务并且可以使用http的全部特征时（比如uris、request/response头，缓存，版本控制，多种内容格式），你应该选择web api\n 4. 当你想让你的服务用于浏览器、手机、iphone和平板电脑时，你应该选择web api\n\n# 31.const和readonly关键字\n\n先来了解静态常量和动态常量。\n\n * 静态常量：所谓静态常量就是在编译期间会对变量进行解析，再将常量的值替换成初始化的值。\n * 动态常量：所谓动态常量就是编译期间会将变量标记只读常量，而不用常量的值代替，这样在声明时可以不初始化，可以延迟到构造函数初始化。\n\nconst修饰的常量是上述中的第一种，即静态常量，而readonly是上述中第二种即动态常量。他们的区别可以从静态常量和动态常量的特性来说明：\n\n * const修饰的常量在声明时必须初始化值；readonly修饰的常量可以不初始化值，且可以延迟到构造函数。\n * cons修饰的常量在编译期间会被解析，并将常量的值替换成初始化的值；而readonly延迟到运行的时候。\n * const修饰的常量注重的是效率；readonly修饰的常量注重灵活。\n * const修饰的常量没有内存消耗；readonly因为需要保存常量，所以有内存消耗。\n * const只能修饰基元类型、枚举类、或者字符串类型;readonly却没有这个限制。\n\n# 32.值类型、引用类型\n\n 1. 值类型(valuetype) 值类型包括：数值类型，结构体，bool型，用户定义的结构体，枚举，可空类型。\n    值类型的变量直接存储数据，分配在托管栈中。变量会在创建它们的方法返回时自动释放，例如在一个方法中声明char型的变量name=’c’，当实例化它的方法结束时，name变量在栈上占用的内存就会自动释放 c#的所有值类型均隐式派生自system.valuetype。\n\n 2. 引用类型(referencetype) 引用类型包括：数组，用户定义的类、接口、委托，object，字符串，null类型，类。\n    引用类型的变量持有的是数据的引用，数据存储在数据堆，分配在托管堆中，变量并不会在创建它们的方法结束时释放内存，它们所占用的内存会被clr中的垃圾回收机制释放。\n\n# 33.装箱和拆箱\n\n * 装箱就是将一个值类型转换成等值的引用类型\n   在堆上为新生成的对象(该对象包含数据，对象本身没有名称)分配内存。\n   将堆栈上值类型变量的值拷贝到堆上的对象中。\n   将堆上创建的对象的地址返回给引用类型变量(从程序员角度看，这个变量的名称就好像堆上对象的名称一样)。\n\n * 拆箱就是将一个引用类型转换成等值的值类型\n   将引用类型变量堆上的值拷贝到栈上面。\n\n# 34.ref与out\n\nref和out都是按地址传递,使用后都将改变原来参数的数值。\n\n# ref关键字\n\n 1. 方法定义和调用方法都必须显式使用 ref 关键字\n 2. 传递到 ref 参数的参数必须初始化,否则程序会报错\n 3. 通过ref的这个特性,一定程度上解决了c#中的函数只能有一个返回值的问题\n\n# out关键字\n\n方法定义和调用方法都必须显式使用 out关键字\n\n 1. 方法定义和调用方法都必须显式使用 out关键字\n 2. out关键字无法将参数值传递到out参数所在的方法中,只能传递参数的引用(个人理解),所以out参数的参数值初始化必须在其方法内进行,否则程序会报错\n 3. 通过out的这个特性,一定程度上解决了c#中的函数只能有一个返回值的问题\n\n# 35.new和override的区别\n\n * override是指“覆盖”，是指子类覆盖了父类的方法。子类的对象无法再访问父类中的该方法。\n * new是指“隐藏”，是指子类隐藏了父类的方法，当然，通过一定的转换，可以在子类的对象中访问父类的方法。\n\n# 36.attribute介绍\n\n> msdn中定义为：公共语言运行时运行添加类似关键字的描述声明，叫做attribute，它对程序中的元素进行标注，如类型、方法、字段和属性等。attribute和microsoft.net framework文件的元数据保存在一起，可以用来在运行时描述你的代码，或者在程序运行时影响应用程序的行为。\n\n我们简单地总结：定制特性attribute，本质上是一个类，其为目标元素提供关联附加信息，并在运行时以反射的方式来获取附件信息。\n\n# attribute通用规则\n\n 1. 特性可以应用的目标元素包括：程序集(assemby)、模块(module)、类型(type)、属性(property)、事件(event)、字段(field)、方法(method)、参数(param)、返回值(return).\n 2. 特性以[,]形式展示。放在紧挨着元素上\n 3. attribute实例，是在编译期进行初始化，而不是运行期。\n\n# 37.c# .net内置委托\n\n# 委托是什么\n\n委托是一个类，它定义了方法的类型，使得可以将方法当作另一个方法的参数来进行传递，这种将方法动态地赋给参数的做法，可以避免在程序中大量使用if-else(switch)语句，同时使得程序具有更好的可扩展性。\n\n委托是一种特殊的类型（class），用途是来实现对一种方法的封装。在某种事件发生时，自动调用该方法。好处显然易见，它使用户可以自定义自己的方法实现，通过封装，clr会在相应事件激发时调用你定义的方法，实现你的功能。\n\nc#内置委托 action、action<t>、func<t>、predicate<t>\nclr环境中给我们内置了几个常用委托action、 action<t>、func<t>、predicate<t>，一般我们要用到委托的时候，尽量不要自己再定义一 个委托了，就用系统内置的这几个已经能够满足大部分的需求，且让代码符合规范。\n\n# 38.什么是aop?\n\n这种在运行时，动态地将代码切入到类的指定方法、指定位置上的编程思想就是面向切面的编程。 aop面向切面编程链接\n\n# 39.asp.net mvc -filter\n\n\n\n# 40.lock 应锁定什么类型对象\n\n首先先上官方msdn的说法\n\n> lock 关键字可确保当一个线程位于代码的临界区时，另一个线程不会进入该临界区。 如果其他线程尝试进入锁定的代码，则它将一直等待（即被阻止），直到该对象被释放。\n> lock 关键字在块的开始处调用 enter，而在块的结尾处调用 exit。 threadinterruptedexception 引发，如果 interrupt 中断等待输入 lock 语句的线程。 通常，应避免锁定 public 类型，否则实例将超出代码的控制范围。\n> 常见的结构 lock (this)、lock (typeof (mytype)) 和 lock (\"mylock\") 违反此准则：\n> 如果实例可以被公共访问，将出现 lock (this) 问题。\n> 如果 mytype 可以被公共访问，将出现 lock (typeof (mytype)) 问题。\n> 由于进程中使用同一字符串的任何其他代码都将共享同一个锁，所以出现 lock(\"mylock\") 问题。\n> 最佳做法是定义 private 对象来锁定, 或 private static 对象变量来保护所有实例所共有的数据。\n> 在 lock 语句的正文不能使用 等待 关键字。\n\n打个比方，有这样一个情景，很多公司所在的大厦的厕所的蹲位都是小单间型的，也就是一次只能进去一个人，那么为了避免每次进去一个人，那怎么做呢？不就是一个人进去之后顺手把门锁上么？这样你在里面干啥事，外边的人也只能等待你解放完了，才能进入。而蹲位的资源（蹲位，手纸等）是共享的。\n\n最常使用的锁是如下格式的代码段：\n\nprivate static object objlock = new object();\nlock (objlock )\n{\n    //要执行的代码逻辑\n}\n\n\n为什么锁的对象是私有的呢？还是以厕所为例子吧，私有就好比，这把锁只有你能访问到，而且最好这把锁不会因为外力而有所改变，别人访问不到，这样才能保证你进去了，别人就进不去了，如果是公有的，就好比你蹲位小单间的锁不是安装在里面而是安装在外边的，别人想不想进就不是你所能控制的了，这样也不安全。\n\n# 关于lock的介绍就到这里，有下面几点需要注意的地方\n\n 1. lock的是引用类型的对象，string类型除外。\n 2. lock推荐的做法是使用静态的、只读的、私有的对象。\n 3. 保证lock的对象在外部无法修改才有意义，如果lock的对象在外部改变了，对其他线程就会畅通无阻，失去了lock的意义。\n\n# 41.rabbitmq 优点\n\n * 安装部署简单，上手门槛低，功能丰富，符合amqp标准；\n * 企业级消息队列，经过大量实践考验的高可靠；\n * 集群易扩展，可以轻松的增减集群节点；\n * 有强大的web管理页面。\n\n> amqp，即advanced message queuing protocol,一个提供统一消息服务的应用层标准高级消息队列协议,是应用层协议的一个开放标准,为面向消息的中间件设计。基于此协议的客户端与消息中间件可传递消息，并不受客户端/中间件不同产品，不同的开发语言等条件的限制。erlang中的实现有 rabbitmq等。 什么是amqp 高级消息队列协议使得遵从该规范的客户端应用和消息中间件服务器的全功能互操作成为可能。\n\n----------------------------------------\n\n# 42.javascript\n\n//快速排序 递归\nfunction quicksort(arr){\n    if(arr.length<=1) return arr;\n    var num = math.floor(arr.length/2);//找到中间数的索引值，如果是浮点数，则向下取整\n    var numvalue = arr.splice(num,1);//找到中间数的值\n    var left = [] , right = [];    \n    for(var i = 0; i< arr.length ; i++){\n        if(arr[i]<numvalue ){            \n            left.push(arr[i]);//基准点的左边的数传到左边数组\n        }else{\n            right.push(arr[i]);//基准点的右边的数传到右边数组\n        }\n    }\n    return quicksort(left).concat([numvalue],quicksort(right));//递归不断重复比较\n}\n// parseint 实现 \nfunction _parseint (str, radix) {\n  let str_type = typeof str\n  let res = 0\n  if (str_type !== 'string' && str_type !== 'number') {\n     // 如果类型不是 string 或 number 类型返回nan\n     return nan\n  }\n\n  // 字符串处理\n  str = string(str).trim().split('.')[0]\n  let length = str.length\n  if (!length) {\n    // 如果为空则返回 nan\n    return nan\n  }\n\n  if (!radix) {\n    // 如果 radix 为0 null undefined\n    // 则转化为 10\n    radix = 10\n  }\n  if (typeof radix !== 'number' || radix < 2 || radix > 36) {\n    return nan\n  }\n\n  for (let i = 0; i < length; i++) {\n    let arr = str.split('').reverse().join('')\n    res += math.floor(arr[i]) * math.pow(radix, i)\n  }\n  return res\n}\n\n//获取url参数返回object对象\nfunction fn(){\n    var _array = location.href.split('?'),obj = {};\n    if(_array.length==1) return obj;\n    var array = _array[1].split('&');\n    for(var i = 0 ;i < array.length; i++){\n     var temp = array[i].split('=')\n     obj[temp[0]] = temp[1];\n    }\n    return obj;\n}\n\nfunction fn2(){\n    var _array = location.href.match(/([^?&=]+)=([^?&=]*)/g),obj = {};\n    if(_array){\n        for(var i = 0 ;i < _array.length; i++){\n           var temp = _array[i].split('=')\n           obj[temp[0]] = temp[1];\n }\n    }\n    return obj;\n}\n\n//去除空格\nstring.replace(/(^\\s*)|(\\s*$)/gi,'');\n\n//call()方法和apply()\n//1. 每个函数都包含两个非继承而来的方法：call()方法和apply()方法。\n//2. 相同点：这两个方法的作用是一样的。\n//3. 不同点：接收参数的方式不同。\n//apply()方法 接收两个参数，一个是函数运行的作用域（this），另一个是参数数组。\napply([thisobj [,argarray] ]);\n//call()方法 第一个参数和apply()方法的一样，但是传递给函数的参数必须列举出来。\ncall([thisobject[,arg1 [,arg2 [,...,argn]]]]);\n\n//闭包\n//定义和用法：当一个函数的返回值是另外一个函数，而返回的那个函数如果调用了其父函数内部的其它变量，如果返回的这个函数在外部被执行，就产生了闭包。\n//表现形式：使函数外部能够调用函数内部定义的变量。\n//什么是跨域？\n//由于浏览器同源策略，凡是发送请求url的协议、域名、端口三者之间任意一与当前页面地址不同即为跨域\n//porxy代理 通过nginx代理\n//cors 【cross-origin resource sharing】\nres.writehead(200, {\n    \"content-type\": \"text/html; charset=utf-8\",\n    \"access-control-allow-origin\":'http://localhost',\n    'access-control-allow-methods': 'get, post, options',\n    'access-control-allow-headers': 'x-requested-with, content-type'\n});\n//jsonp\nfunction testjsonp(data) {\n    console.log(data.name); // 获取返回的结果\n}\nvar _script = document.createelement('script');\n_script.type = \"text/javascript\";\n_script.src = \"http://localhost:8888/jsonp?callback=testjsonp\";\ndocument.head.appendchild(_script);\n",charsets:{cjk:!0}},{title:"Java基础面试高频问题1~80",frontmatter:{title:"Java基础面试高频问题1~80",date:"2023-04-07T16:03:17.000Z",permalink:"/pages/interView/java/001/"},regularPath:"/01.%E9%9D%A2%E7%BB%8F%E5%9B%AD%E5%9C%B0/01.Java/01.Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%AB%98%E9%A2%91%E9%97%AE%E9%A2%98.html",relativePath:"01.面经园地/01.Java/01.Java基础面试高频问题.md",key:"v-e759cae6",path:"/pages/interView/java/001/",headers:[{level:2,title:'1.一个".java"源文件中是否可以包括多个类（不是内部类）？有什么限制？',slug:"_1-一个-java-源文件中是否可以包括多个类-不是内部类-有什么限制",normalizedTitle:"1.一个&quot;.java&quot;源文件中是否可以包括多个类（不是内部类）？有什么限制？",charIndex:null},{level:2,title:"2.Java有没有goto?",slug:"_2-java有没有goto",normalizedTitle:"2.java有没有goto?",charIndex:109},{level:2,title:"3.说说&和&&的区别",slug:"_3-说说-和-的区别",normalizedTitle:"3.说说&amp;和&amp;&amp;的区别",charIndex:null},{level:2,title:"4.在JAVA中如何跳出当前的多重嵌套循环？",slug:"_4-在java中如何跳出当前的多重嵌套循环",normalizedTitle:"4.在java中如何跳出当前的多重嵌套循环？",charIndex:579},{level:2,title:"5.switch语句能否作用在byte上，能否作用在long上，能否作用在String上?",slug:"_5-switch语句能否作用在byte上-能否作用在long上-能否作用在string上",normalizedTitle:"5.switch语句能否作用在byte上，能否作用在long上，能否作用在string上?",charIndex:1320},{level:2,title:"6.short s1 = 1; s1 = s1 + 1;有什么错? short s1 = 1; s1 += 1;有什么错?",slug:"_6-short-s1-1-s1-s1-1-有什么错-short-s1-1-s1-1-有什么错",normalizedTitle:"6.short s1 = 1; s1 = s1 + 1;有什么错? short s1 = 1; s1 += 1;有什么错?",charIndex:1563},{level:2,title:"7.char型变量中能不能存贮一个中文汉字?为什么?",slug:"_7-char型变量中能不能存贮一个中文汉字-为什么",normalizedTitle:"7.char型变量中能不能存贮一个中文汉字?为什么?",charIndex:1796},{level:2,title:"8.用最有效率的方法算出2乘以8等于几?",slug:"_8-用最有效率的方法算出2乘以8等于几",normalizedTitle:"8.用最有效率的方法算出2乘以8等于几?",charIndex:1994},{level:2,title:"9.请设计一个一百亿的计算器",slug:"_9-请设计一个一百亿的计算器",normalizedTitle:"9.请设计一个一百亿的计算器",charIndex:2115},{level:2,title:"10.使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？",slug:"_10-使用final关键字修饰一个变量时-是引用不能变-还是引用的对象不能变",normalizedTitle:"10.使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？",charIndex:3836},{level:2,title:'11."=="和equals方法究竟有什么区别？',slug:"_11-和equals方法究竟有什么区别",normalizedTitle:"11.&quot;==&quot;和equals方法究竟有什么区别？",charIndex:null},{level:2,title:"12.静态变量和实例变量的区别？",slug:"_12-静态变量和实例变量的区别",normalizedTitle:"12.静态变量和实例变量的区别？",charIndex:5308},{level:2,title:"13.是否可以从一个static方法内部发出对非static方法的调用？",slug:"_13-是否可以从一个static方法内部发出对非static方法的调用",normalizedTitle:"13.是否可以从一个static方法内部发出对非static方法的调用？",charIndex:5964},{level:2,title:"14.Integer与int的区别",slug:"_14-integer与int的区别",normalizedTitle:"14.integer与int的区别",charIndex:6216},{level:2,title:"15.Math.round(11.5)等于多少? Math.round(-11.5)等于多少?",slug:"_15-math-round-11-5-等于多少-math-round-11-5-等于多少",normalizedTitle:"15.math.round(11.5)等于多少? math.round(-11.5)等于多少?",charIndex:6709},{level:2,title:"16.请说出作用域public，private，protected，以及不写时的区别",slug:"_16-请说出作用域public-private-protected-以及不写时的区别",normalizedTitle:"16.请说出作用域public，private，protected，以及不写时的区别",charIndex:7084},{level:2,title:"17.Overload和Override的区别。Overloaded的方法是否可以改变返回值的类型?",slug:"_17-overload和override的区别。overloaded的方法是否可以改变返回值的类型",normalizedTitle:"17.overload和override的区别。overloaded的方法是否可以改变返回值的类型?",charIndex:7460},{level:2,title:"18.构造器Constructor是否可被override?",slug:"_18-构造器constructor是否可被override",normalizedTitle:"18.构造器constructor是否可被override?",charIndex:8895},{level:2,title:"19.接口是否可继承接口? 抽象类是否可实现(implements)接口? 抽象类是否可继承具体类(concrete class)? 抽象类中是否可以有静态的main方法？",slug:"_19-接口是否可继承接口-抽象类是否可实现-implements-接口-抽象类是否可继承具体类-concrete-class-抽象类中是否可以有静态的main方法",normalizedTitle:"19.接口是否可继承接口? 抽象类是否可实现(implements)接口? 抽象类是否可继承具体类(concrete class)? 抽象类中是否可以有静态的main方法？",charIndex:8982},{level:2,title:"20.写clone()方法时，通常都有一行代码，是什么？",slug:"_20-写clone-方法时-通常都有一行代码-是什么",normalizedTitle:"20.写clone()方法时，通常都有一行代码，是什么？",charIndex:9278},{level:2,title:"21.面向对象的特征有哪些方面",slug:"_21-面向对象的特征有哪些方面",normalizedTitle:"21.面向对象的特征有哪些方面",charIndex:9368},{level:2,title:"22.java中实现多态的机制是什么？",slug:"_22-java中实现多态的机制是什么",normalizedTitle:"22.java中实现多态的机制是什么？",charIndex:11466},{level:2,title:"23.abstract class和interface有什么区别?",slug:"_23-abstract-class和interface有什么区别",normalizedTitle:"23.abstract class和interface有什么区别?",charIndex:11599},{level:2,title:"24.abstract的method是否可同时是static,是否可同时是native，是否可同时是synchronized?",slug:"_24-abstract的method是否可同时是static-是否可同时是native-是否可同时是synchronized",normalizedTitle:"24.abstract的method是否可同时是static,是否可同时是native，是否可同时是synchronized?",charIndex:13603},{level:2,title:"25.什么是内部类？Static Nested Class 和 Inner Class的不同",slug:"_25-什么是内部类-static-nested-class-和-inner-class的不同",normalizedTitle:"25.什么是内部类？static nested class 和 inner class的不同",charIndex:14332},{level:2,title:"26.内部类可以引用它的包含类的成员吗？有没有什么限制？",slug:"_26-内部类可以引用它的包含类的成员吗-有没有什么限制",normalizedTitle:"26.内部类可以引用它的包含类的成员吗？有没有什么限制？",charIndex:16582},{level:2,title:"27.Anonymous Inner Class (匿名内部类) 是否可以extends(继承)其它类，是否可以implements(实现)interface(接口)?",slug:"_27-anonymous-inner-class-匿名内部类-是否可以extends-继承-其它类-是否可以implements-实现-interface-接口",normalizedTitle:"27.anonymous inner class (匿名内部类) 是否可以extends(继承)其它类，是否可以implements(实现)interface(接口)?",charIndex:16920},{level:2,title:"28.super.getClass()方法调用",slug:"_28-super-getclass-方法调用",normalizedTitle:"28.super.getclass()方法调用",charIndex:17037},{level:2,title:"29.String是最基本的数据类型吗?",slug:"_29-string是最基本的数据类型吗",normalizedTitle:"29.string是最基本的数据类型吗?",charIndex:17588},{level:2,title:'30.String s = "Hello";s = s + " world!";这两行代码执行后，原始的String对象中的内容到底变了没有？',slug:"_30-string-s-hello-s-s-world-这两行代码执行后-原始的string对象中的内容到底变了没有",normalizedTitle:"30.string s = &quot;hello&quot;;s = s + &quot; world!&quot;;这两行代码执行后，原始的string对象中的内容到底变了没有？",charIndex:null},{level:2,title:"31.是否可以继承String类?",slug:"_31-是否可以继承string类",normalizedTitle:"31.是否可以继承string类?",charIndex:18896},{level:2,title:'32.String s = new String("xyz");创建了几个String Object? 二者之间有什么区别？',slug:"_32-string-s-new-string-xyz-创建了几个string-object-二者之间有什么区别",normalizedTitle:"32.string s = new string(&quot;xyz&quot;);创建了几个string object? 二者之间有什么区别？",charIndex:null},{level:2,title:"33.String 和StringBuffer的区别",slug:"_33-string-和stringbuffer的区别",normalizedTitle:"33.string 和stringbuffer的区别",charIndex:19166},{level:2,title:"34.如何把一段逗号分割的字符串转换成一个数组?",slug:"_34-如何把一段逗号分割的字符串转换成一个数组",normalizedTitle:"34.如何把一段逗号分割的字符串转换成一个数组?",charIndex:19991},{level:2,title:"35.数组有没有length()这个方法? String有没有length()这个方法？",slug:"_35-数组有没有length-这个方法-string有没有length-这个方法",normalizedTitle:"35.数组有没有length()这个方法? string有没有length()这个方法？",charIndex:20281},{level:2,title:'36.下面这条语句一共创建了多少个对象? String s="a"+"b"+"c"+"d"',slug:"_36-下面这条语句一共创建了多少个对象-string-s-a-b-c-d",normalizedTitle:"36.下面这条语句一共创建了多少个对象? string s=&quot;a&quot;+&quot;b&quot;+&quot;c&quot;+&quot;d&quot;",charIndex:null},{level:2,title:"37.try {}里有一个return语句，那么紧跟在这个try后的finally {}里的code会不会被执行，什么时候被执行，在return前还是后?",slug:"_37-try-里有一个return语句-那么紧跟在这个try后的finally-里的code会不会被执行-什么时候被执行-在return前还是后",normalizedTitle:"37.try {}里有一个return语句，那么紧跟在这个try后的finally {}里的code会不会被执行，什么时候被执行，在return前还是后?",charIndex:20848},{level:2,title:"38.下面的程序代码输出的结果是多少？",slug:"_38-下面的程序代码输出的结果是多少",normalizedTitle:"38.下面的程序代码输出的结果是多少？",charIndex:21398},{level:2,title:"39.final, finally, finalize的区别",slug:"_39-final-finally-finalize的区别",normalizedTitle:"39.final, finally, finalize的区别",charIndex:22465},{level:2,title:"40.运行时异常与一般异常有何异同？",slug:"_40-运行时异常与一般异常有何异同",normalizedTitle:"40.运行时异常与一般异常有何异同？",charIndex:22694},{level:2,title:"41.error和exception有什么区别?",slug:"_41-error和exception有什么区别",normalizedTitle:"41.error和exception有什么区别?",charIndex:22827},{level:2,title:"42.Java中的异常处理机制的简单原理和应用",slug:"_42-java中的异常处理机制的简单原理和应用",normalizedTitle:"42.java中的异常处理机制的简单原理和应用",charIndex:22962},{level:2,title:"43.请写出你最常见到的5个runtime exception",slug:"_43-请写出你最常见到的5个runtime-exception",normalizedTitle:"43.请写出你最常见到的5个runtime exception",charIndex:23797},{level:2,title:"44.java中有几种方法可以实现一个线程？用什么关键字修饰同步方法? stop()和suspend()方法为何不推荐使用？",slug:"_44-java中有几种方法可以实现一个线程-用什么关键字修饰同步方法-stop-和suspend-方法为何不推荐使用",normalizedTitle:"44.java中有几种方法可以实现一个线程？用什么关键字修饰同步方法? stop()和suspend()方法为何不推荐使用？",charIndex:24149},{level:2,title:"45.sleep() 和 wait() 有什么区别?",slug:"_45-sleep-和-wait-有什么区别",normalizedTitle:"45.sleep() 和 wait() 有什么区别?",charIndex:25441},{level:2,title:"46.同步和异步有何异同，在什么情况下分别使用他们？举例说明",slug:"_46-同步和异步有何异同-在什么情况下分别使用他们-举例说明",normalizedTitle:"46.同步和异步有何异同，在什么情况下分别使用他们？举例说明",charIndex:28130},{level:2,title:"47.多线程有几种实现方法?同步有几种实现方法?",slug:"_47-多线程有几种实现方法-同步有几种实现方法",normalizedTitle:"47.多线程有几种实现方法?同步有几种实现方法?",charIndex:28321},{level:2,title:"48.启动一个线程是用run()还是start()？",slug:"_48-启动一个线程是用run-还是start",normalizedTitle:"48.启动一个线程是用run()还是start()？",charIndex:28670},{level:2,title:"49.当一个线程进入一个对象的一个synchronized方法后，其它线程是否可进入此对象的其它方法?",slug:"_49-当一个线程进入一个对象的一个synchronized方法后-其它线程是否可进入此对象的其它方法",normalizedTitle:"49.当一个线程进入一个对象的一个synchronized方法后，其它线程是否可进入此对象的其它方法?",charIndex:28781},{level:2,title:"50.线程的基本概念、线程的基本状态以及状态之间的关系",slug:"_50-线程的基本概念、线程的基本状态以及状态之间的关系",normalizedTitle:"50.线程的基本概念、线程的基本状态以及状态之间的关系",charIndex:29032},{level:2,title:"51.简述synchronized和java.util.concurrent.locks.Lock的异同 ？",slug:"_51-简述synchronized和java-util-concurrent-locks-lock的异同",normalizedTitle:"51.简述synchronized和java.util.concurrent.locks.lock的异同 ？",charIndex:29518},{level:2,title:"52.设计4个线程，其中两个线程每次对j增加1，另外两个线程对j每次减少1。写出程序",slug:"_52-设计4个线程-其中两个线程每次对j增加1-另外两个线程对j每次减少1。写出程序",normalizedTitle:"52.设计4个线程，其中两个线程每次对j增加1，另外两个线程对j每次减少1。写出程序",charIndex:31072},{level:2,title:"53.子线程循环10次，接着主线程循环100，接着又回到子线程循环10次，接着再回到主线程又循环100，如此循环50次，请写出程序",slug:"_53-子线程循环10次-接着主线程循环100-接着又回到子线程循环10次-接着再回到主线程又循环100-如此循环50次-请写出程序",normalizedTitle:"53.子线程循环10次，接着主线程循环100，接着又回到子线程循环10次，接着再回到主线程又循环100，如此循环50次，请写出程序",charIndex:32406},{level:2,title:"54.Collection框架中实现比较要实现什么接口",slug:"_54-collection框架中实现比较要实现什么接口",normalizedTitle:"54.collection框架中实现比较要实现什么接口",charIndex:36738},{level:2,title:"55.ArrayList和Vector的区别",slug:"_55-arraylist和vector的区别",normalizedTitle:"55.arraylist和vector的区别",charIndex:36793},{level:2,title:"56.HashMap和Hashtable的区别",slug:"_56-hashmap和hashtable的区别",normalizedTitle:"56.hashmap和hashtable的区别",charIndex:37754},{level:2,title:"57.List 和 Map 区别?",slug:"_57-list-和-map-区别",normalizedTitle:"57.list 和 map 区别?",charIndex:38438},{level:2,title:"58.List, Set, Map是否继承自Collection接口?",slug:"_58-list-set-map是否继承自collection接口",normalizedTitle:"58.list, set, map是否继承自collection接口?",charIndex:38553},{level:2,title:"59.List、Map、Set三个接口，存取元素时，各有什么特点？",slug:"_59-list、map、set三个接口-存取元素时-各有什么特点",normalizedTitle:"59.list、map、set三个接口，存取元素时，各有什么特点？",charIndex:38610},{level:2,title:"60.说出ArrayList,Vector, LinkedList的存储性能和特性",slug:"_60-说出arraylist-vector-linkedlist的存储性能和特性",normalizedTitle:"60.说出arraylist,vector, linkedlist的存储性能和特性",charIndex:40067},{level:2,title:"61.去掉一个Vector集合中重复的元素",slug:"_61-去掉一个vector集合中重复的元素",normalizedTitle:"61.去掉一个vector集合中重复的元素",charIndex:40404},{level:2,title:"62.Collection 和 Collections的区别",slug:"_62-collection-和-collections的区别",normalizedTitle:"62.collection 和 collections的区别",charIndex:40631},{level:2,title:"63.Set里的元素是不能重复的，那么用什么方法来区分重复与否呢? 是用==还是equals()? 它们有何区别?",slug:"_63-set里的元素是不能重复的-那么用什么方法来区分重复与否呢-是用-还是equals-它们有何区别",normalizedTitle:"63.set里的元素是不能重复的，那么用什么方法来区分重复与否呢? 是用==还是equals()? 它们有何区别?",charIndex:40767},{level:2,title:"64.你所知道的集合类都有哪些？主要方法？",slug:"_64-你所知道的集合类都有哪些-主要方法",normalizedTitle:"64.你所知道的集合类都有哪些？主要方法？",charIndex:40940},{level:2,title:"65.两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，这句话对不对?",slug:"_65-两个对象值相同-x-equals-y-true-但却可有不同的hash-code-这句话对不对",normalizedTitle:"65.两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，这句话对不对?",charIndex:41473},{level:2,title:"66.TreeSet里面放对象，如果同时放入了父类和子类的实例对象，那比较时使用的是父类的compareTo方法，还是使用的子类的compareTo方法，还是抛异常",slug:"_66-treeset里面放对象-如果同时放入了父类和子类的实例对象-那比较时使用的是父类的compareto方法-还是使用的子类的compareto方法-还是抛异常",normalizedTitle:"66.treeset里面放对象，如果同时放入了父类和子类的实例对象，那比较时使用的是父类的compareto方法，还是使用的子类的compareto方法，还是抛异常",charIndex:41712},{level:2,title:"67.说出一些常用的类，包，接口，请各举5个",slug:"_67-说出一些常用的类-包-接口-请各举5个",normalizedTitle:"67.说出一些常用的类，包，接口，请各举5个",charIndex:42684},{level:2,title:"68.java中有几种类型的流？JDK为每种类型的流提供了一些抽象类以供继承，请说出他们分别是哪些类？",slug:"_68-java中有几种类型的流-jdk为每种类型的流提供了一些抽象类以供继承-请说出他们分别是哪些类",normalizedTitle:"68.java中有几种类型的流？jdk为每种类型的流提供了一些抽象类以供继承，请说出他们分别是哪些类？",charIndex:43152},{level:2,title:"69.字节流与字符流的区别",slug:"_69-字节流与字符流的区别",normalizedTitle:"69.字节流与字符流的区别",charIndex:43328},{level:2,title:"70.什么是java序列化，如何实现java序列化？或者请解释Serializable接口的作用",slug:"_70-什么是java序列化-如何实现java序列化-或者请解释serializable接口的作用",normalizedTitle:"70.什么是java序列化，如何实现java序列化？或者请解释serializable接口的作用",charIndex:45032},{level:2,title:"71.描述一下JVM加载class文件的原理机制?",slug:"_71-描述一下jvm加载class文件的原理机制",normalizedTitle:"71.描述一下jvm加载class文件的原理机制?",charIndex:45591},{level:2,title:"72.heap和stack有什么区别",slug:"_72-heap和stack有什么区别",normalizedTitle:"72.heap和stack有什么区别",charIndex:45707},{level:2,title:"73.GC是什么? 为什么要有GC?",slug:"_73-gc是什么-为什么要有gc",normalizedTitle:"73.gc是什么? 为什么要有gc?",charIndex:45944},{level:2,title:"74.垃圾回收的优点和原理。并考虑2种回收机制",slug:"_74-垃圾回收的优点和原理。并考虑2种回收机制",normalizedTitle:"74.垃圾回收的优点和原理。并考虑2种回收机制",charIndex:46111},{level:2,title:"75.垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？",slug:"_75-垃圾回收器的基本原理是什么-垃圾回收器可以马上回收内存吗-有什么办法主动通知虚拟机进行垃圾回收",normalizedTitle:"75.垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？",charIndex:46416},{level:2,title:"76.什么时候用assert",slug:"_76-什么时候用assert",normalizedTitle:"76.什么时候用assert",charIndex:46663},{level:2,title:"77.java中会存在内存泄漏吗，请简单描述",slug:"_77-java中会存在内存泄漏吗-请简单描述",normalizedTitle:"77.java中会存在内存泄漏吗，请简单描述",charIndex:47212},{level:2,title:"78.能不能自己写个类，也叫java.lang.String？",slug:"_78-能不能自己写个类-也叫java-lang-string",normalizedTitle:"78.能不能自己写个类，也叫java.lang.string？",charIndex:50359},{level:2,title:"79.获得一个类的类对象有哪些方式？",slug:"_79-获得一个类的类对象有哪些方式",normalizedTitle:"79.获得一个类的类对象有哪些方式？",charIndex:51067},{level:2,title:"80.Java代码查错",slug:"_80-java代码查错",normalizedTitle:"80.java代码查错",charIndex:51223}],headersStr:'1.一个".java"源文件中是否可以包括多个类（不是内部类）？有什么限制？ 2.Java有没有goto? 3.说说&和&&的区别 4.在JAVA中如何跳出当前的多重嵌套循环？ 5.switch语句能否作用在byte上，能否作用在long上，能否作用在String上? 6.short s1 = 1; s1 = s1 + 1;有什么错? short s1 = 1; s1 += 1;有什么错? 7.char型变量中能不能存贮一个中文汉字?为什么? 8.用最有效率的方法算出2乘以8等于几? 9.请设计一个一百亿的计算器 10.使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？ 11."=="和equals方法究竟有什么区别？ 12.静态变量和实例变量的区别？ 13.是否可以从一个static方法内部发出对非static方法的调用？ 14.Integer与int的区别 15.Math.round(11.5)等于多少? Math.round(-11.5)等于多少? 16.请说出作用域public，private，protected，以及不写时的区别 17.Overload和Override的区别。Overloaded的方法是否可以改变返回值的类型? 18.构造器Constructor是否可被override? 19.接口是否可继承接口? 抽象类是否可实现(implements)接口? 抽象类是否可继承具体类(concrete class)? 抽象类中是否可以有静态的main方法？ 20.写clone()方法时，通常都有一行代码，是什么？ 21.面向对象的特征有哪些方面 22.java中实现多态的机制是什么？ 23.abstract class和interface有什么区别? 24.abstract的method是否可同时是static,是否可同时是native，是否可同时是synchronized? 25.什么是内部类？Static Nested Class 和 Inner Class的不同 26.内部类可以引用它的包含类的成员吗？有没有什么限制？ 27.Anonymous Inner Class (匿名内部类) 是否可以extends(继承)其它类，是否可以implements(实现)interface(接口)? 28.super.getClass()方法调用 29.String是最基本的数据类型吗? 30.String s = "Hello";s = s + " world!";这两行代码执行后，原始的String对象中的内容到底变了没有？ 31.是否可以继承String类? 32.String s = new String("xyz");创建了几个String Object? 二者之间有什么区别？ 33.String 和StringBuffer的区别 34.如何把一段逗号分割的字符串转换成一个数组? 35.数组有没有length()这个方法? String有没有length()这个方法？ 36.下面这条语句一共创建了多少个对象? String s="a"+"b"+"c"+"d" 37.try {}里有一个return语句，那么紧跟在这个try后的finally {}里的code会不会被执行，什么时候被执行，在return前还是后? 38.下面的程序代码输出的结果是多少？ 39.final, finally, finalize的区别 40.运行时异常与一般异常有何异同？ 41.error和exception有什么区别? 42.Java中的异常处理机制的简单原理和应用 43.请写出你最常见到的5个runtime exception 44.java中有几种方法可以实现一个线程？用什么关键字修饰同步方法? stop()和suspend()方法为何不推荐使用？ 45.sleep() 和 wait() 有什么区别? 46.同步和异步有何异同，在什么情况下分别使用他们？举例说明 47.多线程有几种实现方法?同步有几种实现方法? 48.启动一个线程是用run()还是start()？ 49.当一个线程进入一个对象的一个synchronized方法后，其它线程是否可进入此对象的其它方法? 50.线程的基本概念、线程的基本状态以及状态之间的关系 51.简述synchronized和java.util.concurrent.locks.Lock的异同 ？ 52.设计4个线程，其中两个线程每次对j增加1，另外两个线程对j每次减少1。写出程序 53.子线程循环10次，接着主线程循环100，接着又回到子线程循环10次，接着再回到主线程又循环100，如此循环50次，请写出程序 54.Collection框架中实现比较要实现什么接口 55.ArrayList和Vector的区别 56.HashMap和Hashtable的区别 57.List 和 Map 区别? 58.List, Set, Map是否继承自Collection接口? 59.List、Map、Set三个接口，存取元素时，各有什么特点？ 60.说出ArrayList,Vector, LinkedList的存储性能和特性 61.去掉一个Vector集合中重复的元素 62.Collection 和 Collections的区别 63.Set里的元素是不能重复的，那么用什么方法来区分重复与否呢? 是用==还是equals()? 它们有何区别? 64.你所知道的集合类都有哪些？主要方法？ 65.两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，这句话对不对? 66.TreeSet里面放对象，如果同时放入了父类和子类的实例对象，那比较时使用的是父类的compareTo方法，还是使用的子类的compareTo方法，还是抛异常 67.说出一些常用的类，包，接口，请各举5个 68.java中有几种类型的流？JDK为每种类型的流提供了一些抽象类以供继承，请说出他们分别是哪些类？ 69.字节流与字符流的区别 70.什么是java序列化，如何实现java序列化？或者请解释Serializable接口的作用 71.描述一下JVM加载class文件的原理机制? 72.heap和stack有什么区别 73.GC是什么? 为什么要有GC? 74.垃圾回收的优点和原理。并考虑2种回收机制 75.垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？ 76.什么时候用assert 77.java中会存在内存泄漏吗，请简单描述 78.能不能自己写个类，也叫java.lang.String？ 79.获得一个类的类对象有哪些方式？ 80.Java代码查错',content:'> 本文收集自网络，原出处不明。\n\n\n# 1.一个".java"源文件中是否可以包括多个类（不是内部类）？有什么限制？\n\n可以有多个类，但只能有一个public的类，并且public的类名必须与文件名相一致。\n\n\n# 2.Java有没有goto?\n\n没有，但是 goto 是 java 中的保留字。\n\n\n# 3.说说&和&&的区别\n\n&和&&都可以用作逻辑与的运算符，表示逻辑与（and），当运算符两边的表达式的结果都为true时，整个运算结果才为true，否则，只要有一方为false，则结果为false。\n\n&&还具有短路的功能，即如果第一个表达式为false，则不再计算第二个表达式，例如，对于if(str != null && !str.equals(“”))表达式，当str为null时，后面的表达式不会执行，所以不会出现NullPointerException如果将&&改为&，则会抛出NullPointerException异常。If(x==33 & ++y>0) y会增长，If(x==33 && ++y>0)不会增长\n\n&还可以用作位运算符，当&操作符两边的表达式不是boolean类型时，&表示按位与操作，我们通常使用0x0f来与一个整数进行&运算，来获取该整数的最低4个bit位，例如，0x31 & 0x0f的结果为0x01。\n\n\n# 4.在JAVA中如何跳出当前的多重嵌套循环？\n\n在Java中，要想跳出多重循环，可以在外面的循环语句前定义一个标号，然后在里层循环体的代码中使用带有标号的break 语句，即可跳出外层循环。例如，\n\n    ok:\n    for (int i = 0; i < 10; i++) {\n        for (int j = 0; j < 10; j++) {\n            System.out.println("i=" + i + ",j=" + j);\n            if (j == 5) break ok;\n        }\n    }\n\n\n另外，可以不使用标号这种方式，而是让外层的循环条件表达式的结果可以受到里层循环体代码的控制，例如，要在二维数组中查找到某个数字。\n\n    int[][] arr = {{1, 2, 3}, {4, 5, 6, 7}, {9}};\n    boolean found = false;\n    for (int i = 0; i < arr.length && !found; i++) {\n        for (int j = 0; j < arr[i].length; j++) {\n            System.out.println("i = " + i + ", j = " + j);\n            if (arr[i][j] == 5) {\n                found = true;\n                break;\n            }\n        }\n    }\n\n\n敲黑板：建议使用第二种，第一种已经被业界淘汰了。\n\n\n# 5.switch语句能否作用在byte上，能否作用在long上，能否作用在String上?\n\n在switch（expr1）中，expr1只能是一个整数表达式或者枚举常量（更大字体），整数表达式可以是int基本类型或Integer包装类型，由于，byte,short,char都可以隐含转换为int，所以，这些类型以及这些类型的包装类型也是可以的。\n\nswitch 不支持 long 类型；从 java1.7开始 switch 开始支持 String，这是 Java 的语法糖。\n\n\n# 6.short s1 = 1; s1 = s1 + 1;有什么错? short s1 = 1; s1 += 1;有什么错?\n\n对于short s1 = 1; s1 = s1 + 1; 由于s1+1运算时会自动提升表达式的类型，所以结果是int型，再赋值给short类型s1时，编译器将报告需要强制转换类型的错误。\n\n对于short s1 = 1; s1 += 1;由于 += 是java语言规定的运算符，java编译器会对它进行特殊处理，因此可以正确编译。\n\n\n# 7.char型变量中能不能存贮一个中文汉字?为什么?\n\nchar型变量是用来存储Unicode编码的字符的，unicode编码字符集中包含了汉字，所以，char型变量中当然可以存储汉字啦。不过，如果某个特殊的汉字没有被包含在unicode编码字符集中，那么，这个char型变量中就不能存储这个特殊汉字。补充说明：unicode编码占用两个字节，所以，char类型的变量也是占用两个字节。\n\n\n# 8.用最有效率的方法算出2乘以8等于几?\n\n2 << 3。因为将一个数左移n位，就相当于乘以了2的n次方，那么，一个数乘以8只要将其左移3位即可，而位运算cpu直接支持的，效率最高，所以，2乘以8等於几的最效率的方法是2 << 3。\n\n\n# 9.请设计一个一百亿的计算器\n\n首先要明白这道题目的考查点是什么，一是要对计算机原理的底层细节要清楚，要知道加减法的位运算原理和计算机中的算术运算会发生越界的情况；二是要具备一定的面向对象的设计思想。\n\n首先，计算机中用固定数量的几个字节来存储的数值，所以计算机中能够表示的数值是有一定的范围的，先以byte 类型的整数为例，它用1个字节进行存储，表示的最大数值范围为-128到+127。-1在内存中对应的二进制数据为11111111，如果两个-1相加，不考虑Java运算时的类型提升，运算后会产生进位，二进制结果为1,11111110，由于进位后超过了byte类型的存储空间，所以进位部分被舍弃，即最终的结果为11111110，也就是-2，这正好利用溢位的方式实现了负数的运算。-128在内存中对应的二进制数据为10000000，如果两个-128相加，不考虑Java运算时的类型提升，运算后会产生进位，二进制结果为1,00000000，由于进位后超过了byte类型的存储空间，所以进位部分被舍弃，即最终的结果为00000000，也就是0，这样的结果显然不符合期望，这说明计算机中的算术运算是会发生越界情况的，两个数值的运算结果不能超过计算机中的该类型的数值范围。由于Java中涉及表达式运算时的类型自动提升，无法用byte类型来做演示这种问题和现象的实验，可以用下面一个使用整数做实验的例子程序体验一下：\n\n    int a = Integer.MAX_VALUE;\n    int b = Integer.MAX_VALUE;\n    int sum = a + b;\n    System.out.println(“a=”+a+”,b=”+b+”,sum=”+sum);\n\n\n先不考虑long类型，由于int的正数范围为2的31次方，表示的最大数值约等于210001000*1000，也就是20亿的大小，所以，要实现一个一百亿的计算器，我们得自己设计一个类可以用于表示很大的整数，并且提供了与另外一个整数进行加减乘除的功能，大概功能如下：\n\n1）这个类内部有两个成员变量，一个表示符号，另一个用字节数组表示数值的二进制数；\n\n2）有一个构造方法，把一个包含有多位数值的字符串转换到内部的符号和字节数组中；\n\n3）提供加减乘除的功能；\n\npublic class BigInteger{\n  int sign;\n  byte[] val;\n  public Biginteger(String val) {\n   sign = ;\n   val = ;\n  }\n  public BigInteger add(BigInteger other) {\n   \n  }\n  public BigInteger subtract(BigInteger other) {\n   \n  }\n  public BigInteger multiply(BigInteger other){\n   \n  }\n  public BigInteger divide(BigInteger other){\n   \n  }\n}\n\n\n备注：要想写出这个类的完整代码，是非常复杂的，如果有兴趣的话，可以参看jdk中自带的java.math.BigInteger类的源码。面试的人也知道谁都不可能在短时间内写出这个类的完整代码的，他要的是你是否有这方面的概念和意识，他最重要的还是考查你的能力，所以，不要因为自己无法写出完整的最终结果就放弃答这道题，能做的就是你比别人写得多，证明你比别人强，有这方面的思想意识就可以了，毕竟别人可能连题目的意思都看不懂，什么都没写，要敢于答这道题，即使只答了一部分，那也与那些什么都不懂的人区别出来，拉开了距离，算是矮子中的高个，机会当然就得到了。另外，答案中的框架代码也很重要，体现了一些面向对象设计的功底，特别是其中的方法命名很专业，用的英文单词很精准，这也是能力、经验、专业性、英语水平等多个方面的体现，会给人留下很好的印象，在编程能力和其他方面条件差不多的情况下，英语好除了可以获得更多机会外，薪水可以高出一千元。\n\n\n# 10.使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？\n\n使用final关键字修饰一个变量时，是指引用变量不能变，引用变量所指向的对象中的内容还是可以改变的。例如，对于如下语句：\n\nfinal StringBuffer a=new StringBuffer("immutable");\n\n\n执行如下语句将报告编译期错误：\n\na=new StringBuffer("");\n\n\n但是，执行如下语句则可以通过编译：\n\na.append(" broken!");\n\n\n有人在定义方法的参数时，可能想采用如下形式来阻止方法内部修改传进来的参数对象：\n\npublic void method(final StringBuffer param){}\n\n\n实际上，这是办不到的，在该方法内部仍然可以增加如下代码来修改参数对象：\n\nparam.append("a");\n\n\n\n# 11."=="和equals方法究竟有什么区别？\n\n==操作符专门用来比较两个变量的值是否相等，也就是用于比较变量所对应的内存中所存储的数值是否相同，要比较两个基本类型的数据或两个引用变量是否相等，只能用==操作符。\n\n如果一个变量指向的数据是对象类型的，那么，这时候涉及了两块内存，对象本身占用一块内存（堆内存），变量也占用一块内存，例如Objet obj = new Object();变量obj是一个内存，new Object()是另一个内存，此时，变量obj所对应的内存中存储的数值就是对象占用的那块内存的首地址。对于指向对象类型的变量，如果要比较两个变量是否指向同一个对象，即要看这两个变量所对应的内存中的数值是否相等，这时候就需要用==操作符进行比较。\n\nequals方法是用于比较两个独立对象的内容是否相同，就好比去比较两个人的长相是否相同，它比较的两个对象是独立的。例如，对于下面的代码：\n\nString a=new String("foo");\nString b=new String("foo");\n\n\n两条new语句创建了两个对象，然后用a,b这两个变量分别指向了其中一个对象，这是两个不同的对象，它们的首地址是不同的，即a和b中存储的数值是不相同的，所以，表达式a==b将返回false，而这两个对象中的内容是相同的，所以，表达式a.equals(b)将返回true。\n\n在实际开发中，我们经常要比较传递进行来的字符串内容是否等，例如，String input = input.equals(“quit”)，许多人稍不注意就使用==进行比较了，这是错误的，随便从网上找几个项目实战的教学视频看看，里面就有大量这样的错误。记住，字符串的比较基本上都是使用equals方法。\n\n如果一个类没有自己定义equals方法，那么它将继承Object类的equals方法，Object类的equals方法的实现代码如下：\n\nboolean equals(Object o){\nreturn this==o;\n}\n\n\n这说明，如果一个类没有自己定义equals方法，它默认的equals方法（从Object 类继承的）就是使用==操作符，也是在比较两个变量指向的对象是否是同一对象，这时候使用equals和使用==会得到同样的结果，如果比较的是两个独立的对象则总返回false。如果你编写的类希望能够比较该类创建的两个实例对象的内容是否相同，那么你必须覆盖equals方法，由你自己写代码来决定在什么情况即可认为两个对象的内容是相同的。\n\n\n# 12.静态变量和实例变量的区别？\n\n在语法定义上的区别：静态变量前要加static关键字，而实例变量前则不加。\n\n在程序运行时的区别：实例变量属于某个对象的属性，必须创建了实例对象，其中的实例变量才会被分配空间，才能使用这个实例变量。静态变量不属于某个实例对象，而是属于类，所以也称为类变量，只要程序加载了类的字节码，不用创建任何实例对象，静态变量就会被分配空间，静态变量就可以被使用了。总之，实例变量必须创建对象后才可以通过这个对象来使用，静态变量则可以直接使用类名来引用。\n\n例如，对于下面的程序，无论创建多少个实例对象，永远都只分配了一个staticVar变量，并且每创建一个实例对象，这个staticVar就会加1；但是，每创建一个实例对象，就会分配一个instanceVar，即可能分配多个instanceVar，并且每个instanceVar的值都只自加了1次。\n\npublic class VariantTest {\n    public static int staticVar = 0;\n    public int instanceVar = 0;\n\n    public VariantTest() {\n        staticVar++;\n        instanceVar++;\n        System.out.println("staticVar=" + staticVar + ",instanceVar=" + instanceVar);\n    }\n}\n\n\n\n# 13.是否可以从一个static方法内部发出对非static方法的调用？\n\n不可以。\n\n因为非static方法是要与对象关联在一起的，必须创建一个对象后，才可以在该对象上进行方法调用，而static方法调用时不需要创建对象，可以直接调用。也就是说，当一个static方法被调用时，可能还没有创建任何实例对象，如果从一个static方法中发出对非static方法的调用，那个非static方法是关联到哪个对象上的呢？这个逻辑无法成立，所以，一个static方法内部发出对非static方法的调用。\n\n\n# 14.Integer与int的区别\n\nint是java提供的8种原始数据类型之一。Java为每个原始类型提供了封装类，Integer是java为int提供的封装类。int的默认值为0，而Integer的默认值为null，即Integer可以区分出未赋值和值为0的区别，int则无法表达出未赋值的情况，例如，要想表达出没有参加考试和考试成绩为0的区别，则只能使用Integer。在JSP开发中，Integer的默认为null，所以用el表达式在文本框中显示时，值为空白字符串，而int默认的默认值为0，所以用el表达式在文本框中显示时，结果为0，所以，int不适合作为web层的表单数据的类型。\n\n在Hibernate中，如果将OID定义为Integer类型，那么Hibernate就可以根据其值是否为null而判断一个对象是否是临时的，如果将OID定义为了int类型，还需要在hbm映射文件中设置其unsaved-value属性为0。\n\n另外，Integer提供了多个与整数相关的操作方法，例如，将一个字符串转换成整数，Integer中还定义了表示整数的最大值和最小值的常量。\n\n\n# 15.Math.round(11.5)等于多少? Math.round(-11.5)等于多少?\n\nMath类中提供了三个与取整有关的方法：ceil、floor、round，这些方法的作用与它们的英文名称的含义相对应，例如，ceil的英文意义是天花板，该方法就表示向上取整，Math.ceil(11.3)的结果为12,Math.ceil(-11.3)的结果是-11；floor的英文意义是地板，该方法就表示向下取整，Math.floor(11.6)的结果为11,Math.floor(-11.6)的结果是-12；最难掌握的是round方法，它表示“四舍五入”，算法为Math.floor(x+0.5)，即将原来的数字加上0.5后再向下取整，所以，Math.round(11.5)的结果为12，Math.round(-11.5)的结果为-11。\n\n\n# 16.请说出作用域public，private，protected，以及不写时的区别\n\n这四个作用域的可见范围如下表所示。\n\n说明：如果在修饰的元素上面没有写任何访问修饰符，则表示friendly。\n\n作用域         当前类   同一PACKAGE   子孙类   其他PACKAGE\npublic      √     √           √     √\nprotected   √     √           √     ×\nfriendly    √     √           ×     ×\nprivate     √     ×           ×     ×\n\n备注：只要记住了有4种访问权限，4个访问范围，然后将全选和范围在水平和垂直方向上分别按排从小到大或从大到小的顺序排列，就很容易画出上面的图了。\n\n\n# 17.Overload和Override的区别。Overloaded的方法是否可以改变返回值的类型?\n\nOverload是重载的意思，Override是覆盖的意思，也就是重写。\n\n重载Overload表示同一个类中可以有多个名称相同的方法，但这些方法的参数列表各不相同（即参数个数或类型不同）。\n\n重写Override表示子类中的方法可以与父类中的某个方法的名称和参数完全相同，通过子类创建的实例对象调用这个方法时，将调用子类中的定义方法，这相当于把父类中定义的那个完全相同的方法给覆盖了，这也是面向对象编程的多态性的一种表现。子类覆盖父类的方法时，只能比父类抛出更少的异常，或者是抛出父类抛出的异常的子异常，因为子类可以解决父类的一些问题，不能比父类有更多的问题。子类方法的访问权限只能比父类的更大，不能更小。如果父类的方法是private类型，那么，子类则不存在覆盖的限制，相当于子类中增加了一个全新的方法。\n\n至于Overloaded的方法是否可以改变返回值的类型这个问题，要看你倒底想问什么呢？这个题目很模糊。如果几个Overloaded的方法的参数列表不一样，它们的返回者类型当然也可以不一样。但我估计你想问的问题是：如果两个方法的参数列表完全一样，是否可以让它们的返回值不同来实现重载Overload。这是不行的，我们可以用反证法来说明这个问题，因为我们有时候调用一个方法时也可以不定义返回结果变量，即不要关心其返回结果，例如，我们调用map.remove(key)方法时，虽然remove方法有返回值，但是我们通常都不会定义接收返回结果的变量，这时候假设该类中有两个名称和参数列表完全相同的方法，仅仅是返回类型不同，java就无法确定编程者倒底是想调用哪个方法了，因为它无法通过返回结果类型来判断。\n\noverride可以翻译为覆盖，从字面就可以知道，它是覆盖了一个方法并且对其重写，以求达到不同的作用。对我们来说最熟悉的覆盖就是对接口方法的实现，在接口中一般只是对方法进行了声明，而我们在实现时，就需要实现接口声明的所有方法。除了这个典型的用法以外，我们在继承中也可能会在子类覆盖父类中的方法。在覆盖要注意以下的几点：\n\n1）覆盖的方法的标志必须要和被覆盖的方法的标志完全匹配，才能达到覆盖的效果；\n\n2）覆盖的方法的返回值必须和被覆盖的方法的返回一致；\n\n3）覆盖的方法所抛出的异常必须和被覆盖方法的所抛出的异常一致，或者是其子类；\n\n4）被覆盖的方法不能为private，否则在其子类中只是新定义了一个方法，并没有对其进行覆盖。\n\noverload对我们来说可能比较熟悉，可以翻译为重载，它是指我们可以定义一些名称相同的方法，通过定义不同的输入参数来区分这些方法，然后再调用时，JVM就会根据不同的参数样式，来选择合适的方法执行。在使用重载要注意以下的几点：\n\n1）在使用重载时只能通过不同的参数样式。例如，不同的参数类型，不同的参数个数，不同的参数顺序（当然，同一方法内的几个参数类型必须不一样，例如可以是fun(int,float)，但是不能为fun(int,int)）；\n\n2）不能通过访问权限、返回类型、抛出的异常进行重载；\n\n3）方法的异常类型和数目不会对重载造成影响；\n\n4）对于继承来说，如果某一方法在父类中是访问权限是priavte，那么就不能在子类对其进行重载，如果定义的话，也只是定义了一个新方法，而不会达到重载的效果。\n\n\n# 18.构造器Constructor是否可被override?\n\n构造器Constructor不能被继承，因此不能重写Override，但可以被重载Overload。\n\n\n# 19.接口是否可继承接口? 抽象类是否可实现(implements)接口? 抽象类是否可继承具体类(concrete class)? 抽象类中是否可以有静态的main方法？\n\n接口可以继承接口。抽象类可以实现(implements)接口，抽象类可以继承具体类。抽象类中可以有静态的main方法。\n\n备注：只要明白了接口和抽象类的本质和作用，这些问题都很好回答，想想看，如果自己作为是java语言的设计者，是否会提供这样的支持，如果不提供的话，有什么理由吗？如果没有道理不提供，那答案就是肯定的了。\n\n只有记住抽象类与普通类的唯一区别就是不能创建实例对象和允许有abstract方法。\n\n\n# 20.写clone()方法时，通常都有一行代码，是什么？\n\nclone 有缺省行为，super.clone();因为首先要把父类中的成员复制到位，然后才是复制自己的成员。\n\n\n# 21.面向对象的特征有哪些方面\n\n计算机软件系统是现实生活中的业务在计算机中的映射，而现实生活中的业务其实就是一个个对象协作的过程。面向对象编程就是按现实业务一样的方式将程序代码按一个个对象进行组织和编写，让计算机系统能够识别和理解用对象方式组织和编写的程序代码，这样就可以把现实生活中的业务对象映射到计算机系统中。\n\n面向对象的编程语言有封装、继承 、抽象、多态等4个主要的特征。\n\n1）封装：\n\n封装是保证软件部件具有优良的模块性的基础，封装的目标就是要实现软件部件的“高内聚、低耦合”，防止程序相互依赖性而带来的变动影响。在面向对象的编程语言中，对象是封装的最基本单位，面向对象的封装比传统语言的封装更为清晰、更为有力。面向对象的封装就是把描述一个对象的属性和行为的代码封装在一个“模块”中，也就是一个类中，属性用变量定义，行为用方法进行定义，方法可以直接访问同一个对象中的属性。通常情况下，只要记住让变量和访问这个变量的方法放在一起，将一个类中的成员变量全部定义成私有的，只有这个类自己的方法才可以访问到这些成员变量，这就基本上实现对象的封装，就很容易找出要分配到这个类上的方法了，就基本上算是会面向对象的编程了。把握一个原则：把对同一事物进行操作的方法和相关的方法放在同一个类中，把方法和它操作的数据放在同一个类中。\n\n例如，人要在黑板上画圆，这一共涉及三个对象：人、黑板、圆，画圆的方法要分配给哪个对象呢？由于画圆需要使用到圆心和半径，圆心和半径显然是圆的属性，如果将它们在类中定义成了私有的成员变量，那么，画圆的方法必须分配给圆，它才能访问到圆心和半径这两个属性，人以后只是调用圆的画圆方法、表示给圆发给消息而已，画圆这个方法不应该分配在人这个对象上，这就是面向对象的封装性，即将对象封装成一个高度自治和相对封闭的个体，对象状态（属性）由这个对象自己的行为（方法）来读取和改变。一个更便于理解的例子就是，司机将火车刹住了，刹车的动作是分配给司机，还是分配给火车，显然，应该分配给火车，因为司机自身是不可能有那么大的力气将一个火车给停下来的，只有火车自己才能完成这一动作，火车需要调用内部的离合器和刹车片等多个器件协作才能完成刹车这个动作，司机刹车的过程只是给火车发了一个消息，通知火车要执行刹车动作而已。\n\n2）继承：\n\n在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并可以加入若干新的内容，或修改原来的方法使之更适合特殊的需要，这就是继承。继承是子类自动共享父类数据和方法的机制，这是类之间的一种关系，提高了软件的可重用性和可扩展性。\n\n3）抽象：\n\n抽象就是找出一些事物的相似和共性之处，然后将这些事物归为一个类，这个类只考虑这些事物的相似和共性之处，并且会忽略与当前主题和目标无关的那些方面，将注意力集中在与当前目标有关的方面。例如，看到一只蚂蚁和大象，你能够想象出它们的相同之处，那就是抽象。抽象包括行为抽象和状态抽象两个方面。例如，定义一个Person类，如下：\n\nclass Person{\n\nString name;\n\nint age;\n\n}\n\n人本来是很复杂的事物，有很多方面，但因为当前系统只需要了解人的姓名和年龄，所以上面定义的类中只包含姓名和年龄这两个属性，这就是一种抽像，使用抽象可以避免考虑一些与目标无关的细节。我对抽象的理解就是不要用显微镜去看一个事物的所有方面，这样涉及的内容就太多了，而是要善于划分问题的边界，当前系统需要什么，就只考虑什么。\n\n4）多态：\n\n多态是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。因为在程序运行时才确定具体的类，这样，不用修改源程序代码，就可以让引用变量绑定到各种不同的类实现上，从而导致该引用调用的具体方法随之改变，即不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性。多态性增强了软件的灵活性和扩展性。例如，下面代码中的UserDao是一个接口，它定义引用变量userDao指向的实例对象由daofactory.getDao()在执行的时候返回，有时候指向的是UserJdbcDao这个实现，有时候指向的是UserHibernateDao这个实现，这样，不用修改源代码，就可以改变userDao指向的具体类实现，从而导致userDao.insertUser()方法调用的具体代码也随之改变，即有时候调用的是UserJdbcDao的insertUser方法，有时候调用的是UserHibernateDao的insertUser方法：\n\nUserDao userDao = daofactory.getDao();\n\nuserDao.insertUser(user);\n\n比喻：人吃饭，你看到的是左手，还是右手？\n\n\n# 22.java中实现多态的机制是什么？\n\n靠的是父类或接口定义的引用变量可以指向子类或具体实现类的实例对象，而程序调用的方法在运行期才动态绑定，就是引用变量所指向的具体实例对象的方法，也就是内存里正在运行的那个对象的方法，而不是引用变量的类型中定义的方法。\n\n\n# 23.abstract class和interface有什么区别?\n\n含有abstract修饰符的class即为抽象类，abstract 类不能创建的实例对象。含有abstract方法的类必须定义为abstract class，abstract class类中的方法不必是抽象的。abstract class类中定义抽象方法必须在具体(Concrete)子类中实现，所以，不能有抽象构造方法或抽象静态方法。如果的子类没有实现抽象父类中的所有抽象方法，那么子类也必须定义为abstract类型。\n\n接口（interface）可以说成是抽象类的一种特例，接口中的所有方法都必须是抽象的。接口中的方法定义默认为public abstract类型，接口中的成员变量类型默认为public static final。\n\n下面比较一下两者的语法区别：\n\n1）抽象类可以有构造方法，接口中不能有构造方法。\n\n2）抽象类中可以有普通成员变量，接口中没有普通成员变量\n\n3）抽象类中可以包含非抽象的普通方法，接口中的所有方法必须都是抽象的，不能有非抽象的普通方法。\n\n4） 抽象类中的抽象方法的访问类型可以是public，protected和（默认类型,虽然\n\neclipse下不报错，但应该也不行），但接口中的抽象方法只能是public类型的，并且默认即为public abstract类型。\n\n5）抽象类中可以包含静态方法，接口中不能包含静态方法\n\n6）抽象类和接口中都可以包含静态成员变量，抽象类中的静态成员变量的访问类型可以任意，但接口中定义的变量只能是public static final类型，并且默认即为public static final类型。\n\n7）一个类可以实现多个接口，但只能继承一个抽象类。\n\n下面接着再说说两者在应用上的区别：\n\n接口更多的是在系统架构设计方法发挥作用，主要用于定义模块之间的通信契约。而抽象类在代码实现方面发挥作用，可以实现代码的重用，例如，模板方法设计模式是抽象类的一个典型应用，假设某个项目的所有Servlet类都要用相同的方式进行权限判断、记录访问日志和处理异常，那么就可以定义一个抽象的基类，让所有的Servlet都继承这个抽象基类，在抽象基类的service方法中完成权限判断、记录访问日志和处理异常的代码，在各个子类中只是完成各自的业务逻辑代码，伪代码如下：\n\npublic abstract class BaseServlet extends HttpServlet {\n\n    public final void service(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n        // 记录访问日志, 进行权限判断\n        if (具有权限) {\n            try {\n                doService(request, response);\n            } catch (Exception e) {\n                // todo：记录异常信息\n            }\n        }\n    }\n\n    protected abstract void doService(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n        //注意访问权限定义成protected，显得既专业，又严谨，因为它是专门给子类用的\n    }\n}\n\n\npublic class MyServlet1 extends BaseServlet {\n    protected void doService(HttpServletRequest request, HttpServletResponse response) throws IOExcetion, ServletException {\n        // 本Servlet只处理的具体业务逻辑代码\n    }\n}\n\n\n父类方法中间的某段代码不确定，留给子类干，就用模板方法设计模式。 备注：这道题的思路是先从总体解释抽象类和接口的基本概念，然后再比较两者的语法细节，最后再说两者的应用区别。比较两者语法细节区别的条理是：先从一个类中的构造方法、普通成员变量和方法（包括抽象方法），静态变量和方法，继承性等6个方面逐一去比较回答，接着从第三者继承的角度的回答，特别是最后用了一个典型的例子来展现自己深厚的技术功底。\n\n\n# 24.abstract的method是否可同时是static,是否可同时是native，是否可同时是synchronized?\n\nabstract的method 不可以是static的，因为抽象的方法是要被子类实现的，而static与子类扯不上关系！\n\nnative方法表示该方法要用另外一种依赖平台的编程语言实现的，不存在着被子类实现的问题，所以，它也不能是抽象的，不能与abstract混用。例如，FileOutputSteam类要硬件打交道，底层的实现用的是操作系统相关的api实现，例如，在windows用c语言实现的，所以，查看jdk 的源代码，可以发现FileOutputStream的open方法的定义如下：\n\nprivate native void open(String name) throws FileNotFoundException;\n\n如果我们要用java调用别人写的c语言函数，我们是无法直接调用的，我们需要按照java的要求写一个c语言的函数，又我们的这个c语言函数去调用别人的c语言函数。由于我们的c语言函数是按java的要求来写的，我们这个c语言函数就可以与java对接上，java那边的对接方式就是定义出与我们这个c函数相对应的方法，java中对应的方法不需要写具体的代码，但需要在前面声明native。\n\n关于synchronized与abstract合用的问题，我觉得也不行，因为在我几年的学习和开发中，从来没见到过这种情况，并且我觉得synchronized应该是作用在一个具体的方法上才有意义。而且，方法上的synchronized同步所使用的同步锁对象是this，而抽象方法上无法确定this是什么。\n\n\n# 25.什么是内部类？Static Nested Class 和 Inner Class的不同\n\n内部类就是在一个类的内部定义的类，内部类中不能定义静态成员（静态成员不是对象的特性，只是为了找一个容身之处，所以需要放到一个类中而已，这么一点小事，你还要把它放到类内部的一个类中，过分了啊！提供内部类，不是为让你干这种事情，无聊，不让你干。我想可能是既然静态成员类似c语言的全局变量，而内部类通常是用于创建内部对象用的，所以，把“全局变量”放在内部类中就是毫无意义的事情，既然是毫无意义的事情，就应该被禁止），内部类可以直接访问外部类中的成员变量，内部类可以定义在外部类的方法外面，也可以定义在外部类的方法体中，如下所示：\n\npublic class Outer {\n    int out_x = 0;\n\n    public void method() {\n        //在方法体内部定义的内部类\n        class Inner2 {\n            public void method() {\n                out_x = 3;\n            }\n        }\n        Inner2 inner2 = new Inner2();\n    }\n\n    //在方法体外面定义的内部类\n    public class Inner1 {\n\n    }\n}\n\n\n在方法体外面定义的内部类的访问类型可以是public,protecte,默认的，private等4种类型，这就好像类中定义的成员变量有4种访问类型一样，它们决定这个内部类的定义对其他类是否可见；对于这种情况，我们也可以在外面创建内部类的实例对象，创建内部类的实例对象时，一定要先创建外部类的实例对象，然后用这个外部类的实例对象去创建内部类的实例对象，代码如下：\n\nOuter outer = new Outer();\nOuter.Inner1 inner1 = outer.new Innner1();\n\n\n在方法内部定义的内部类前面不能有访问类型修饰符，就好像方法中定义的局部变量一样，但这种内部类的前面可以使用final或abstract修饰符。这种内部类对其他类是不可见的其他类无法引用这种内部类，但是这种内部类创建的实例对象可以传递给其他类访问。这种内部类必须是先定义，后使用，即内部类的定义代码必须出现在使用该类之前，这与方法中的局部变量必须先定义后使用的道理也是一样的。这种内部类可以访问方法体中的局部变量，但是，该局部变量前必须加final修饰符。\n\n对于这些细节，只要在eclipse写代码试试，根据开发工具提示的各类错误信息就可以马上了解到。\n\n在方法体内部还可以采用如下语法来创建一种匿名内部类，即定义某一接口或类的子类的同时，还创建了该子类的实例对象，无需为该子类定义名称：\n\npublic class Outer {\n    public void start() {\n        new Thread(new Runnable() {\n            public void run() {\n            }\n        }).start();\n    }\n}\n\n\n最后，在方法外部定义的内部类前面可以加上static关键字，从而成为Static Nested Class，它不再具有内部类的特性，所有，从狭义上讲，它不是内部类。Static Nested Class与普通类在运行时的行为和功能上没有什么区别，只是在编程引用时的语法上有一些差别，它可以定义成public、protected、默认的、private等多种类型，而普通类只能定义成public和默认的这两种类型。在外面引用Static Nested Class类的名称为“外部类名.内部类名”。在外面不需要创建外部类的实例对象，就可以直接创建Static Nested Class，例如，假设Inner是定义在Outer类中的Static Nested Class，那么可以使用如下语句创建Inner类：\n\nOuter.Inner inner = new Outer.Inner();\n\n\n由于static Nested Class不依赖于外部类的实例对象，所以，static Nested Class能访问外部类的非static成员变量。当在外部类中访问Static Nested Class时，可以直接使用Static Nested Class的名字，而不需要加上外部类的名字了，在Static Nested Class中也可以直接引用外部类的static的成员变量，不需要加上外部类的名字。\n\n在静态方法中定义的内部类也是Static Nested Class，这时候不能在类前面加static关键字，静态方法中的Static Nested Class与普通方法中的内部类的应用方式很相似，它除了可以直接访问外部类中的static的成员变量，还可以访问静态方法中的局部变量，但是，该局部变量前必须加final修饰符。\n\n备注：首先根据印象说出自己对内部类的总体方面的特点。例如，在两个地方可以定义，可以访问外部类的成员变量，不能定义静态成员，这是大的特点。然后再说一些细节方面的知识，例如，几种定义方式的语法区别，静态内部类，以及匿名内部类。\n\n\n# 26.内部类可以引用它的包含类的成员吗？有没有什么限制？\n\n完全可以。如果不是静态内部类，那没有什么限制！\n\n如果把静态嵌套类当作内部类的一种特例，那在这种情况下不可以访问外部类的普通成员变量，而只能访问外部类中的静态成员，例如，下面的代码：\n\nclass Outer {\n    static int x;\n\n    static class Inner {\n        void test() {\n            syso(x);\n        }\n    }\n}\n\n\n答题时，也要能察言观色，揣摩提问者的心思，显然面试官想知道的是静态内部类不能访问外部类的成员，但如果一上来就顶牛，这不好，要先顺着人家，让人家满意，然后再说特殊情况，让人家吃惊。\n\n\n# 27.Anonymous Inner Class (匿名内部类) 是否可以extends(继承)其它类，是否可以implements(实现)interface(接口)?\n\n可以继承其他类或实现其他接口。不仅是可以，而是必须!\n\n\n# 28.super.getClass()方法调用\n\n下面程序的输出结果是多少？\n\nimport java.util.Date;\n\npublic class Test extends Date {\n public static void main(String[] args) {\n  new Test().test();\n }\n \n public void test() {\n  System.out.println(super.getClass().getName());\n }\n}\n\n\n很奇怪，结果是Test。\n\n在test方法中，直接调用getClass().getName()方法，返回的是Test类名。由于getClass()在Object类中定义成了final，子类不能覆盖该方法，所以，在test方法中调用getClass().getName()方法，其实就是在调用从父类继承的getClass()方法，等效于调用super.getClass().getName()方法，所以，super.getClass().getName()方法返回的也应该是Test。\n\n如果想得到父类的名称，应该用如下代码：\n\ngetClass().getSuperClass().getName();\n\n\n\n# 29.String是最基本的数据类型吗?\n\n基本数据类型包括byte、int、char、long、float、double、boolean和short。\n\njava.lang.String类是final类型的，因此不可以继承这个类、不能修改这个类。为了提高效率节省空间，我们应该用StringBuffer类\n\n\n# 30.String s = "Hello";s = s + " world!";这两行代码执行后，原始的String对象中的内容到底变了没有？\n\n没有。\n\n因为String被设计成不可变(immutable)类，所以它的所有对象都是不可变对象。在这段代码中，s原先指向一个String对象，内容是 "Hello"，然后我们对s进行了+操作，那么s所指向的那个对象是否发生了改变呢？答案是没有。这时，s不指向原来那个对象了，而指向了另一个 String对象，内容为"Hello world!"，原来那个对象还存在于内存之中，只是s这个引用变量不再指向它了。\n\n通过上面的说明，我们很容易导出另一个结论，如果经常对字符串进行各种各样的修改，或者说，不可预见的修改，那么使用String来代表字符串的话会引起很大的内存开销。因为 String对象建立之后不能再改变，所以对于每一个不同的字符串，都需要一个String对象来表示。这时，应该考虑使用StringBuffer类，它允许修改，而不是每个不同的字符串都要生成一个新的对象。并且，这两种类的对象转换十分容易。\n\n同时，我们还可以知道，如果要使用内容相同的字符串，不必每次都new一个String。例如我们要在构造器中对一个名叫s的String引用变量进行初始化，把它设置为初始值，应当这样做：\n\npublic class Demo {\nprivate String s;\n...\npublic Demo {\n s = "Initial Value";\n}\n...\n}\n\n\n而非\n\ns = new String("Initial Value");\n\n\n后者每次都会调用构造器，生成新对象，性能低下且内存开销大，并且没有意义，因为String对象不可改变，所以对于内容相同的字符串，只要一个String对象来表示就可以了。也就说，多次调用上面的构造器创建多个对象，他们的String类型属性s都指向同一个对象。\n\n上面的结论还基于这样一个事实：对于字符串常量，如果内容相同，Java认为它们代表同一个String对象。而用关键字new调用构造器，总是会创建一个新的对象，无论内容是否相同。\n\n至于为什么要把String类设计成不可变类，是它的用途决定的。其实不只String，很多Java标准类库中的类都是不可变的。在开发一个系统的时候，我们有时候也需要设计不可变类，来传递一组相关的值，这也是面向对象思想的体现。不可变类有一些优点，比如因为它的对象是只读的，所以多线程并发访问也不会有任何问题。当然也有一些缺点，比如每个不同的状态都要一个对象来代表，可能造成性能上的问题。所以Java标准类库还提供了一个可变版本，即StringBuffer。\n\n\n# 31.是否可以继承String类?\n\nString类是final类故不可以继承。\n\n\n# 32.String s = new String("xyz");创建了几个String Object? 二者之间有什么区别？\n\n两个或一个，”xyz”对应一个对象，这个对象放在字符串常量缓冲区，常量”xyz”不管出现多少遍，都是缓冲区中的那一个。New String每写一遍，就创建一个新的对象，它一句那个常量”xyz”对象的内容来创建出一个新String对象。如果以前就用过’xyz’，这句代表就不会创建”xyz”自己了，直接从缓冲区拿。\n\n\n# 33.String 和StringBuffer的区别\n\nJAVA平台提供了两个类：String和StringBuffer，它们可以储存和操作字符串，即包含多个字符的字符数据。这个String类提供了数值不可改变的字符串。而这个StringBuffer类提供的字符串进行修改。当你知道字符数据要改变的时候你就可以使用StringBuffer。典型地，你可以使用StringBuffers来动态构造字符数据。另外，String实现了equals方法，new String(“abc”).equals(new String(“abc”)的结果为true,而StringBuffer没有实现equals方法，所以，new StringBuffer(“abc”).equals(new StringBuffer(“abc”)的结果为false。\n\n接着要举一个具体的例子来说明，我们要把1到100的所有数字拼起来，组成一个串。\n\nStringBuffer sbf = new StringBuffer();\nfor(int i=0;i<100;i++)\n{\n sbf.append(i);\n}\n\n\n上面的代码效率很高，因为只创建了一个StringBuffer对象，而下面的代码效率很低，因为创建了101个对象。\n\nString str = new String();\nfor(int i=0;i<100;i++)\n{\n str = str + i;\n}\n\n\n在讲两者区别时，应把循环的次数搞成10000，然后用endTime-beginTime来比较两者执行的时间差异，最后还要讲讲StringBuilder与StringBuffer的区别。\n\nString覆盖了equals方法和hashCode方法，而StringBuffer没有覆盖equals方法和hashCode方法，所以，将StringBuffer对象存储进Java集合类中时会出现问题。\n\n\n# 34.如何把一段逗号分割的字符串转换成一个数组?\n\n1）用正则表达式，代码大概为：\n\nString [] result = orgStr.split(",");\n\n\n2）用 StringTokenizer ,代码为：\n\nStringTokenizer tokener = StringTokenizer(orgStr,",");\nString [] result = new String[tokener .countTokens()];\nInt i=0;\nwhile(tokener.hasNext(){result[i++]=toker.nextToken();}\n\n\n\n# 35.数组有没有length()这个方法? String有没有length()这个方法？\n\n数组没有length()这个方法，有length的属性。String有有length()这个方法。\n\n\n# 36.下面这条语句一共创建了多少个对象? String s="a"+"b"+"c"+"d"\n\n对于如下代码：\n\nString s1 = "a";\nString s2 = s1 + "b";\nString s3 = "a" + "b";\nSystem.out.println(s2 == "ab");\nSystem.out.println(s3 == "ab");\n\n\n第一条语句打印的结果为false，第二条语句打印的结果为true，这说明javac编译可以对字符串常量直接相加的表达式进行优化，不必要等到运行期去进行加法运算处理，而是在编译时去掉其中的加号，直接将其编译成一个这些常量相连的结果。\n\n题目中的第一行代码被编译器在编译时优化后，相当于直接定义了一个”abcd”的字符串，所以，上面的代码应该只创建了一个String对象。写如下两行代码，\n\nString s = "a" + "b" + "c" + "d";\nSystem.out.println(s == "abcd");\n\n\n最终打印的结果应该为true。\n\n\n# 37.try {}里有一个return语句，那么紧跟在这个try后的finally {}里的code会不会被执行，什么时候被执行，在return前还是后?\n\n也许你的答案是在return之前，但往更细地说，我的答案是在return中间执行，请看下面程序代码的运行结果：\n\npublic class Test {\n\n    public static void main(String[] args) {\n        System.out.println(Test.test());\n    }\n\n    static int test() {\n        int x = 1;\n        try {\n            return x;\n        } finally {\n            ++x;\n        }\n    }\n}\n\n\n---------执行结果 ---------\n\n1\n\n运行结果是1，为什么呢？主函数调用子函数并得到结果的过程，好比主函数准备一个空罐子，当子函数要返回结果时，先把结果放在罐子里，然后再将程序逻辑返回到主函数。所谓返回，就是子函数说，我不运行了，你主函数继续运行吧，这没什么结果可言，结果是在说这话之前放进罐子里的。\n\n\n# 38.下面的程序代码输出的结果是多少？\n\npublic class SmallT {\n    public static void main(String args[]) {\n        SmallT t = new SmallT();\n        int b = t.get();\n        System.out.println(b);\n    }\n\n    public int get() {\n        try {\n            return 1;\n        } finally {\n            return 2;\n        }\n    }\n}\n\n\n返回的结果是2。\n\n从下面例子的运行结果中可以发现，try中的return语句调用的函数先于finally中调用的函数执行，也就是说return语句先执行，finally语句后执行，所以，返回的结果是2。Return并不是让函数马上返回，而是return语句执行后，将把返回结果放置进函数栈中，此时函数并不是马上返回，它要执行finally语句后才真正开始返回。\n\n在讲解答案时可以用下面的程序来帮助分析：\n\npublic class Test {\n    /**\n     * @param args add by leixiaoshuai 爱笑的架构师\n     */\n    public static void main(String[] args) {\n        System.out.println(new Test().test());\n    }\n\n    int test() {\n        try {\n            return func1();\n        } finally {\n            return func2();\n        }\n    }\n\n    int func1() {\n        System.out.println("func1");\n        return 1;\n    }\n\n    int func2() {\n        System.out.println("func2");\n        return 2;\n    }\n}\n\n\n-----------执行结果----------------- func1\n\nfunc2\n\n2\n\n结论：finally中的代码比return 和break语句后执行。\n\n\n# 39.final, finally, finalize的区别\n\nfinal 用于声明属性，方法和类，分别表示属性不可变，方法不可覆盖，类不可继承。\n\n内部类要访问局部变量，局部变量必须定义成final类型。\n\nfinally是异常处理语句结构的一部分，表示总是执行。\n\nfinalize是Object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，可以覆盖此方法提供垃圾收集时的其他资源回收，例如关闭文件等。JVM不保证此方法总被调用\n\n\n# 40.运行时异常与一般异常有何异同？\n\n异常表示程序运行过程中可能出现的非正常状态，运行时异常表示虚拟机的通常操作中可能遇到的异常，是一种常见运行错误。java编译器要求方法必须声明抛出可能发生的非运行时异常，但是并不要求必须声明抛出未被捕获的运行时异常。\n\n\n# 41.error和exception有什么区别?\n\nerror 表示恢复不是不可能但很困难的情况下的一种严重问题。比如说内存溢出。不可能指望程序能处理这样的情况。 exception 表示一种设计或实现问题。也就是说，它表示如果程序运行正常，从不会发生的情况。\n\n\n# 42.Java中的异常处理机制的简单原理和应用\n\n异常是指java程序运行时（非编译）所发生的非正常情况或错误，与现实生活中的事件很相似，现实生活中的事件可以包含事件发生的时间、地点、人物、情节等信息，可以用一个对象来表示，Java使用面向对象的方式来处理异常，它把程序中发生的每个异常也都分别封装到一个对象来表示的，该对象中包含有异常的信息。\n\nJava对异常进行了分类，不同类型的异常分别用不同的Java类表示，所有异常的根类为java.lang.Throwable，Throwable下面又派生了两个子类：Error和Exception，Error 表示应用程序本身无法克服和恢复的一种严重问题，程序只有死的份了，例如，说内存溢出和线程死锁等系统问题。Exception表示程序还能够克服和恢复的问题，其中又分为系统异常和普通异常，系统异常是软件本身缺陷所导致的问题，也就是软件开发人员考虑不周所导致的问题，软件使用者无法克服和恢复这种问题，但在这种问题下还可以让软件系统继续运行或者让软件死掉，例如数组脚本越界（ArrayIndexOutOfBoundsException），空指针异常（NullPointerException）、类转换异常（ClassCastException）；普通异常是运行环境的变化或异常所导致的问题，是用户能够克服的问题，例如，网络断线，硬盘空间不够，发生这样的异常后，程序不应该死掉。\n\njava为系统异常和普通异常提供了不同的解决方案，编译器强制普通异常必须try..catch处理或用throws声明继续抛给上层调用方法处理，所以普通异常也称为checked异常，而系统异常可以处理也可以不处理，所以，编译器不强制用try..catch处理或用throws声明，所以系统异常也称为unchecked异常。\n\n提示答题者：就按照三个级别去思考：虚拟机必须宕机的错误，程序可以死掉也可以不死掉的错误，程序不应该死掉的错误；\n\n\n# 43.请写出你最常见到的5个runtime exception\n\n这道题主要考你的代码量到底多大，如果你长期写代码的，应该经常都看到过一些系统方面的异常，你不一定真要回答出5个具体的系统异常，但你要能够说出什么是系统异常，以及几个系统异常就可以了，当然，这些异常完全用其英文名称来写是最好的，如果实在写不出，那就用中文吧，有总比没有强！\n\n所谓系统异常，就是…..，它们都是RuntimeException的子类，在jdk doc中查RuntimeException类，就可以看到其所有的子类列表，也就是看到了所有的系统异常。我比较有印象的系统异常有：NullPointerException、ArrayIndexOutOfBoundsException、ClassCastException。\n\n\n# 44.java中有几种方法可以实现一个线程？用什么关键字修饰同步方法? stop()和suspend()方法为何不推荐使用？\n\njava5以前，有如下两种：\n\n第一种：new Thread(){}.start();这表示调用Thread子类对象的run方法，new Thread(){}表示一个Thread的匿名子类的实例对象，子类加上run方法后的代码如下：\n\nnew Thread(){\n public void run(){\n }\n}.start();\n\n\n第二种：\n\nnew Thread(new Runnable(){}).start();这表示调用Thread对象接受的Runnable对象的run方法，new Runnable(){}表示一个Runnable的匿名子类的实例对象,runnable的子类加上run方法后的代码如下：\n\nnew Thread(new Runnable(){\n   public void run(){\n   } \n  }\n ).start();\n\n\n从java5开始，还有如下一些线程池创建多线程的方式：\n\nExecutorService pool = Executors.newFixedThreadPool(3)\nfor(int i=0;i<10;i++)\n{\n    pool.execute(new Runable(){public void run(){}});\n}\nExecutors.newCachedThreadPool().execute(new Runable(){public void run(){}});\nExecutors.newSingleThreadExecutor().execute(new Runable(){public void run(){}});\n\n\n有两种实现方法，分别使用new Thread()和new Thread(runnable)形式，第一种直接调用thread的run方法，所以，我们往往使用Thread子类，即new SubThread()。第二种调用runnable的run方法。\n\n有两种实现方法，分别是继承Thread类与实现Runnable接口，用synchronized关键字修饰同步方法。反对使用stop()，是因为它不安全。它会解除由线程获取的所有锁定，而且如果对象处于一种不连贯状态，那么其他线程能在那种状态下检查和修改它们。结果很难检查出真正的问题所在。suspend()方法容易发生死锁。调用suspend()的时候，目标线程会停下来，但却仍然持有在这之前获得的锁定。此时，其他任何线程都不能访问锁定的资源，除非被"挂起"的线程恢复运行。对任何线程来说，如果它们想恢复目标线程，同时又试图使用任何一个锁定的资源，就会造成死锁。所以不应该使用suspend()，而应在自己的Thread类中置入一个标志，指出线程应该活动还是挂起。若标志指出线程应该挂起，便用wait()命其进入等待状态。若标志指出线程应当恢复，则用一个notify()重新启动线程。\n\n\n# 45.sleep() 和 wait() 有什么区别?\n\nsleep是线程类（Thread）的方法，导致此线程暂停执行指定时间，给执行机会给其他线程，但是监控状态依然保持，到时后会自动恢复。调用sleep不会释放对象锁。 wait是Object类的方法，对此对象调用wait方法导致本线程放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象发出notify方法（或notifyAll）后本线程才进入对象锁定池准备获得对象锁进入运行状态。\n\nsleep就是正在执行的线程主动让出cpu，cpu去执行其他线程，在sleep指定的时间过后，cpu才会回到这个线程上继续往下执行，如果当前线程进入了同步锁，sleep方法并不会释放锁，即使当前线程使用sleep方法让出了cpu，但其他被同步锁挡住了的线程也无法得到执行。wait是指在一个已经进入了同步锁的线程内，让自己暂时让出同步锁，以便其他正在等待此锁的线程可以得到同步锁并运行，只有其他线程调用了notify方法（notify并不释放锁，只是告诉调用过wait方法的线程可以去参与获得锁的竞争了，但不是马上得到锁，因为锁还在别人手里，别人还没释放。如果notify方法后面的代码还有很多，需要这些代码执行完后才会释放锁，可以在notfiy方法后增加一个等待和一些代码，看看效果），调用wait方法的线程就会解除wait状态和程序可以再次得到锁后继续向下运行。对于wait的讲解一定要配合例子代码来说明，才显得自己真明白。\n\npublic class MultiThread {\n    public static void main(String[] args) {\n        new Thread(new Thread1()).start();\n        try {\n            Thread.sleep(10);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        new Thread(new Thread2()).start();\n    }\n\n    private static class Thread1 implements Runnable {\n        @Override\n        public void run() {\n            //由于这里的Thread1和下面的Thread2内部run方法要用同一对象作为监视器，我们这里不能用this，因为在Thread2里面的this和这个Thread1的this不是同一个对象。我们用MultiThread.class这个字节码对象，当前虚拟机里引用这个变量时，指向的都是同一个对象。\n            synchronized (MultiThread.class) {\n                System.out.println("enter thread1...");\n                System.out.println("thread1 is waiting");\n                try {\n                    //释放锁有两种方式，第一种方式是程序自然离开监视器的范围，也就是离开了synchronized关键字管辖的代码范围，另一种方式就是在synchronized关键字管辖的代码内部调用监视器对象的wait方法。这里，使用wait方法释放锁。\n                    MultiThread.class.wait();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println("thread1 is going on...");\n                System.out.println("thread1 is being over!");\n            }\n        }\n    }\n\n    private static class Thread2 implements Runnable {\n        @Override\n        public void run() {\n            synchronized (MultiThread.class) {\n                System.out.println("enter thread2...");\n                System.out.println("thread2 notify other thread can release wait status..");\n                //由于notify方法并不释放锁， 即使thread2调用下面的sleep方法休息了10毫秒，但thread1仍然不会执行，因为thread2没有释放锁，所以Thread1无法得不到锁。\n                MultiThread.class.notify();\n                System.out.println("thread2 is sleeping ten millisecond...");\n                try {\n                    Thread.sleep(10);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println("thread2 is going on...");\n                System.out.println("thread2 is being over!");\n            }\n        }\n    }\n}\n\n\n\n# 46.同步和异步有何异同，在什么情况下分别使用他们？举例说明\n\n如果数据将在线程间共享。例如正在写的数据以后可能被另一个线程读到，或者正在读的数据可能已经被另一个线程写过了，那么这些数据就是共享数据，必须进行同步存取。\n\n当应用程序在对象上调用了一个需要花费很长时间来执行的方法，并且不希望让程序等待方法的返回时，就应该使用异步编程，在很多情况下采用异步途径往往更有效率。\n\n\n# 47.多线程有几种实现方法?同步有几种实现方法?\n\n多线程有两种实现方法，分别是继承Thread类与实现Runnable接口。\n\n同步的实现方面有两种，分别是synchronized,wait与notify。\n\nwait():使一个线程处于等待状态，并且释放所持有的对象的lock。\n\nsleep():使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要捕捉InterruptedException异常。\n\nnotify():唤醒一个处于等待状态的线程，注意的是在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由JVM确定唤醒哪个线程，而且不是按优先级。\n\nAllnotity():唤醒所有处入等待状态的线程，注意并不是给所有唤醒线程一个对象的锁，而是让它们竞争。\n\n\n# 48.启动一个线程是用run()还是start()？\n\n启动一个线程是调用start()方法，使线程就绪状态，以后可以被调度为运行状态，一个线程必须关联一些具体的执行代码，run()方法是该线程所关联的执行代码。\n\n\n# 49.当一个线程进入一个对象的一个synchronized方法后，其它线程是否可进入此对象的其它方法?\n\n分几种情况：\n\n1）其他方法前是否加了synchronized关键字，如果没加，则能。\n\n2）如果这个方法内部调用了wait，则可以进入其他synchronized方法。\n\n3）如果其他个方法都加了synchronized关键字，并且内部没有调用wait，则不能。\n\n4）如果其他方法是static，它用的同步锁是当前类的字节码，与非静态的方法不能同步，因为非静态的方法用的是this。\n\n\n# 50.线程的基本概念、线程的基本状态以及状态之间的关系\n\n一个程序中可以有多条执行线索同时执行，一个线程就是程序中的一条执行线索，每个线程上都关联有要执行的代码，即可以有多段程序代码同时运行，每个程序至少都有一个线程，即main方法执行的那个线程。如果只是一个cpu，它怎么能够同时执行多段程序呢？这是从宏观上来看的，cpu一会执行a线索，一会执行b线索，切换时间很快，给人的感觉是a,b在同时执行，好比大家在同一个办公室上网，只有一条链接到外部网线，其实，这条网线一会为a传数据，一会为b传数据，由于切换时间很短暂，所以，大家感觉都在同时上网。\n\n状态：就绪，运行，synchronize阻塞，wait和sleep挂起，结束。wait必须在synchronized内部调用。\n\n调用线程的start方法后线程进入就绪状态，线程调度系统将就绪状态的线程转为运行状态，遇到synchronized语句时，由运行状态转为阻塞，当synchronized获得锁后，由阻塞转为运行，在这种情况可以调用wait方法转为挂起状态，当线程关联的代码执行完后，线程变为结束状态。\n\n\n# 51.简述synchronized和java.util.concurrent.locks.Lock的异同 ？\n\n主要相同点：Lock能完成synchronized所实现的所有功能。\n\n主要不同点：Lock有比synchronized更精确的线程语义和更好的性能。synchronized会自动释放锁，而Lock一定要求程序员手工释放，并且必须在finally从句中释放。Lock还有更强大的功能，例如，它的tryLock方法可以非阻塞方式去拿锁。\n\n举例说明（对下面的题用lock进行了改写）：\n\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class ThreadTest {\n    private int j;\n    private Lock lock = new ReentrantLock();\n\n    public static void main(String[] args) {\n        ThreadTest tt = new ThreadTest();\n        for (int i = 0; i < 2; i++) {\n            new Thread(tt.new Adder()).start();\n            new Thread(tt.new Subtractor()).start();\n        }\n    }\n\n    private class Subtractor implements Runnable {\n        @Override\n        public void run() {\n            while (true) {\n    /*synchronized (ThreadTest.this) {   \n     System.out.println("j--=" + j--);\n     //这里抛异常了，锁能释放吗？\n    }*/\n                lock.lock();\n                try {\n                    System.out.println("j--=" + j--);\n                } finally {\n                    lock.unlock();\n                }\n            }\n        }\n\n    }\n\n    private class Adder implements Runnable {\n        @Override\n        public void run() {\n            while (true) {\n    /*synchronized (ThreadTest.this) {\n    System.out.println("j++=" + j++); \n    }*/\n                lock.lock();\n                try {\n                    System.out.println("j++=" + j++);\n                } finally {\n                    lock.unlock();\n                }\n            }\n        }\n\n    }\n}\n\n\n\n# 52.设计4个线程，其中两个线程每次对j增加1，另外两个线程对j每次减少1。写出程序\n\n以下程序使用内部类实现线程，对j增减的时候没有考虑顺序问题。\n\npublic class ThreadTest1\n{\nprivate int j;\npublic static void main(String[] args){\n    ThreadTest1 tt=new ThreadTest1();\n    Inc inc=tt.new Inc();\n    Dec dec=tt.new Dec();\n    for(int i=0;i<2;i++){\n        Thread t=new Thread(inc);\n        t.start();\n        t=new Thread(dec);\n        t.start();\n        }\n    }\nprivate synchronized void inc(){\n    j++;\n    System.out.println(Thread.currentThread().getName()+"-inc:"+j);\n    }\nprivate synchronized void dec(){\n    j--;\n    System.out.println(Thread.currentThread().getName()+"-dec:"+j);\n    }\nclass Inc implements Runnable{\n    public void run(){\n        for(int i=0;i<100;i++){\n        inc();\n        }\n    }\n}\nclass Dec implements Runnable{\n    public void run(){\n        for(int i=0;i<100;i++){\n        dec();\n        }\n    }\n}\n}\n\n\n----------随手再写的一个-------------\n\nclass A\n{\nJManger j =new JManager();\nmain()\n{\n new A().call();\n}\nvoid call()\n{\n for(int i=0;i<2;i++)\n {\n  new Thread(\n   new Runnable(){ public void run(){while(true){j.accumulate();}}}\n  ).start();\n  new Thread(new Runnable(){ public void run(){while(true){j.sub();}}}).start();\n }\n}\n}\nclass JManager\n{\n private int j = 0;\n \n public synchronized void subtract()\n {\n  j--;\n }\n \n public synchronized void accumulate()\n {\n  j++;\n }\n \n}\n\n\n\n# 53.子线程循环10次，接着主线程循环100，接着又回到子线程循环10次，接着再回到主线程又循环100，如此循环50次，请写出程序\n\n最终的程序代码如下：\n\npublic class ThreadTest {\n\n public static void main(String[] args) {\n  new ThreadTest().init();\n }\n public void init()\n {\n  final Business business = new Business();\n  new Thread(\n    new Runnable()\n    {\n     public void run() {\n      for(int i=0;i<50;i++)\n      {\n       business.SubThread(i);\n      }      \n     }\n     \n    }\n  \n  ).start();\n  for(int i=0;i<50;i++)\n  {\n   business.MainThread(i);\n  }  \n }\n \n private class Business\n {\n  boolean bShouldSub = true;//这里相当于定义了控制该谁执行的一个信号灯\n  public synchronized void MainThread(int i)\n  {\n   if(bShouldSub)\n    try {\n     this.wait();\n    } catch (InterruptedException e) {\n     e.printStackTrace();\n    }  \n    \n   for(int j=0;j<5;j++)\n   {\n    System.out.println(Thread.currentThread().getName() + ":i=" + i +",j=" + j);\n   }\n   bShouldSub = true;\n   this.notify();\n  \n  }\n  \n  public synchronized void SubThread(int i)\n  {\n   if(!bShouldSub)\n    try {\n     this.wait();\n    } catch (InterruptedException e) {\n     // TODO Auto-generated catch block\n     e.printStackTrace();\n    } \n    \n   for(int j=0;j<10;j++)\n   {\n    System.out.println(Thread.currentThread().getName() + ":i=" + i +",j=" + j);\n   }\n   bShouldSub = false;    \n   this.notify();   \n  }\n }\n}\n\n\n备注：不可能一上来就写出上面的完整代码，最初写出来的代码如下，问题在于两个线程的代码要参照同一个变量，即这两个线程的代码要共享数据，所以，把这两个线程的执行代码搬到同一个类中去：\n\npackage com.huawei.interview.lym;\npublic class ThreadTest {\n private static boolean bShouldMain = false;\n public static void main(String[] args) {\n  // TODO Auto-generated method stub\n  /*new Thread(){\n  public void run()\n  {\n   for(int i=0;i<50;i++)\n   {\n    for(int j=0;j<10;j++)\n    {\n     System.out.println("i=" + i + ",j=" + j);\n    }\n   }    \n  }\n  \n }.start();*/  \n    \n  //final String str = new String("");\n  new Thread(\n    new Runnable()\n    {\n     public void run()\n     {\n      for(int i=0;i<50;i++)\n      {\n       synchronized (ThreadTest.class) {\n        if(bShouldMain)\n        {\n         try {\n          ThreadTest.class.wait();}\n         catch (InterruptedException e) {\n          e.printStackTrace();\n         }\n        }\n        for(int j=0;j<10;j++)\n        {\n         System.out.println(\n           Thread.currentThread().getName() +\n           "i=" + i + ",j=" + j);\n        }\n        bShouldMain = true;\n        ThreadTest.class.notify();\n       }       \n      }      \n     }\n    }\n  ).start();\n  \n  for(int i=0;i<50;i++)\n  {\n   synchronized (ThreadTest.class) {\n    if(!bShouldMain)\n    {\n     try {\n      ThreadTest.class.wait();}\n     catch (InterruptedException e) {\n      e.printStackTrace();\n     }\n    }    \n    for(int j=0;j<5;j++)\n    {\n     System.out.println(\n       Thread.currentThread().getName() +       \n       "i=" + i + ",j=" + j);\n    }\n    bShouldMain = false;\n    ThreadTest.class.notify();    \n   }   \n  }\n }\n}\n\n\n下面使用jdk5中的并发库来实现的：\n\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.locks.Lock;\nimport java.util.concurrent.locks.ReentrantLock;\nimport java.util.concurrent.locks.Condition;\npublic class ThreadTest\n{\n private static Lock lock = new ReentrantLock();\n private static Condition subThreadCondition = lock.newCondition();\n private static boolean bBhouldSubThread = false;\n public static void main(String [] args)\n {\n  ExecutorService threadPool = Executors.newFixedThreadPool(3);\n  threadPool.execute(new Runnable(){\n   public void run()\n   {\n    for(int i=0;i<50;i++)\n    {\n     lock.lock();     \n     try\n     {     \n      if(!bBhouldSubThread)\n       subThreadCondition.await();\n      for(int j=0;j<10;j++)\n      {\n       System.out.println(Thread.currentThread().getName() + ",j=" + j);\n      }\n      bBhouldSubThread = false;\n      subThreadCondition.signal();\n     }catch(Exception e)\n     {      \n     }\n     finally\n     {\n      lock.unlock();\n     }\n    }   \n   }\n   \n  });\n  threadPool.shutdown();\n  for(int i=0;i<50;i++)\n  {\n    lock.lock();     \n    try\n    { \n     if(bBhouldSubThread)\n       subThreadCondition.await();        \n     for(int j=0;j<10;j++)\n     {\n      System.out.println(Thread.currentThread().getName() + ",j=" + j);\n     }\n     bBhouldSubThread = true;\n     subThreadCondition.signal();     \n    }catch(Exception e)\n    {      \n    }\n    finally\n    {\n     lock.unlock();\n    }     \n  }\n }\n}\n\n\n\n# 54.Collection框架中实现比较要实现什么接口\n\ncomparable/comparator\n\n\n# 55.ArrayList和Vector的区别\n\n这两个类都实现了List接口（List接口继承了Collection接口），他们都是有序集合，即存储在这两个集合中的元素的位置都是有顺序的，相当于一种动态的数组，我们以后可以按位置索引号取出某个元素，，并且其中的数据是允许重复的，这是HashSet之类的集合的最大不同处，HashSet之类的集合不可以按索引号去检索其中的元素，也不允许有重复的元素（本来题目问的与hashset没有任何关系，但为了说清楚ArrayList与Vector的功能，我们使用对比方式，更有利于说明问题）。\n\n接着才说ArrayList与Vector的区别，这主要包括两个方面：.\n\n（1）同步性：\n\nVector是线程安全的，也就是说是它的方法之间是线程同步的，而ArrayList是线程序不安全的，它的方法之间是线程不同步的。如果只有一个线程会访问到集合，那最好是使用ArrayList，因为它不考虑线程安全，效率会高些；如果有多个线程会访问到集合，那最好是使用Vector，因为不需要我们自己再去考虑和编写线程安全的代码。\n\n备注：对于Vector&ArrayList、Hashtable&HashMap，要记住线程安全的问题，记住Vector与Hashtable是旧的，是java一诞生就提供了的，它们是线程安全的，ArrayList与HashMap是java2时才提供的，它们是线程不安全的。所以，我们讲课时先讲老的。\n\n（2）数据增长：\n\nArrayList与Vector都有一个初始的容量大小，当存储进它们里面的元素的个数超过了容量时，就需要增加ArrayList与Vector的存储空间，每次要增加存储空间时，不是只增加一个存储单元，而是增加多个存储单元，每次增加的存储单元的个数在内存空间利用与程序效率之间要取得一定的平衡。Vector默认增长为原来两倍，而ArrayList的增长策略在文档中没有明确规定（从源代码看到的是增长为原来的1.5倍）。ArrayList与Vector都可以设置初始的空间大小，Vector还可以设置增长的空间大小，而ArrayList没有提供设置增长空间的方法。\n\n总结：即Vector增长原来的一倍，ArrayList增加原来的0.5倍。\n\n\n# 56.HashMap和Hashtable的区别\n\nHashMap是Hashtable的轻量级实现（非线程安全的实现），他们都完成了Map接口，主要区别在于HashMap允许空（null）键值（key）,由于非线程安全，在只有一个线程访问的情况下，效率要高于Hashtable。\n\nHashMap允许将null作为一个entry的key或者value，而Hashtable不允许。HashMap把Hashtable的contains方法去掉了，改成containsvalue和containsKey。因为contains方法容易让人引起误解。\n\nHashtable继承自Dictionary类，而HashMap是Java1.2引进的Map interface的一个实现。\n\n最大的不同是，Hashtable的方法是Synchronize的，而HashMap不是，在多个线程访问Hashtable时，不需要自己为它的方法实现同步，而HashMap 就必须为之提供外同步。\n\nHashtable和HashMap采用的hash/rehash算法都大概一样，所以性能不会有很大的差异。\n\n就HashMap与HashTable主要从三方面来说：\n\n1）历史原因:Hashtable是基于陈旧的Dictionary类的，HashMap是Java 1.2引进的Map接口的一个实现；\n\n2）同步性:Hashtable是线程安全的，也就是说是同步的，而HashMap是线程序不安全的，不是同步的；\n\n3）值：只有HashMap可以让你将空值作为一个表的条目的key或value\n\n\n# 57.List 和 Map 区别?\n\n一个是存储单列数据的集合，另一个是存储键和值这样的双列数据的集合，List中存储的数据是有顺序，并且允许重复；Map中存储的数据是没有顺序的，其键是不能重复的，它的值是可以有重复的。\n\n\n# 58.List, Set, Map是否继承自Collection接口?\n\nList，Set是，Map不是\n\n\n# 59.List、Map、Set三个接口，存取元素时，各有什么特点？\n\n这样的题属于随意发挥题：这样的题比较考水平，两个方面的水平：一是要真正明白这些内容，二是要有较强的总结和表述能力。如果你明白，但表述不清楚，在别人那里则等同于不明白。\n\n首先，List与Set具有相似性，它们都是单列元素的集合，所以，它们有一个功共同的父接口，叫Collection。Set里面不允许有重复的元素，所谓重复，即不能有两个相等（注意，不是仅仅是相同）的对象 ，即假设Set集合中有了一个A对象，现在我要向Set集合再存入一个B对象，但B对象与A对象equals相等，则B对象存储不进去，所以，Set集合的add方法有一个boolean的返回值，当集合中没有某个元素，此时add方法可成功加入该元素时，则返回true，当集合含有与某个元素equals相等的元素时，此时add方法无法加入该元素，返回结果为false。Set取元素时，没法说取第几个，只能以Iterator接口取得所有的元素，再逐一遍历各个元素。\n\nList表示有先后顺序的集合， 注意，不是那种按年龄、按大小、按价格之类的排序。当我们多次调用add(Obj e)方法时，每次加入的对象就像火车站买票有排队顺序一样，按先来后到的顺序排序。有时候，也可以插队，即调用add(int index,Obj e)方法，就可以指定当前对象在集合中的存放位置。一个对象可以被反复存储进List中，每调用一次add方法，这个对象就被插入进集合中一次，其实，并不是把这个对象本身存储进了集合中，而是在集合中用一个索引变量指向这个对象，当这个对象被add多次时，即相当于集合中有多个索引指向了这个对象，如图x所示。List除了可以以Iterator接口取得所有的元素，再逐一遍历各个元素之外，还可以调用get(index i)来明确说明取第几个。\n\nMap与List和Set不同，它是双列的集合，其中有put方法，定义如下：put(obj key,obj value)，每次存储时，要存储一对key/value，不能存储重复的key，这个重复的规则也是按equals比较相等。取则可以根据key获得相应的value，即get(Object key)返回值为key 所对应的value。另外，也可以获得所有的key的结合，还可以获得所有的value的结合，还可以获得key和value组合成的Map.Entry对象的集合。\n\nList 以特定次序来持有元素，可有重复元素。Set 无法拥有重复元素,内部排序。Map 保存key-value值，value可多值。\n\nHashSet按照hashcode值的某种运算方式进行存储，而不是直接按hashCode值的大小进行存储。例如，"abc" ---\x3e 78，"def" ---\x3e 62，"xyz" ---\x3e 65在hashSet中的存储顺序不是62，65，78。LinkedHashSet按插入的顺序存储，那被存储对象的hashcode方法还有什么作用呢？hashset集合比较两个对象是否相等，首先看hashcode方法是否相等，然后看equals方法是否相等。new 两个Student插入到HashSet中，看HashSet的size，实现hashcode和equals方法后再看size。\n\n同一个对象可以在Vector中加入多次。往集合里面加元素，相当于集合里用一根绳子连接到了目标对象。往HashSet中却加不了多次的。\n\n\n# 60.说出ArrayList,Vector, LinkedList的存储性能和特性\n\nArrayList和Vector都是使用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉及数组元素移动等内存操作，所以索引数据快而插入数据慢，Vector由于使用了synchronized方法（线程安全），通常性能上较ArrayList差，而LinkedList使用双向链表实现存储，按序号索引数据需要进行前向或后向遍历，但是插入数据时只需要记录本项的前后项即可，所以插入速度较快。\n\nLinkedList也是线程不安全的，LinkedList提供了一些方法，使得LinkedList可以被当作堆栈和队列来使用。\n\n\n# 61.去掉一个Vector集合中重复的元素\n\nVector newVector = new Vector();\nFor (int i=0;i<vector.size();i++)\n{\nObject obj = vector.get(i);\n if(!newVector.contains(obj);\n  newVector.add(obj);\n}\n\n\n还有一种简单的方式\n\nHashSet set = new HashSet(vector);\n\n\n\n# 62.Collection 和 Collections的区别\n\nCollection是集合类的上级接口，继承与他的接口主要有Set 和List。\n\nCollections是针对集合类的一个帮助类，他提供一系列静态方法实现对各种集合的搜索、排序、线程安全化等操作。\n\n\n# 63.Set里的元素是不能重复的，那么用什么方法来区分重复与否呢? 是用==还是equals()? 它们有何区别?\n\nSet里的元素是不能重复的，元素重复与否是使用equals()方法进行判断的。\n\nequals()和==方法决定引用值是否指向同一对象equals()在类中被覆盖，为的是当两个分离的对象的内容和类型相配的话，返回真值。\n\n\n# 64.你所知道的集合类都有哪些？主要方法？\n\n最常用的集合类是 List 和 Map。 List 的具体实现包括 ArrayList 和 Vector，它们是可变大小的列表，比较适合构建、存储和操作任何类型对象的元素列表。 List 适用于按数值索引访问元素的情形。\n\nMap 提供了一个更通用的元素存储方法。 Map 集合类用于存储元素对（称作"键"和"值"），其中每个键映射到一个值。\n\n记的不是方法名，而是思想，知道它们都有增删改查的方法，。因为只要在eclispe下按点操作符，很自然的这些方法就出来了。记住的一些思想就是List类会有get(int index)这样的方法，因为它可以按顺序取元素，而set类中没有get(int index)这样的方法。List和set都可以迭代出所有元素，迭代时先要得到一个iterator对象，所以，set和list类都有一个iterator方法，用于返回那个iterator对象。map可以返回三个集合，一个是返回所有的key的集合，另外一个返回的是所有value的集合，再一个返回的key和value组合成的EntrySet对象的集合，map也有get方法，参数是key，返回值是key对应的value。\n\n\n# 65.两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，这句话对不对?\n\n对。\n\n如果对象要保存在HashSet或HashMap中，它们的equals相等，那么，它们的hashcode值就必须相等。\n\n如果不是要保存在HashSet或HashMap，则与hashcode没有什么关系了，这时候hashcode不等是可以的，例如arrayList存储的对象就不用实现hashcode，当然，我们没有理由不实现，通常都会去实现的。\n\n\n# 66.TreeSet里面放对象，如果同时放入了父类和子类的实例对象，那比较时使用的是父类的compareTo方法，还是使用的子类的compareTo方法，还是抛异常\n\n当前的add方法放入的是哪个对象，就调用哪个对象的compareTo方法，至于这个compareTo方法怎么做，就看当前这个对象的类中是如何编写这个方法的。\n\n代码：\n\npublic class Parent implements Comparable {\n private int age = 0;\n public Parent(int age){\n  this.age = age;\n }\n public int compareTo(Object o) {\n  // TODO Auto-generated method stub\n  System.out.println("method of parent");\n  Parent o1 = (Parent)o;\n  return age>o1.age?1:age<o1.age?-1:0;\n }\n}\npublic class Child extends Parent {\n public Child(){\n  super(3);\n }\n public int compareTo(Object o) {\n   // TODO Auto-generated method stub\n   System.out.println("method of child");\n//   Child o1 = (Child)o;\n   return 1;\n }\n}\npublic class TreeSetTest {\n /**\n  * @param args\n  */\n public static void main(String[] args) {\n  // TODO Auto-generated method stub\n  TreeSet set = new TreeSet();\n  set.add(new Parent(3));\n  set.add(new Child());\n  set.add(new Parent(4));\n  System.out.println(set.size());\n }\n}\n\n\n\n# 67.说出一些常用的类，包，接口，请各举5个\n\n要让人家感觉你对java ee开发很熟，所以，不能仅仅只列core java中的那些东西，要多列你在做ssh项目中涉及的那些东西，就写你最近写的那些程序中涉及的那些类。\n\n常用的类：BufferedReader BufferedWriter FileReader FileWirter String Integer\n\njava.util.Date，System，Class，List,HashMap\n\n常用的包：java.lang java.io java.util java.sql ,javax.servlet,org.apache.strtuts.action,org.hibernate\n\n常用的接口：Remote List Map Document NodeList,Servlet,HttpServletRequest,HttpServletResponse,Transaction(Hibernate)、Session(Hibernate),HttpSession\n\n\n# 68.java中有几种类型的流？JDK为每种类型的流提供了一些抽象类以供继承，请说出他们分别是哪些类？\n\n字节流，字符流。\n\n字节流继承于InputStream OutputStream，字符流继承于InputStreamReader OutputStreamWriter。在java.io包中还有许多其他的流，主要是为了提高性能和使用方便。\n\n\n# 69.字节流与字符流的区别\n\n要把一片二进制数据数据逐一输出到某个设备中，或者从某个设备中逐一读取一片二进制数据，不管输入输出设备是什么，我们要用统一的方式来完成这些操作，用一种抽象的方式进行描述，这个抽象描述方式起名为IO流，对应的抽象类为OutputStream和InputStream ，不同的实现类就代表不同的输入和输出设备，它们都是针对字节进行操作的。\n\n在应用中，经常要完全是字符的一段文本输出去或读进来，用字节流可以吗？计算机中的一切最终都是二进制的字节形式存在。对于“中国”这些字符，首先要得到其对应的字节，然后将字节写入到输出流。读取时，首先读到的是字节，可是我们要把它显示为字符，我们需要将字节转换成字符。由于这样的需求很广泛，人家专门提供了字符流的包装类。\n\n底层设备永远只接受字节数据，有时候要写字符串到底层设备，需要将字符串转成字节再进行写入。字符流是字节流的包装，字符流则是直接接受字符串，它内部将串转成字节，再写入底层设备，这为我们向IO设别写入或读取字符串提供了一点点方便。\n\n字符向字节转换时，要注意编码的问题，因为字符串转成字节数组，其实是转成该字符的某种编码的字节形式，读取也是反之的道理。\n\n字节流与字符流关系的代码案例：\nimport java.io.BufferedReader;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.InputStreamReader;\nimport java.io.PrintWriter;\npublic class IOTest {\n public static void main(String[] args) throws Exception {\n  String str = "中国人";\n  /*FileOutputStream fos = new FileOutputStream("1.txt");\n  \n  fos.write(str.getBytes("UTF-8"));\n  fos.close();*/\n  \n  /*FileWriter fw = new FileWriter("1.txt");\n  fw.write(str);\n  fw.close();*/\n  PrintWriter pw = new PrintWriter("1.txt","utf-8");\n  pw.write(str);\n  pw.close();\n  \n  /*FileReader fr = new FileReader("1.txt");\n  char[] buf = new char[1024];\n  int len = fr.read(buf);\n  String myStr = new String(buf,0,len);\n  System.out.println(myStr);*/\n  /*FileInputStream fr = new FileInputStream("1.txt");\n  byte[] buf = new byte[1024];\n  int len = fr.read(buf);\n  String myStr = new String(buf,0,len,"UTF-8");\n  System.out.println(myStr);*/\n  BufferedReader br = new BufferedReader(\n    new InputStreamReader(\n     new FileInputStream("1.txt"),"UTF-8" \n     )\n    );\n  String myStr = br.readLine();\n  br.close();\n  System.out.println(myStr);\n }\n}\n\n\n\n# 70.什么是java序列化，如何实现java序列化？或者请解释Serializable接口的作用\n\n我们有时候将一个java对象变成字节流的形式传出去或者从一个字节流中恢复成一个java对象，例如，要将java对象存储到硬盘或者传送给网络上的其他计算机，这个过程我们可以自己写代码去把一个java对象变成某个格式的字节流再传输，但是，jre本身就提供了这种支持，我们可以调用OutputStream的writeObject方法来做，如果要让java 帮我们做，要被传输的对象必须实现serializable接口，这样，javac编译时就会进行特殊处理，编译的类才可以被writeObject方法操作，这就是所谓的序列化。需要被序列化的类必须实现Serializable接口，该接口是一个mini接口，其中没有需要实现的方法，implements Serializable只是为了标注该对象是可被序列化的。\n\n例如，在web开发中，如果对象被保存在了Session中，tomcat在重启时要把Session对象序列化到硬盘，这个对象就必须实现Serializable接口。如果对象要经过分布式系统进行网络传输或通过rmi等远程调用，这就需要在网络上传输对象，被传输的对象就必须实现Serializable接口。\n\n\n# 71.描述一下JVM加载class文件的原理机制?\n\nJVM中类的装载是由ClassLoader和它的子类来实现的，Java ClassLoader 是一个重要的Java运行时系统组件。它负责在运行时查找和装入类文件的类。\n\n\n# 72.heap和stack有什么区别\n\nJava的内存分为两类，一类是栈内存，一类是堆内存。栈内存是指程序进入一个方法时，会为这个方法单独分配一块私属存储空间，用于存储这个方法内部的局部变量，当这个方法结束时，分配给这个方法的栈会释放，这个栈中的变量也将随之释放。\n\n堆是与栈作用不同的内存，一般用于存放不放在当前方法栈中的那些数据，例如，使用new创建的对象都放在堆里，所以，它不会随方法的结束而消失。方法中的局部变量使用final修饰后，放在堆中，而不是栈中。\n\n\n# 73.GC是什么? 为什么要有GC?\n\nGC是垃圾收集的意思（Gabage Collection）,内存处理是编程人员容易出现问题的地方，忘记或者错误的内存回收会导致程序或系统的不稳定甚至崩溃，Java提供的GC功能可以自动监测对象是否超过作用域从而达到自动回收内存的目的，Java语言没有提供释放已分配内存的显示操作方法。\n\n\n# 74.垃圾回收的优点和原理。并考虑2种回收机制\n\nJava语言中一个显著的特点就是引入了垃圾回收机制，使c++程序员最头疼的内存管理的问题迎刃而解，它使得Java程序员在编写程序的时候不再需要考虑内存管理。由于有个垃圾回收机制，Java中的对象不再有"作用域"的概念，只有对象的引用才有"作用域"。垃圾回收可以有效的防止内存泄露，有效的使用可以使用的内存。垃圾回收器通常是作为一个单独的低级别的线程运行，不可预知的情况下对内存堆中已经死亡的或者长时间没有使用的对象进行清楚和回收，程序员不能实时的调用垃圾回收器对某个对象或所有对象进行垃圾回收。回收机制有分代复制垃圾回收和标记垃圾回收，增量垃圾回收。\n\n\n# 75.垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？\n\n对于GC来说，当程序员创建对象时，GC就开始监控这个对象的地址、大小以及使用情况。通常，GC采用有向图的方式记录和管理堆(heap)中的所有对象。通过这种方式确定哪些对象是“可达的”，哪些对象是“不可达的”。当GC确定一些对象为“不可达”时，GC就有责任回收这些内存空间。可以。程序员可以手动执行System.gc()，通知GC运行，但是Java语言规范并不保证GC一定会执行。\n\n\n# 76.什么时候用assert\n\nassertion(断言)在软件开发中是一种常用的调试方式，很多开发语言中都支持这种机制。在实现中，assertion就是在程序中的一条语句，它对一个boolean表达式进行检查，一个正确程序必须保证这个boolean表达式的值为true；如果该值为false，说明程序已经处于不正确的状态下，assert将给出警告或退出。一般来说，assertion用于保证程序最基本、关键的正确性。\n\nassertion检查通常在开发和测试时开启。为了提高性能，在软件发布后，assertion检查通常是关闭的。\n\npackage com.huawei.interview;\npublic class AssertTest {\n /**\n  * @param args\n  */\n public static void main(String[] args) {\n  // TODO Auto-generated method stub\n  int i = 0;\n  for(i=0;i<5;i++)\n  {\n   System.out.println(i);\n  }\n  //假设程序不小心多了一句--i;\n  --i;\n  assert i==5;  \n }\n}\n\n\n\n# 77.java中会存在内存泄漏吗，请简单描述\n\n所谓内存泄露就是指一个不再被程序使用的对象或变量一直被占据在内存中。java中有垃圾回收机制，它可以保证一对象不再被引用的时候，即对象编程了孤儿的时候，对象将自动被垃圾回收器从内存中清除掉。由于Java 使用有向图的方式进行垃圾回收管理，可以消除引用循环的问题，例如有两个对象，相互引用，只要它们和根进程不可达的，那么GC也是可以回收它们的，例如下面的代码可以看到这种情况的内存回收：\n\npackage com.huawei.interview;\nimport java.io.IOException;\npublic class GarbageTest {\n /**\n  * @param args\n  * @throws IOException\n  */\n public static void main(String[] args) throws IOException {\n  // TODO Auto-generated method stub\n  try {\n   gcTest();\n  } catch (IOException e) {\n   // TODO Auto-generated catch block\n   e.printStackTrace();\n  }\n  System.out.println("has exited gcTest!");\n  System.in.read();\n  System.in.read();  \n  System.out.println("out begin gc!");  \n  for(int i=0;i<100;i++)\n  {\n   System.gc();\n   System.in.read(); \n   System.in.read(); \n  }\n }\n private static void gcTest() throws IOException {\n  System.in.read();\n  System.in.read();  \n  Person p1 = new Person();\n  System.in.read();\n  System.in.read();  \n  Person p2 = new Person();\n  p1.setMate(p2);\n  p2.setMate(p1);\n  System.out.println("before exit gctest!");\n  System.in.read();\n  System.in.read();  \n  System.gc();\n  System.out.println("exit gctest!");\n }\n private static class Person\n {\n  byte[] data = new byte[20000000];\n  Person mate = null;\n  public void setMate(Person other)\n  {\n   mate = other;\n  }\n }\n}\n\n\nJava中的内存泄露的情况：长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄露，尽管短生命周期对象已经不再需要，但是因为长生命周期对象持有它的引用而导致不能被回收，这就是Java中内存泄露的发生场景，通俗地说，就是程序员可能创建了一个对象，以后一直不再使用这个对象，这个对象却一直被引用，即这个对象无用但是却无法被垃圾回收器回收的，这就是Java中可能出现内存泄露的情况，例如，缓存系统，我们加载了一个对象放在缓存中(例如放在一个全局map对象中)，然后一直不再使用它，这个对象一直被缓存引用，但却不再被使用。\n\n检查Java中的内存泄露，一定要让程序将各种分支情况都完整执行到程序结束，然后看某个对象是否被使用过，如果没有，则才能判定这个对象属于内存泄露。\n\n如果一个外部类的实例对象的方法返回了一个内部类的实例对象，这个内部类对象被长期引用了，即使那个外部类实例对象不再被使用，但由于内部类持久外部类的实例对象，这个外部类对象将不会被垃圾回收，这也会造成内存泄露。\n\n主要特点就是清空堆栈中的某个元素，并不是彻底把它从数组中拿掉，而是把存储的总数减少，在拿掉某个元素时，顺便也让它从数组中消失，将那个元素所在的位置的值设置为null即可：\n\npublic class Stack {\n    private Object[] elements=new Object[10];\n    private int size = 0;\n    public void push(Object e){\n    ensureCapacity();\n        elements[size++] = e;\n    }\n    public Object pop(){\n        if( size == 0)\n        throw new EmptyStackException();\n            return elements[--size];\n        }\n    private void ensureCapacity(){\n        if(elements.length == size){\n            Object[] oldElements = elements;\n            elements = new Object[2 * elements.length+1];\n            System.arraycopy(oldElements,0, elements, 0, size);     \n        }\n    }\n}\n\n\n上面的原理应该很简单，假如堆栈加了10个元素，然后全部弹出来，虽然堆栈是空的，没有我们要的东西，但是这是个对象是无法回收的，这个才符合了内存泄露的两个条件：无用，无法回收。 但是就是存在这样的东西也不一定会导致什么样的后果，如果这个堆栈用的比较少，也就浪费了几个K内存而已，反正我们的内存都上G了，哪里会有什么影响，再说这个东西很快就会被回收的，有什么关系。\n\n例：\n\npublic class Bad{\n    public static Stack s=Stack();\n    static{\n        s.push(new Object());\n        s.pop(); //这里有一个对象发生内存泄露\n        s.push(new Object()); //上面的对象可以被回收了，等于是自愈了\n    }\n}\n\n\n因为是static，就一直存在到程序退出，但是我们也可以看到它有自愈功能，就是说如果你的Stack最多有100个对象，那么最多也就只有100个对象无法被回收其实这个应该很容易理解，Stack内部持有100个引用，最坏的情况就是他们都是无用的，因为我们一旦放新的进取，以前的引用自然消失！\n\n内存泄露的另外一种情况：当一个对象被存储进HashSet集合中以后，就不能修改这个对象中的那些参与计算哈希值的字段了，否则，对象修改后的哈希值与最初存储进HashSet集合中时的哈希值就不同了，在这种情况下，即使在contains方法使用该对象的当前引用作为的参数去HashSet集合中检索对象，也将返回找不到对象的结果，这也会导致无法从HashSet集合中单独删除当前对象，造成内存泄露。\n\n\n# 78.能不能自己写个类，也叫java.lang.String？\n\n可以，但在应用的时候，需要用自己的类加载器去加载，否则，系统的类加载器永远只是去加载jre.jar包中的那个java.lang.String。由于在tomcat的web应用程序中，都是由webapp自己的类加载器先自己加载WEB-INF/classess目录中的类，然后才委托上级的类加载器加载，如果我们在tomcat的web应用程序中写一个java.lang.String，这时候Servlet程序加载的就是我们自己写的java.lang.String，但是这么干就会出很多潜在的问题，原来所有用了java.lang.String类的都将出现问题。\n\n虽然java提供了endorsed技术，可以覆盖jdk中的某些类，具体做法是….。但是，能够被覆盖的类是有限制范围，反正不包括java.lang这样的包中的类。例如，运行下面的程序：\n\npackage java.lang;\npublic class String {\n /**\n  * @param args\n  */\n public static void main(String[] args) {\n  // TODO Auto-generated method stub\n  System.out.println("string");\n }\n}\n\n\n报告的错误如下： java.lang.NoSuchMethodError: main\n\nException in thread "main"\n\n这是因为加载了jre自带的java.lang.String，而该类中没有main方法。\n\n\n# 79.获得一个类的类对象有哪些方式？\n\n答：\n\n方法1：类型.class，例如：String.class\n\n方法2：对象.getClass()，例如：”hello”.getClass()\n\n方法3：Class.forName()，例如：Class.forName(“java.lang.String”)\n\n\n# 80.Java代码查错\n\n1）\n\nabstract class Name {\n    private String name;\n    public abstract boolean isStupidName(String name) {}\n}\n\n\n这有何错误? 答案: 错。abstract method必须以分号结尾，且不带花括号。\n\n2）\n\npublic class Something {\n    void doSomething () {\n        private String s = "";\n        int l = s.length();\n    }\n}\n\n\n有错吗? 答案: 错。局部变量前不能放置任何访问修饰符 (private，public，和protected)。final可以用来修饰局部变量(final如同abstract和strictfp，都是非访问修饰符，strictfp只能修饰class和method而非variable)。\n\n3）\n\nabstract class Something {\n    private abstract String doSomething ();\n}\n\n\n这好像没什么错吧? 答案: 错。abstract的methods不能以private修饰。abstract的methods就是让子类implement(实现)具体细节的，怎么可以用private把abstract method封锁起来呢? (同理，abstract method前不能加final)。\n\n4）\n\npublic class Something {\n    public int addOne(final int x) {\n        return ++x;\n    }\n}\n\n\n这个比较明显。 答案: 错。int x被修饰成final，意味着x不能在addOne method中被修改。\n\n5）\n\npublic class Something {\n    public static void main(String[] args) {\n        Other o = new Other();\n        new Something().addOne(o);\n    }\n    public void addOne(final Other o) {\n        o.i++;\n    }\n}\nclass Other {\n    public int i;\n}\n\n\n和上面的很相似，都是关于final的问题，这有错吗? 答案: 正确。在addOne method中，参数o被修饰成final。如果在addOne method里我们修改了o的reference(比如: o = new Other()😉，那么如同上例这题也是错的。但这里修改的是o的member vairable(成员变量)，而o的reference并没有改变。\n\n6）\n\nclass Something {\n    int i;\n    public void doSomething() {\n        System.out.println("i = " + i);\n    }\n}\n\n\n有什么错呢? 看不出来啊。 答案: 正确。输出的是"i = 0"。int i属於instant variable (实例变量，或叫成员变量)。instant variable有default value。int的default value是0。\n\n7）\n\nclass Something {\n    final int i;\n    public void doSomething() {\n        System.out.println("i = " + i);\n    }\n}\n\n\n和上面一题只有一个地方不同，就是多了一个final。这难道就错了吗? 答案: 错。final int i是个final的instant variable (实例变量，或叫成员变量)。final的instant variable没有default value，必须在constructor (构造器)结束之前被赋予一个明确的值。可以修改为“final int i = 0;”。\n\n8）\n\npublic class Something {\n    public static void main(String[] args) {\n        Something s = new Something();\n        System.out.println("s.doSomething() returns " + doSomething());\n    }\n    public String doSomething() {\n        return "Do something ...";\n    }\n}\n\n\n看上去很完美。 答案: 错。看上去在main里call doSomething没有什么问题，毕竟两个methods都在同一个class里。但仔细看，main是static的。static method不能直接call non-static methods。可改成"System.out.println("s.doSomething() returns " + s.doSomething());"。同理，static method不能访问non-static instant variable。\n\n9）\n\n此处，Something类的文件名叫OtherThing.java\n\nclass Something {\n    private static void main(String[] something_to_do) {   \n        System.out.println("Do something ...");\n    }\n}\n\n\n这个好像很明显。 答案: 正确。从来没有人说过Java的Class名字必须和其文件名相同。但public class的名字必须和文件名相同。\n\n10）\n\ninterface A{\n    int x = 0;\n}\nclass B{\n    int x =1;\n}\nclass C extends B implements A {\n    public void pX(){\n        System.out.println(x);\n    }\n    public static void main(String[] args) {\n        new C().pX();\n    }\n}\n\n\n答案：错误。在编译时会发生错误(错误描述不同的JVM有不同的信息，意思就是未明确的x调用，两个x都匹配（就象在同时import java.util和java.sql两个包时直接声明Date一样)。对于父类的变量,可以用super.x来明确，而接口的属性默认隐含为 public static final.所以可以通过A.x来明确。 11）\n\ninterface Playable {\n    void play();\n}\ninterface Bounceable {\n    void play();\n}\ninterface Rollable extends Playable, Bounceable {\n    Ball ball = new Ball("PingPang");\n}\nclass Ball implements Rollable {\n    private String name;\n    public String getName() {\n        return name;\n    }\n    public Ball(String name) {\n        this.name = name;   \n    }\n    public void play() {\n        ball = new Ball("Football");\n        System.out.println(ball.getName());\n    }\n}\n\n\n这个错误不容易发现。 答案: 错。\n\n"interface Rollable extends Playable, Bounceable"没有问题。interface可继承多个interfaces，所以这里没错。问题出在interface Rollable里的"Ball ball = new Ball("PingPang");"。任何在interface里声明的interface variable (接口变量，也可称成员变量)，默认为public static final。也就是说"Ball ball = new Ball("PingPang");"实际上是"public static final Ball ball = new Ball("PingPang");"。在Ball类的Play()方法中，"ball = new Ball("Football");"改变了ball的reference，而这里的ball来自Rollable interface，Rollable interface里的ball是public static final的，final的object是不能被改变reference的。\n\n因此编译器将在"ball = new Ball("Football");"这里显示有错。',normalizedContent:'> 本文收集自网络，原出处不明。\n\n\n# 1.一个".java"源文件中是否可以包括多个类（不是内部类）？有什么限制？\n\n可以有多个类，但只能有一个public的类，并且public的类名必须与文件名相一致。\n\n\n# 2.java有没有goto?\n\n没有，但是 goto 是 java 中的保留字。\n\n\n# 3.说说&和&&的区别\n\n&和&&都可以用作逻辑与的运算符，表示逻辑与（and），当运算符两边的表达式的结果都为true时，整个运算结果才为true，否则，只要有一方为false，则结果为false。\n\n&&还具有短路的功能，即如果第一个表达式为false，则不再计算第二个表达式，例如，对于if(str != null && !str.equals(“”))表达式，当str为null时，后面的表达式不会执行，所以不会出现nullpointerexception如果将&&改为&，则会抛出nullpointerexception异常。if(x==33 & ++y>0) y会增长，if(x==33 && ++y>0)不会增长\n\n&还可以用作位运算符，当&操作符两边的表达式不是boolean类型时，&表示按位与操作，我们通常使用0x0f来与一个整数进行&运算，来获取该整数的最低4个bit位，例如，0x31 & 0x0f的结果为0x01。\n\n\n# 4.在java中如何跳出当前的多重嵌套循环？\n\n在java中，要想跳出多重循环，可以在外面的循环语句前定义一个标号，然后在里层循环体的代码中使用带有标号的break 语句，即可跳出外层循环。例如，\n\n    ok:\n    for (int i = 0; i < 10; i++) {\n        for (int j = 0; j < 10; j++) {\n            system.out.println("i=" + i + ",j=" + j);\n            if (j == 5) break ok;\n        }\n    }\n\n\n另外，可以不使用标号这种方式，而是让外层的循环条件表达式的结果可以受到里层循环体代码的控制，例如，要在二维数组中查找到某个数字。\n\n    int[][] arr = {{1, 2, 3}, {4, 5, 6, 7}, {9}};\n    boolean found = false;\n    for (int i = 0; i < arr.length && !found; i++) {\n        for (int j = 0; j < arr[i].length; j++) {\n            system.out.println("i = " + i + ", j = " + j);\n            if (arr[i][j] == 5) {\n                found = true;\n                break;\n            }\n        }\n    }\n\n\n敲黑板：建议使用第二种，第一种已经被业界淘汰了。\n\n\n# 5.switch语句能否作用在byte上，能否作用在long上，能否作用在string上?\n\n在switch（expr1）中，expr1只能是一个整数表达式或者枚举常量（更大字体），整数表达式可以是int基本类型或integer包装类型，由于，byte,short,char都可以隐含转换为int，所以，这些类型以及这些类型的包装类型也是可以的。\n\nswitch 不支持 long 类型；从 java1.7开始 switch 开始支持 string，这是 java 的语法糖。\n\n\n# 6.short s1 = 1; s1 = s1 + 1;有什么错? short s1 = 1; s1 += 1;有什么错?\n\n对于short s1 = 1; s1 = s1 + 1; 由于s1+1运算时会自动提升表达式的类型，所以结果是int型，再赋值给short类型s1时，编译器将报告需要强制转换类型的错误。\n\n对于short s1 = 1; s1 += 1;由于 += 是java语言规定的运算符，java编译器会对它进行特殊处理，因此可以正确编译。\n\n\n# 7.char型变量中能不能存贮一个中文汉字?为什么?\n\nchar型变量是用来存储unicode编码的字符的，unicode编码字符集中包含了汉字，所以，char型变量中当然可以存储汉字啦。不过，如果某个特殊的汉字没有被包含在unicode编码字符集中，那么，这个char型变量中就不能存储这个特殊汉字。补充说明：unicode编码占用两个字节，所以，char类型的变量也是占用两个字节。\n\n\n# 8.用最有效率的方法算出2乘以8等于几?\n\n2 << 3。因为将一个数左移n位，就相当于乘以了2的n次方，那么，一个数乘以8只要将其左移3位即可，而位运算cpu直接支持的，效率最高，所以，2乘以8等於几的最效率的方法是2 << 3。\n\n\n# 9.请设计一个一百亿的计算器\n\n首先要明白这道题目的考查点是什么，一是要对计算机原理的底层细节要清楚，要知道加减法的位运算原理和计算机中的算术运算会发生越界的情况；二是要具备一定的面向对象的设计思想。\n\n首先，计算机中用固定数量的几个字节来存储的数值，所以计算机中能够表示的数值是有一定的范围的，先以byte 类型的整数为例，它用1个字节进行存储，表示的最大数值范围为-128到+127。-1在内存中对应的二进制数据为11111111，如果两个-1相加，不考虑java运算时的类型提升，运算后会产生进位，二进制结果为1,11111110，由于进位后超过了byte类型的存储空间，所以进位部分被舍弃，即最终的结果为11111110，也就是-2，这正好利用溢位的方式实现了负数的运算。-128在内存中对应的二进制数据为10000000，如果两个-128相加，不考虑java运算时的类型提升，运算后会产生进位，二进制结果为1,00000000，由于进位后超过了byte类型的存储空间，所以进位部分被舍弃，即最终的结果为00000000，也就是0，这样的结果显然不符合期望，这说明计算机中的算术运算是会发生越界情况的，两个数值的运算结果不能超过计算机中的该类型的数值范围。由于java中涉及表达式运算时的类型自动提升，无法用byte类型来做演示这种问题和现象的实验，可以用下面一个使用整数做实验的例子程序体验一下：\n\n    int a = integer.max_value;\n    int b = integer.max_value;\n    int sum = a + b;\n    system.out.println(“a=”+a+”,b=”+b+”,sum=”+sum);\n\n\n先不考虑long类型，由于int的正数范围为2的31次方，表示的最大数值约等于210001000*1000，也就是20亿的大小，所以，要实现一个一百亿的计算器，我们得自己设计一个类可以用于表示很大的整数，并且提供了与另外一个整数进行加减乘除的功能，大概功能如下：\n\n1）这个类内部有两个成员变量，一个表示符号，另一个用字节数组表示数值的二进制数；\n\n2）有一个构造方法，把一个包含有多位数值的字符串转换到内部的符号和字节数组中；\n\n3）提供加减乘除的功能；\n\npublic class biginteger{\n  int sign;\n  byte[] val;\n  public biginteger(string val) {\n   sign = ;\n   val = ;\n  }\n  public biginteger add(biginteger other) {\n   \n  }\n  public biginteger subtract(biginteger other) {\n   \n  }\n  public biginteger multiply(biginteger other){\n   \n  }\n  public biginteger divide(biginteger other){\n   \n  }\n}\n\n\n备注：要想写出这个类的完整代码，是非常复杂的，如果有兴趣的话，可以参看jdk中自带的java.math.biginteger类的源码。面试的人也知道谁都不可能在短时间内写出这个类的完整代码的，他要的是你是否有这方面的概念和意识，他最重要的还是考查你的能力，所以，不要因为自己无法写出完整的最终结果就放弃答这道题，能做的就是你比别人写得多，证明你比别人强，有这方面的思想意识就可以了，毕竟别人可能连题目的意思都看不懂，什么都没写，要敢于答这道题，即使只答了一部分，那也与那些什么都不懂的人区别出来，拉开了距离，算是矮子中的高个，机会当然就得到了。另外，答案中的框架代码也很重要，体现了一些面向对象设计的功底，特别是其中的方法命名很专业，用的英文单词很精准，这也是能力、经验、专业性、英语水平等多个方面的体现，会给人留下很好的印象，在编程能力和其他方面条件差不多的情况下，英语好除了可以获得更多机会外，薪水可以高出一千元。\n\n\n# 10.使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？\n\n使用final关键字修饰一个变量时，是指引用变量不能变，引用变量所指向的对象中的内容还是可以改变的。例如，对于如下语句：\n\nfinal stringbuffer a=new stringbuffer("immutable");\n\n\n执行如下语句将报告编译期错误：\n\na=new stringbuffer("");\n\n\n但是，执行如下语句则可以通过编译：\n\na.append(" broken!");\n\n\n有人在定义方法的参数时，可能想采用如下形式来阻止方法内部修改传进来的参数对象：\n\npublic void method(final stringbuffer param){}\n\n\n实际上，这是办不到的，在该方法内部仍然可以增加如下代码来修改参数对象：\n\nparam.append("a");\n\n\n\n# 11."=="和equals方法究竟有什么区别？\n\n==操作符专门用来比较两个变量的值是否相等，也就是用于比较变量所对应的内存中所存储的数值是否相同，要比较两个基本类型的数据或两个引用变量是否相等，只能用==操作符。\n\n如果一个变量指向的数据是对象类型的，那么，这时候涉及了两块内存，对象本身占用一块内存（堆内存），变量也占用一块内存，例如objet obj = new object();变量obj是一个内存，new object()是另一个内存，此时，变量obj所对应的内存中存储的数值就是对象占用的那块内存的首地址。对于指向对象类型的变量，如果要比较两个变量是否指向同一个对象，即要看这两个变量所对应的内存中的数值是否相等，这时候就需要用==操作符进行比较。\n\nequals方法是用于比较两个独立对象的内容是否相同，就好比去比较两个人的长相是否相同，它比较的两个对象是独立的。例如，对于下面的代码：\n\nstring a=new string("foo");\nstring b=new string("foo");\n\n\n两条new语句创建了两个对象，然后用a,b这两个变量分别指向了其中一个对象，这是两个不同的对象，它们的首地址是不同的，即a和b中存储的数值是不相同的，所以，表达式a==b将返回false，而这两个对象中的内容是相同的，所以，表达式a.equals(b)将返回true。\n\n在实际开发中，我们经常要比较传递进行来的字符串内容是否等，例如，string input = input.equals(“quit”)，许多人稍不注意就使用==进行比较了，这是错误的，随便从网上找几个项目实战的教学视频看看，里面就有大量这样的错误。记住，字符串的比较基本上都是使用equals方法。\n\n如果一个类没有自己定义equals方法，那么它将继承object类的equals方法，object类的equals方法的实现代码如下：\n\nboolean equals(object o){\nreturn this==o;\n}\n\n\n这说明，如果一个类没有自己定义equals方法，它默认的equals方法（从object 类继承的）就是使用==操作符，也是在比较两个变量指向的对象是否是同一对象，这时候使用equals和使用==会得到同样的结果，如果比较的是两个独立的对象则总返回false。如果你编写的类希望能够比较该类创建的两个实例对象的内容是否相同，那么你必须覆盖equals方法，由你自己写代码来决定在什么情况即可认为两个对象的内容是相同的。\n\n\n# 12.静态变量和实例变量的区别？\n\n在语法定义上的区别：静态变量前要加static关键字，而实例变量前则不加。\n\n在程序运行时的区别：实例变量属于某个对象的属性，必须创建了实例对象，其中的实例变量才会被分配空间，才能使用这个实例变量。静态变量不属于某个实例对象，而是属于类，所以也称为类变量，只要程序加载了类的字节码，不用创建任何实例对象，静态变量就会被分配空间，静态变量就可以被使用了。总之，实例变量必须创建对象后才可以通过这个对象来使用，静态变量则可以直接使用类名来引用。\n\n例如，对于下面的程序，无论创建多少个实例对象，永远都只分配了一个staticvar变量，并且每创建一个实例对象，这个staticvar就会加1；但是，每创建一个实例对象，就会分配一个instancevar，即可能分配多个instancevar，并且每个instancevar的值都只自加了1次。\n\npublic class varianttest {\n    public static int staticvar = 0;\n    public int instancevar = 0;\n\n    public varianttest() {\n        staticvar++;\n        instancevar++;\n        system.out.println("staticvar=" + staticvar + ",instancevar=" + instancevar);\n    }\n}\n\n\n\n# 13.是否可以从一个static方法内部发出对非static方法的调用？\n\n不可以。\n\n因为非static方法是要与对象关联在一起的，必须创建一个对象后，才可以在该对象上进行方法调用，而static方法调用时不需要创建对象，可以直接调用。也就是说，当一个static方法被调用时，可能还没有创建任何实例对象，如果从一个static方法中发出对非static方法的调用，那个非static方法是关联到哪个对象上的呢？这个逻辑无法成立，所以，一个static方法内部发出对非static方法的调用。\n\n\n# 14.integer与int的区别\n\nint是java提供的8种原始数据类型之一。java为每个原始类型提供了封装类，integer是java为int提供的封装类。int的默认值为0，而integer的默认值为null，即integer可以区分出未赋值和值为0的区别，int则无法表达出未赋值的情况，例如，要想表达出没有参加考试和考试成绩为0的区别，则只能使用integer。在jsp开发中，integer的默认为null，所以用el表达式在文本框中显示时，值为空白字符串，而int默认的默认值为0，所以用el表达式在文本框中显示时，结果为0，所以，int不适合作为web层的表单数据的类型。\n\n在hibernate中，如果将oid定义为integer类型，那么hibernate就可以根据其值是否为null而判断一个对象是否是临时的，如果将oid定义为了int类型，还需要在hbm映射文件中设置其unsaved-value属性为0。\n\n另外，integer提供了多个与整数相关的操作方法，例如，将一个字符串转换成整数，integer中还定义了表示整数的最大值和最小值的常量。\n\n\n# 15.math.round(11.5)等于多少? math.round(-11.5)等于多少?\n\nmath类中提供了三个与取整有关的方法：ceil、floor、round，这些方法的作用与它们的英文名称的含义相对应，例如，ceil的英文意义是天花板，该方法就表示向上取整，math.ceil(11.3)的结果为12,math.ceil(-11.3)的结果是-11；floor的英文意义是地板，该方法就表示向下取整，math.floor(11.6)的结果为11,math.floor(-11.6)的结果是-12；最难掌握的是round方法，它表示“四舍五入”，算法为math.floor(x+0.5)，即将原来的数字加上0.5后再向下取整，所以，math.round(11.5)的结果为12，math.round(-11.5)的结果为-11。\n\n\n# 16.请说出作用域public，private，protected，以及不写时的区别\n\n这四个作用域的可见范围如下表所示。\n\n说明：如果在修饰的元素上面没有写任何访问修饰符，则表示friendly。\n\n作用域         当前类   同一package   子孙类   其他package\npublic      √     √           √     √\nprotected   √     √           √     ×\nfriendly    √     √           ×     ×\nprivate     √     ×           ×     ×\n\n备注：只要记住了有4种访问权限，4个访问范围，然后将全选和范围在水平和垂直方向上分别按排从小到大或从大到小的顺序排列，就很容易画出上面的图了。\n\n\n# 17.overload和override的区别。overloaded的方法是否可以改变返回值的类型?\n\noverload是重载的意思，override是覆盖的意思，也就是重写。\n\n重载overload表示同一个类中可以有多个名称相同的方法，但这些方法的参数列表各不相同（即参数个数或类型不同）。\n\n重写override表示子类中的方法可以与父类中的某个方法的名称和参数完全相同，通过子类创建的实例对象调用这个方法时，将调用子类中的定义方法，这相当于把父类中定义的那个完全相同的方法给覆盖了，这也是面向对象编程的多态性的一种表现。子类覆盖父类的方法时，只能比父类抛出更少的异常，或者是抛出父类抛出的异常的子异常，因为子类可以解决父类的一些问题，不能比父类有更多的问题。子类方法的访问权限只能比父类的更大，不能更小。如果父类的方法是private类型，那么，子类则不存在覆盖的限制，相当于子类中增加了一个全新的方法。\n\n至于overloaded的方法是否可以改变返回值的类型这个问题，要看你倒底想问什么呢？这个题目很模糊。如果几个overloaded的方法的参数列表不一样，它们的返回者类型当然也可以不一样。但我估计你想问的问题是：如果两个方法的参数列表完全一样，是否可以让它们的返回值不同来实现重载overload。这是不行的，我们可以用反证法来说明这个问题，因为我们有时候调用一个方法时也可以不定义返回结果变量，即不要关心其返回结果，例如，我们调用map.remove(key)方法时，虽然remove方法有返回值，但是我们通常都不会定义接收返回结果的变量，这时候假设该类中有两个名称和参数列表完全相同的方法，仅仅是返回类型不同，java就无法确定编程者倒底是想调用哪个方法了，因为它无法通过返回结果类型来判断。\n\noverride可以翻译为覆盖，从字面就可以知道，它是覆盖了一个方法并且对其重写，以求达到不同的作用。对我们来说最熟悉的覆盖就是对接口方法的实现，在接口中一般只是对方法进行了声明，而我们在实现时，就需要实现接口声明的所有方法。除了这个典型的用法以外，我们在继承中也可能会在子类覆盖父类中的方法。在覆盖要注意以下的几点：\n\n1）覆盖的方法的标志必须要和被覆盖的方法的标志完全匹配，才能达到覆盖的效果；\n\n2）覆盖的方法的返回值必须和被覆盖的方法的返回一致；\n\n3）覆盖的方法所抛出的异常必须和被覆盖方法的所抛出的异常一致，或者是其子类；\n\n4）被覆盖的方法不能为private，否则在其子类中只是新定义了一个方法，并没有对其进行覆盖。\n\noverload对我们来说可能比较熟悉，可以翻译为重载，它是指我们可以定义一些名称相同的方法，通过定义不同的输入参数来区分这些方法，然后再调用时，jvm就会根据不同的参数样式，来选择合适的方法执行。在使用重载要注意以下的几点：\n\n1）在使用重载时只能通过不同的参数样式。例如，不同的参数类型，不同的参数个数，不同的参数顺序（当然，同一方法内的几个参数类型必须不一样，例如可以是fun(int,float)，但是不能为fun(int,int)）；\n\n2）不能通过访问权限、返回类型、抛出的异常进行重载；\n\n3）方法的异常类型和数目不会对重载造成影响；\n\n4）对于继承来说，如果某一方法在父类中是访问权限是priavte，那么就不能在子类对其进行重载，如果定义的话，也只是定义了一个新方法，而不会达到重载的效果。\n\n\n# 18.构造器constructor是否可被override?\n\n构造器constructor不能被继承，因此不能重写override，但可以被重载overload。\n\n\n# 19.接口是否可继承接口? 抽象类是否可实现(implements)接口? 抽象类是否可继承具体类(concrete class)? 抽象类中是否可以有静态的main方法？\n\n接口可以继承接口。抽象类可以实现(implements)接口，抽象类可以继承具体类。抽象类中可以有静态的main方法。\n\n备注：只要明白了接口和抽象类的本质和作用，这些问题都很好回答，想想看，如果自己作为是java语言的设计者，是否会提供这样的支持，如果不提供的话，有什么理由吗？如果没有道理不提供，那答案就是肯定的了。\n\n只有记住抽象类与普通类的唯一区别就是不能创建实例对象和允许有abstract方法。\n\n\n# 20.写clone()方法时，通常都有一行代码，是什么？\n\nclone 有缺省行为，super.clone();因为首先要把父类中的成员复制到位，然后才是复制自己的成员。\n\n\n# 21.面向对象的特征有哪些方面\n\n计算机软件系统是现实生活中的业务在计算机中的映射，而现实生活中的业务其实就是一个个对象协作的过程。面向对象编程就是按现实业务一样的方式将程序代码按一个个对象进行组织和编写，让计算机系统能够识别和理解用对象方式组织和编写的程序代码，这样就可以把现实生活中的业务对象映射到计算机系统中。\n\n面向对象的编程语言有封装、继承 、抽象、多态等4个主要的特征。\n\n1）封装：\n\n封装是保证软件部件具有优良的模块性的基础，封装的目标就是要实现软件部件的“高内聚、低耦合”，防止程序相互依赖性而带来的变动影响。在面向对象的编程语言中，对象是封装的最基本单位，面向对象的封装比传统语言的封装更为清晰、更为有力。面向对象的封装就是把描述一个对象的属性和行为的代码封装在一个“模块”中，也就是一个类中，属性用变量定义，行为用方法进行定义，方法可以直接访问同一个对象中的属性。通常情况下，只要记住让变量和访问这个变量的方法放在一起，将一个类中的成员变量全部定义成私有的，只有这个类自己的方法才可以访问到这些成员变量，这就基本上实现对象的封装，就很容易找出要分配到这个类上的方法了，就基本上算是会面向对象的编程了。把握一个原则：把对同一事物进行操作的方法和相关的方法放在同一个类中，把方法和它操作的数据放在同一个类中。\n\n例如，人要在黑板上画圆，这一共涉及三个对象：人、黑板、圆，画圆的方法要分配给哪个对象呢？由于画圆需要使用到圆心和半径，圆心和半径显然是圆的属性，如果将它们在类中定义成了私有的成员变量，那么，画圆的方法必须分配给圆，它才能访问到圆心和半径这两个属性，人以后只是调用圆的画圆方法、表示给圆发给消息而已，画圆这个方法不应该分配在人这个对象上，这就是面向对象的封装性，即将对象封装成一个高度自治和相对封闭的个体，对象状态（属性）由这个对象自己的行为（方法）来读取和改变。一个更便于理解的例子就是，司机将火车刹住了，刹车的动作是分配给司机，还是分配给火车，显然，应该分配给火车，因为司机自身是不可能有那么大的力气将一个火车给停下来的，只有火车自己才能完成这一动作，火车需要调用内部的离合器和刹车片等多个器件协作才能完成刹车这个动作，司机刹车的过程只是给火车发了一个消息，通知火车要执行刹车动作而已。\n\n2）继承：\n\n在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并可以加入若干新的内容，或修改原来的方法使之更适合特殊的需要，这就是继承。继承是子类自动共享父类数据和方法的机制，这是类之间的一种关系，提高了软件的可重用性和可扩展性。\n\n3）抽象：\n\n抽象就是找出一些事物的相似和共性之处，然后将这些事物归为一个类，这个类只考虑这些事物的相似和共性之处，并且会忽略与当前主题和目标无关的那些方面，将注意力集中在与当前目标有关的方面。例如，看到一只蚂蚁和大象，你能够想象出它们的相同之处，那就是抽象。抽象包括行为抽象和状态抽象两个方面。例如，定义一个person类，如下：\n\nclass person{\n\nstring name;\n\nint age;\n\n}\n\n人本来是很复杂的事物，有很多方面，但因为当前系统只需要了解人的姓名和年龄，所以上面定义的类中只包含姓名和年龄这两个属性，这就是一种抽像，使用抽象可以避免考虑一些与目标无关的细节。我对抽象的理解就是不要用显微镜去看一个事物的所有方面，这样涉及的内容就太多了，而是要善于划分问题的边界，当前系统需要什么，就只考虑什么。\n\n4）多态：\n\n多态是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。因为在程序运行时才确定具体的类，这样，不用修改源程序代码，就可以让引用变量绑定到各种不同的类实现上，从而导致该引用调用的具体方法随之改变，即不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性。多态性增强了软件的灵活性和扩展性。例如，下面代码中的userdao是一个接口，它定义引用变量userdao指向的实例对象由daofactory.getdao()在执行的时候返回，有时候指向的是userjdbcdao这个实现，有时候指向的是userhibernatedao这个实现，这样，不用修改源代码，就可以改变userdao指向的具体类实现，从而导致userdao.insertuser()方法调用的具体代码也随之改变，即有时候调用的是userjdbcdao的insertuser方法，有时候调用的是userhibernatedao的insertuser方法：\n\nuserdao userdao = daofactory.getdao();\n\nuserdao.insertuser(user);\n\n比喻：人吃饭，你看到的是左手，还是右手？\n\n\n# 22.java中实现多态的机制是什么？\n\n靠的是父类或接口定义的引用变量可以指向子类或具体实现类的实例对象，而程序调用的方法在运行期才动态绑定，就是引用变量所指向的具体实例对象的方法，也就是内存里正在运行的那个对象的方法，而不是引用变量的类型中定义的方法。\n\n\n# 23.abstract class和interface有什么区别?\n\n含有abstract修饰符的class即为抽象类，abstract 类不能创建的实例对象。含有abstract方法的类必须定义为abstract class，abstract class类中的方法不必是抽象的。abstract class类中定义抽象方法必须在具体(concrete)子类中实现，所以，不能有抽象构造方法或抽象静态方法。如果的子类没有实现抽象父类中的所有抽象方法，那么子类也必须定义为abstract类型。\n\n接口（interface）可以说成是抽象类的一种特例，接口中的所有方法都必须是抽象的。接口中的方法定义默认为public abstract类型，接口中的成员变量类型默认为public static final。\n\n下面比较一下两者的语法区别：\n\n1）抽象类可以有构造方法，接口中不能有构造方法。\n\n2）抽象类中可以有普通成员变量，接口中没有普通成员变量\n\n3）抽象类中可以包含非抽象的普通方法，接口中的所有方法必须都是抽象的，不能有非抽象的普通方法。\n\n4） 抽象类中的抽象方法的访问类型可以是public，protected和（默认类型,虽然\n\neclipse下不报错，但应该也不行），但接口中的抽象方法只能是public类型的，并且默认即为public abstract类型。\n\n5）抽象类中可以包含静态方法，接口中不能包含静态方法\n\n6）抽象类和接口中都可以包含静态成员变量，抽象类中的静态成员变量的访问类型可以任意，但接口中定义的变量只能是public static final类型，并且默认即为public static final类型。\n\n7）一个类可以实现多个接口，但只能继承一个抽象类。\n\n下面接着再说说两者在应用上的区别：\n\n接口更多的是在系统架构设计方法发挥作用，主要用于定义模块之间的通信契约。而抽象类在代码实现方面发挥作用，可以实现代码的重用，例如，模板方法设计模式是抽象类的一个典型应用，假设某个项目的所有servlet类都要用相同的方式进行权限判断、记录访问日志和处理异常，那么就可以定义一个抽象的基类，让所有的servlet都继承这个抽象基类，在抽象基类的service方法中完成权限判断、记录访问日志和处理异常的代码，在各个子类中只是完成各自的业务逻辑代码，伪代码如下：\n\npublic abstract class baseservlet extends httpservlet {\n\n    public final void service(httpservletrequest request, httpservletresponse response) throws ioexception, servletexception {\n        // 记录访问日志, 进行权限判断\n        if (具有权限) {\n            try {\n                doservice(request, response);\n            } catch (exception e) {\n                // todo：记录异常信息\n            }\n        }\n    }\n\n    protected abstract void doservice(httpservletrequest request, httpservletresponse response) throws ioexception, servletexception {\n        //注意访问权限定义成protected，显得既专业，又严谨，因为它是专门给子类用的\n    }\n}\n\n\npublic class myservlet1 extends baseservlet {\n    protected void doservice(httpservletrequest request, httpservletresponse response) throws ioexcetion, servletexception {\n        // 本servlet只处理的具体业务逻辑代码\n    }\n}\n\n\n父类方法中间的某段代码不确定，留给子类干，就用模板方法设计模式。 备注：这道题的思路是先从总体解释抽象类和接口的基本概念，然后再比较两者的语法细节，最后再说两者的应用区别。比较两者语法细节区别的条理是：先从一个类中的构造方法、普通成员变量和方法（包括抽象方法），静态变量和方法，继承性等6个方面逐一去比较回答，接着从第三者继承的角度的回答，特别是最后用了一个典型的例子来展现自己深厚的技术功底。\n\n\n# 24.abstract的method是否可同时是static,是否可同时是native，是否可同时是synchronized?\n\nabstract的method 不可以是static的，因为抽象的方法是要被子类实现的，而static与子类扯不上关系！\n\nnative方法表示该方法要用另外一种依赖平台的编程语言实现的，不存在着被子类实现的问题，所以，它也不能是抽象的，不能与abstract混用。例如，fileoutputsteam类要硬件打交道，底层的实现用的是操作系统相关的api实现，例如，在windows用c语言实现的，所以，查看jdk 的源代码，可以发现fileoutputstream的open方法的定义如下：\n\nprivate native void open(string name) throws filenotfoundexception;\n\n如果我们要用java调用别人写的c语言函数，我们是无法直接调用的，我们需要按照java的要求写一个c语言的函数，又我们的这个c语言函数去调用别人的c语言函数。由于我们的c语言函数是按java的要求来写的，我们这个c语言函数就可以与java对接上，java那边的对接方式就是定义出与我们这个c函数相对应的方法，java中对应的方法不需要写具体的代码，但需要在前面声明native。\n\n关于synchronized与abstract合用的问题，我觉得也不行，因为在我几年的学习和开发中，从来没见到过这种情况，并且我觉得synchronized应该是作用在一个具体的方法上才有意义。而且，方法上的synchronized同步所使用的同步锁对象是this，而抽象方法上无法确定this是什么。\n\n\n# 25.什么是内部类？static nested class 和 inner class的不同\n\n内部类就是在一个类的内部定义的类，内部类中不能定义静态成员（静态成员不是对象的特性，只是为了找一个容身之处，所以需要放到一个类中而已，这么一点小事，你还要把它放到类内部的一个类中，过分了啊！提供内部类，不是为让你干这种事情，无聊，不让你干。我想可能是既然静态成员类似c语言的全局变量，而内部类通常是用于创建内部对象用的，所以，把“全局变量”放在内部类中就是毫无意义的事情，既然是毫无意义的事情，就应该被禁止），内部类可以直接访问外部类中的成员变量，内部类可以定义在外部类的方法外面，也可以定义在外部类的方法体中，如下所示：\n\npublic class outer {\n    int out_x = 0;\n\n    public void method() {\n        //在方法体内部定义的内部类\n        class inner2 {\n            public void method() {\n                out_x = 3;\n            }\n        }\n        inner2 inner2 = new inner2();\n    }\n\n    //在方法体外面定义的内部类\n    public class inner1 {\n\n    }\n}\n\n\n在方法体外面定义的内部类的访问类型可以是public,protecte,默认的，private等4种类型，这就好像类中定义的成员变量有4种访问类型一样，它们决定这个内部类的定义对其他类是否可见；对于这种情况，我们也可以在外面创建内部类的实例对象，创建内部类的实例对象时，一定要先创建外部类的实例对象，然后用这个外部类的实例对象去创建内部类的实例对象，代码如下：\n\nouter outer = new outer();\nouter.inner1 inner1 = outer.new innner1();\n\n\n在方法内部定义的内部类前面不能有访问类型修饰符，就好像方法中定义的局部变量一样，但这种内部类的前面可以使用final或abstract修饰符。这种内部类对其他类是不可见的其他类无法引用这种内部类，但是这种内部类创建的实例对象可以传递给其他类访问。这种内部类必须是先定义，后使用，即内部类的定义代码必须出现在使用该类之前，这与方法中的局部变量必须先定义后使用的道理也是一样的。这种内部类可以访问方法体中的局部变量，但是，该局部变量前必须加final修饰符。\n\n对于这些细节，只要在eclipse写代码试试，根据开发工具提示的各类错误信息就可以马上了解到。\n\n在方法体内部还可以采用如下语法来创建一种匿名内部类，即定义某一接口或类的子类的同时，还创建了该子类的实例对象，无需为该子类定义名称：\n\npublic class outer {\n    public void start() {\n        new thread(new runnable() {\n            public void run() {\n            }\n        }).start();\n    }\n}\n\n\n最后，在方法外部定义的内部类前面可以加上static关键字，从而成为static nested class，它不再具有内部类的特性，所有，从狭义上讲，它不是内部类。static nested class与普通类在运行时的行为和功能上没有什么区别，只是在编程引用时的语法上有一些差别，它可以定义成public、protected、默认的、private等多种类型，而普通类只能定义成public和默认的这两种类型。在外面引用static nested class类的名称为“外部类名.内部类名”。在外面不需要创建外部类的实例对象，就可以直接创建static nested class，例如，假设inner是定义在outer类中的static nested class，那么可以使用如下语句创建inner类：\n\nouter.inner inner = new outer.inner();\n\n\n由于static nested class不依赖于外部类的实例对象，所以，static nested class能访问外部类的非static成员变量。当在外部类中访问static nested class时，可以直接使用static nested class的名字，而不需要加上外部类的名字了，在static nested class中也可以直接引用外部类的static的成员变量，不需要加上外部类的名字。\n\n在静态方法中定义的内部类也是static nested class，这时候不能在类前面加static关键字，静态方法中的static nested class与普通方法中的内部类的应用方式很相似，它除了可以直接访问外部类中的static的成员变量，还可以访问静态方法中的局部变量，但是，该局部变量前必须加final修饰符。\n\n备注：首先根据印象说出自己对内部类的总体方面的特点。例如，在两个地方可以定义，可以访问外部类的成员变量，不能定义静态成员，这是大的特点。然后再说一些细节方面的知识，例如，几种定义方式的语法区别，静态内部类，以及匿名内部类。\n\n\n# 26.内部类可以引用它的包含类的成员吗？有没有什么限制？\n\n完全可以。如果不是静态内部类，那没有什么限制！\n\n如果把静态嵌套类当作内部类的一种特例，那在这种情况下不可以访问外部类的普通成员变量，而只能访问外部类中的静态成员，例如，下面的代码：\n\nclass outer {\n    static int x;\n\n    static class inner {\n        void test() {\n            syso(x);\n        }\n    }\n}\n\n\n答题时，也要能察言观色，揣摩提问者的心思，显然面试官想知道的是静态内部类不能访问外部类的成员，但如果一上来就顶牛，这不好，要先顺着人家，让人家满意，然后再说特殊情况，让人家吃惊。\n\n\n# 27.anonymous inner class (匿名内部类) 是否可以extends(继承)其它类，是否可以implements(实现)interface(接口)?\n\n可以继承其他类或实现其他接口。不仅是可以，而是必须!\n\n\n# 28.super.getclass()方法调用\n\n下面程序的输出结果是多少？\n\nimport java.util.date;\n\npublic class test extends date {\n public static void main(string[] args) {\n  new test().test();\n }\n \n public void test() {\n  system.out.println(super.getclass().getname());\n }\n}\n\n\n很奇怪，结果是test。\n\n在test方法中，直接调用getclass().getname()方法，返回的是test类名。由于getclass()在object类中定义成了final，子类不能覆盖该方法，所以，在test方法中调用getclass().getname()方法，其实就是在调用从父类继承的getclass()方法，等效于调用super.getclass().getname()方法，所以，super.getclass().getname()方法返回的也应该是test。\n\n如果想得到父类的名称，应该用如下代码：\n\ngetclass().getsuperclass().getname();\n\n\n\n# 29.string是最基本的数据类型吗?\n\n基本数据类型包括byte、int、char、long、float、double、boolean和short。\n\njava.lang.string类是final类型的，因此不可以继承这个类、不能修改这个类。为了提高效率节省空间，我们应该用stringbuffer类\n\n\n# 30.string s = "hello";s = s + " world!";这两行代码执行后，原始的string对象中的内容到底变了没有？\n\n没有。\n\n因为string被设计成不可变(immutable)类，所以它的所有对象都是不可变对象。在这段代码中，s原先指向一个string对象，内容是 "hello"，然后我们对s进行了+操作，那么s所指向的那个对象是否发生了改变呢？答案是没有。这时，s不指向原来那个对象了，而指向了另一个 string对象，内容为"hello world!"，原来那个对象还存在于内存之中，只是s这个引用变量不再指向它了。\n\n通过上面的说明，我们很容易导出另一个结论，如果经常对字符串进行各种各样的修改，或者说，不可预见的修改，那么使用string来代表字符串的话会引起很大的内存开销。因为 string对象建立之后不能再改变，所以对于每一个不同的字符串，都需要一个string对象来表示。这时，应该考虑使用stringbuffer类，它允许修改，而不是每个不同的字符串都要生成一个新的对象。并且，这两种类的对象转换十分容易。\n\n同时，我们还可以知道，如果要使用内容相同的字符串，不必每次都new一个string。例如我们要在构造器中对一个名叫s的string引用变量进行初始化，把它设置为初始值，应当这样做：\n\npublic class demo {\nprivate string s;\n...\npublic demo {\n s = "initial value";\n}\n...\n}\n\n\n而非\n\ns = new string("initial value");\n\n\n后者每次都会调用构造器，生成新对象，性能低下且内存开销大，并且没有意义，因为string对象不可改变，所以对于内容相同的字符串，只要一个string对象来表示就可以了。也就说，多次调用上面的构造器创建多个对象，他们的string类型属性s都指向同一个对象。\n\n上面的结论还基于这样一个事实：对于字符串常量，如果内容相同，java认为它们代表同一个string对象。而用关键字new调用构造器，总是会创建一个新的对象，无论内容是否相同。\n\n至于为什么要把string类设计成不可变类，是它的用途决定的。其实不只string，很多java标准类库中的类都是不可变的。在开发一个系统的时候，我们有时候也需要设计不可变类，来传递一组相关的值，这也是面向对象思想的体现。不可变类有一些优点，比如因为它的对象是只读的，所以多线程并发访问也不会有任何问题。当然也有一些缺点，比如每个不同的状态都要一个对象来代表，可能造成性能上的问题。所以java标准类库还提供了一个可变版本，即stringbuffer。\n\n\n# 31.是否可以继承string类?\n\nstring类是final类故不可以继承。\n\n\n# 32.string s = new string("xyz");创建了几个string object? 二者之间有什么区别？\n\n两个或一个，”xyz”对应一个对象，这个对象放在字符串常量缓冲区，常量”xyz”不管出现多少遍，都是缓冲区中的那一个。new string每写一遍，就创建一个新的对象，它一句那个常量”xyz”对象的内容来创建出一个新string对象。如果以前就用过’xyz’，这句代表就不会创建”xyz”自己了，直接从缓冲区拿。\n\n\n# 33.string 和stringbuffer的区别\n\njava平台提供了两个类：string和stringbuffer，它们可以储存和操作字符串，即包含多个字符的字符数据。这个string类提供了数值不可改变的字符串。而这个stringbuffer类提供的字符串进行修改。当你知道字符数据要改变的时候你就可以使用stringbuffer。典型地，你可以使用stringbuffers来动态构造字符数据。另外，string实现了equals方法，new string(“abc”).equals(new string(“abc”)的结果为true,而stringbuffer没有实现equals方法，所以，new stringbuffer(“abc”).equals(new stringbuffer(“abc”)的结果为false。\n\n接着要举一个具体的例子来说明，我们要把1到100的所有数字拼起来，组成一个串。\n\nstringbuffer sbf = new stringbuffer();\nfor(int i=0;i<100;i++)\n{\n sbf.append(i);\n}\n\n\n上面的代码效率很高，因为只创建了一个stringbuffer对象，而下面的代码效率很低，因为创建了101个对象。\n\nstring str = new string();\nfor(int i=0;i<100;i++)\n{\n str = str + i;\n}\n\n\n在讲两者区别时，应把循环的次数搞成10000，然后用endtime-begintime来比较两者执行的时间差异，最后还要讲讲stringbuilder与stringbuffer的区别。\n\nstring覆盖了equals方法和hashcode方法，而stringbuffer没有覆盖equals方法和hashcode方法，所以，将stringbuffer对象存储进java集合类中时会出现问题。\n\n\n# 34.如何把一段逗号分割的字符串转换成一个数组?\n\n1）用正则表达式，代码大概为：\n\nstring [] result = orgstr.split(",");\n\n\n2）用 stringtokenizer ,代码为：\n\nstringtokenizer tokener = stringtokenizer(orgstr,",");\nstring [] result = new string[tokener .counttokens()];\nint i=0;\nwhile(tokener.hasnext(){result[i++]=toker.nexttoken();}\n\n\n\n# 35.数组有没有length()这个方法? string有没有length()这个方法？\n\n数组没有length()这个方法，有length的属性。string有有length()这个方法。\n\n\n# 36.下面这条语句一共创建了多少个对象? string s="a"+"b"+"c"+"d"\n\n对于如下代码：\n\nstring s1 = "a";\nstring s2 = s1 + "b";\nstring s3 = "a" + "b";\nsystem.out.println(s2 == "ab");\nsystem.out.println(s3 == "ab");\n\n\n第一条语句打印的结果为false，第二条语句打印的结果为true，这说明javac编译可以对字符串常量直接相加的表达式进行优化，不必要等到运行期去进行加法运算处理，而是在编译时去掉其中的加号，直接将其编译成一个这些常量相连的结果。\n\n题目中的第一行代码被编译器在编译时优化后，相当于直接定义了一个”abcd”的字符串，所以，上面的代码应该只创建了一个string对象。写如下两行代码，\n\nstring s = "a" + "b" + "c" + "d";\nsystem.out.println(s == "abcd");\n\n\n最终打印的结果应该为true。\n\n\n# 37.try {}里有一个return语句，那么紧跟在这个try后的finally {}里的code会不会被执行，什么时候被执行，在return前还是后?\n\n也许你的答案是在return之前，但往更细地说，我的答案是在return中间执行，请看下面程序代码的运行结果：\n\npublic class test {\n\n    public static void main(string[] args) {\n        system.out.println(test.test());\n    }\n\n    static int test() {\n        int x = 1;\n        try {\n            return x;\n        } finally {\n            ++x;\n        }\n    }\n}\n\n\n---------执行结果 ---------\n\n1\n\n运行结果是1，为什么呢？主函数调用子函数并得到结果的过程，好比主函数准备一个空罐子，当子函数要返回结果时，先把结果放在罐子里，然后再将程序逻辑返回到主函数。所谓返回，就是子函数说，我不运行了，你主函数继续运行吧，这没什么结果可言，结果是在说这话之前放进罐子里的。\n\n\n# 38.下面的程序代码输出的结果是多少？\n\npublic class smallt {\n    public static void main(string args[]) {\n        smallt t = new smallt();\n        int b = t.get();\n        system.out.println(b);\n    }\n\n    public int get() {\n        try {\n            return 1;\n        } finally {\n            return 2;\n        }\n    }\n}\n\n\n返回的结果是2。\n\n从下面例子的运行结果中可以发现，try中的return语句调用的函数先于finally中调用的函数执行，也就是说return语句先执行，finally语句后执行，所以，返回的结果是2。return并不是让函数马上返回，而是return语句执行后，将把返回结果放置进函数栈中，此时函数并不是马上返回，它要执行finally语句后才真正开始返回。\n\n在讲解答案时可以用下面的程序来帮助分析：\n\npublic class test {\n    /**\n     * @param args add by leixiaoshuai 爱笑的架构师\n     */\n    public static void main(string[] args) {\n        system.out.println(new test().test());\n    }\n\n    int test() {\n        try {\n            return func1();\n        } finally {\n            return func2();\n        }\n    }\n\n    int func1() {\n        system.out.println("func1");\n        return 1;\n    }\n\n    int func2() {\n        system.out.println("func2");\n        return 2;\n    }\n}\n\n\n-----------执行结果----------------- func1\n\nfunc2\n\n2\n\n结论：finally中的代码比return 和break语句后执行。\n\n\n# 39.final, finally, finalize的区别\n\nfinal 用于声明属性，方法和类，分别表示属性不可变，方法不可覆盖，类不可继承。\n\n内部类要访问局部变量，局部变量必须定义成final类型。\n\nfinally是异常处理语句结构的一部分，表示总是执行。\n\nfinalize是object类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，可以覆盖此方法提供垃圾收集时的其他资源回收，例如关闭文件等。jvm不保证此方法总被调用\n\n\n# 40.运行时异常与一般异常有何异同？\n\n异常表示程序运行过程中可能出现的非正常状态，运行时异常表示虚拟机的通常操作中可能遇到的异常，是一种常见运行错误。java编译器要求方法必须声明抛出可能发生的非运行时异常，但是并不要求必须声明抛出未被捕获的运行时异常。\n\n\n# 41.error和exception有什么区别?\n\nerror 表示恢复不是不可能但很困难的情况下的一种严重问题。比如说内存溢出。不可能指望程序能处理这样的情况。 exception 表示一种设计或实现问题。也就是说，它表示如果程序运行正常，从不会发生的情况。\n\n\n# 42.java中的异常处理机制的简单原理和应用\n\n异常是指java程序运行时（非编译）所发生的非正常情况或错误，与现实生活中的事件很相似，现实生活中的事件可以包含事件发生的时间、地点、人物、情节等信息，可以用一个对象来表示，java使用面向对象的方式来处理异常，它把程序中发生的每个异常也都分别封装到一个对象来表示的，该对象中包含有异常的信息。\n\njava对异常进行了分类，不同类型的异常分别用不同的java类表示，所有异常的根类为java.lang.throwable，throwable下面又派生了两个子类：error和exception，error 表示应用程序本身无法克服和恢复的一种严重问题，程序只有死的份了，例如，说内存溢出和线程死锁等系统问题。exception表示程序还能够克服和恢复的问题，其中又分为系统异常和普通异常，系统异常是软件本身缺陷所导致的问题，也就是软件开发人员考虑不周所导致的问题，软件使用者无法克服和恢复这种问题，但在这种问题下还可以让软件系统继续运行或者让软件死掉，例如数组脚本越界（arrayindexoutofboundsexception），空指针异常（nullpointerexception）、类转换异常（classcastexception）；普通异常是运行环境的变化或异常所导致的问题，是用户能够克服的问题，例如，网络断线，硬盘空间不够，发生这样的异常后，程序不应该死掉。\n\njava为系统异常和普通异常提供了不同的解决方案，编译器强制普通异常必须try..catch处理或用throws声明继续抛给上层调用方法处理，所以普通异常也称为checked异常，而系统异常可以处理也可以不处理，所以，编译器不强制用try..catch处理或用throws声明，所以系统异常也称为unchecked异常。\n\n提示答题者：就按照三个级别去思考：虚拟机必须宕机的错误，程序可以死掉也可以不死掉的错误，程序不应该死掉的错误；\n\n\n# 43.请写出你最常见到的5个runtime exception\n\n这道题主要考你的代码量到底多大，如果你长期写代码的，应该经常都看到过一些系统方面的异常，你不一定真要回答出5个具体的系统异常，但你要能够说出什么是系统异常，以及几个系统异常就可以了，当然，这些异常完全用其英文名称来写是最好的，如果实在写不出，那就用中文吧，有总比没有强！\n\n所谓系统异常，就是…..，它们都是runtimeexception的子类，在jdk doc中查runtimeexception类，就可以看到其所有的子类列表，也就是看到了所有的系统异常。我比较有印象的系统异常有：nullpointerexception、arrayindexoutofboundsexception、classcastexception。\n\n\n# 44.java中有几种方法可以实现一个线程？用什么关键字修饰同步方法? stop()和suspend()方法为何不推荐使用？\n\njava5以前，有如下两种：\n\n第一种：new thread(){}.start();这表示调用thread子类对象的run方法，new thread(){}表示一个thread的匿名子类的实例对象，子类加上run方法后的代码如下：\n\nnew thread(){\n public void run(){\n }\n}.start();\n\n\n第二种：\n\nnew thread(new runnable(){}).start();这表示调用thread对象接受的runnable对象的run方法，new runnable(){}表示一个runnable的匿名子类的实例对象,runnable的子类加上run方法后的代码如下：\n\nnew thread(new runnable(){\n   public void run(){\n   } \n  }\n ).start();\n\n\n从java5开始，还有如下一些线程池创建多线程的方式：\n\nexecutorservice pool = executors.newfixedthreadpool(3)\nfor(int i=0;i<10;i++)\n{\n    pool.execute(new runable(){public void run(){}});\n}\nexecutors.newcachedthreadpool().execute(new runable(){public void run(){}});\nexecutors.newsinglethreadexecutor().execute(new runable(){public void run(){}});\n\n\n有两种实现方法，分别使用new thread()和new thread(runnable)形式，第一种直接调用thread的run方法，所以，我们往往使用thread子类，即new subthread()。第二种调用runnable的run方法。\n\n有两种实现方法，分别是继承thread类与实现runnable接口，用synchronized关键字修饰同步方法。反对使用stop()，是因为它不安全。它会解除由线程获取的所有锁定，而且如果对象处于一种不连贯状态，那么其他线程能在那种状态下检查和修改它们。结果很难检查出真正的问题所在。suspend()方法容易发生死锁。调用suspend()的时候，目标线程会停下来，但却仍然持有在这之前获得的锁定。此时，其他任何线程都不能访问锁定的资源，除非被"挂起"的线程恢复运行。对任何线程来说，如果它们想恢复目标线程，同时又试图使用任何一个锁定的资源，就会造成死锁。所以不应该使用suspend()，而应在自己的thread类中置入一个标志，指出线程应该活动还是挂起。若标志指出线程应该挂起，便用wait()命其进入等待状态。若标志指出线程应当恢复，则用一个notify()重新启动线程。\n\n\n# 45.sleep() 和 wait() 有什么区别?\n\nsleep是线程类（thread）的方法，导致此线程暂停执行指定时间，给执行机会给其他线程，但是监控状态依然保持，到时后会自动恢复。调用sleep不会释放对象锁。 wait是object类的方法，对此对象调用wait方法导致本线程放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象发出notify方法（或notifyall）后本线程才进入对象锁定池准备获得对象锁进入运行状态。\n\nsleep就是正在执行的线程主动让出cpu，cpu去执行其他线程，在sleep指定的时间过后，cpu才会回到这个线程上继续往下执行，如果当前线程进入了同步锁，sleep方法并不会释放锁，即使当前线程使用sleep方法让出了cpu，但其他被同步锁挡住了的线程也无法得到执行。wait是指在一个已经进入了同步锁的线程内，让自己暂时让出同步锁，以便其他正在等待此锁的线程可以得到同步锁并运行，只有其他线程调用了notify方法（notify并不释放锁，只是告诉调用过wait方法的线程可以去参与获得锁的竞争了，但不是马上得到锁，因为锁还在别人手里，别人还没释放。如果notify方法后面的代码还有很多，需要这些代码执行完后才会释放锁，可以在notfiy方法后增加一个等待和一些代码，看看效果），调用wait方法的线程就会解除wait状态和程序可以再次得到锁后继续向下运行。对于wait的讲解一定要配合例子代码来说明，才显得自己真明白。\n\npublic class multithread {\n    public static void main(string[] args) {\n        new thread(new thread1()).start();\n        try {\n            thread.sleep(10);\n        } catch (interruptedexception e) {\n            e.printstacktrace();\n        }\n        new thread(new thread2()).start();\n    }\n\n    private static class thread1 implements runnable {\n        @override\n        public void run() {\n            //由于这里的thread1和下面的thread2内部run方法要用同一对象作为监视器，我们这里不能用this，因为在thread2里面的this和这个thread1的this不是同一个对象。我们用multithread.class这个字节码对象，当前虚拟机里引用这个变量时，指向的都是同一个对象。\n            synchronized (multithread.class) {\n                system.out.println("enter thread1...");\n                system.out.println("thread1 is waiting");\n                try {\n                    //释放锁有两种方式，第一种方式是程序自然离开监视器的范围，也就是离开了synchronized关键字管辖的代码范围，另一种方式就是在synchronized关键字管辖的代码内部调用监视器对象的wait方法。这里，使用wait方法释放锁。\n                    multithread.class.wait();\n                } catch (interruptedexception e) {\n                    e.printstacktrace();\n                }\n                system.out.println("thread1 is going on...");\n                system.out.println("thread1 is being over!");\n            }\n        }\n    }\n\n    private static class thread2 implements runnable {\n        @override\n        public void run() {\n            synchronized (multithread.class) {\n                system.out.println("enter thread2...");\n                system.out.println("thread2 notify other thread can release wait status..");\n                //由于notify方法并不释放锁， 即使thread2调用下面的sleep方法休息了10毫秒，但thread1仍然不会执行，因为thread2没有释放锁，所以thread1无法得不到锁。\n                multithread.class.notify();\n                system.out.println("thread2 is sleeping ten millisecond...");\n                try {\n                    thread.sleep(10);\n                } catch (interruptedexception e) {\n                    e.printstacktrace();\n                }\n                system.out.println("thread2 is going on...");\n                system.out.println("thread2 is being over!");\n            }\n        }\n    }\n}\n\n\n\n# 46.同步和异步有何异同，在什么情况下分别使用他们？举例说明\n\n如果数据将在线程间共享。例如正在写的数据以后可能被另一个线程读到，或者正在读的数据可能已经被另一个线程写过了，那么这些数据就是共享数据，必须进行同步存取。\n\n当应用程序在对象上调用了一个需要花费很长时间来执行的方法，并且不希望让程序等待方法的返回时，就应该使用异步编程，在很多情况下采用异步途径往往更有效率。\n\n\n# 47.多线程有几种实现方法?同步有几种实现方法?\n\n多线程有两种实现方法，分别是继承thread类与实现runnable接口。\n\n同步的实现方面有两种，分别是synchronized,wait与notify。\n\nwait():使一个线程处于等待状态，并且释放所持有的对象的lock。\n\nsleep():使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要捕捉interruptedexception异常。\n\nnotify():唤醒一个处于等待状态的线程，注意的是在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由jvm确定唤醒哪个线程，而且不是按优先级。\n\nallnotity():唤醒所有处入等待状态的线程，注意并不是给所有唤醒线程一个对象的锁，而是让它们竞争。\n\n\n# 48.启动一个线程是用run()还是start()？\n\n启动一个线程是调用start()方法，使线程就绪状态，以后可以被调度为运行状态，一个线程必须关联一些具体的执行代码，run()方法是该线程所关联的执行代码。\n\n\n# 49.当一个线程进入一个对象的一个synchronized方法后，其它线程是否可进入此对象的其它方法?\n\n分几种情况：\n\n1）其他方法前是否加了synchronized关键字，如果没加，则能。\n\n2）如果这个方法内部调用了wait，则可以进入其他synchronized方法。\n\n3）如果其他个方法都加了synchronized关键字，并且内部没有调用wait，则不能。\n\n4）如果其他方法是static，它用的同步锁是当前类的字节码，与非静态的方法不能同步，因为非静态的方法用的是this。\n\n\n# 50.线程的基本概念、线程的基本状态以及状态之间的关系\n\n一个程序中可以有多条执行线索同时执行，一个线程就是程序中的一条执行线索，每个线程上都关联有要执行的代码，即可以有多段程序代码同时运行，每个程序至少都有一个线程，即main方法执行的那个线程。如果只是一个cpu，它怎么能够同时执行多段程序呢？这是从宏观上来看的，cpu一会执行a线索，一会执行b线索，切换时间很快，给人的感觉是a,b在同时执行，好比大家在同一个办公室上网，只有一条链接到外部网线，其实，这条网线一会为a传数据，一会为b传数据，由于切换时间很短暂，所以，大家感觉都在同时上网。\n\n状态：就绪，运行，synchronize阻塞，wait和sleep挂起，结束。wait必须在synchronized内部调用。\n\n调用线程的start方法后线程进入就绪状态，线程调度系统将就绪状态的线程转为运行状态，遇到synchronized语句时，由运行状态转为阻塞，当synchronized获得锁后，由阻塞转为运行，在这种情况可以调用wait方法转为挂起状态，当线程关联的代码执行完后，线程变为结束状态。\n\n\n# 51.简述synchronized和java.util.concurrent.locks.lock的异同 ？\n\n主要相同点：lock能完成synchronized所实现的所有功能。\n\n主要不同点：lock有比synchronized更精确的线程语义和更好的性能。synchronized会自动释放锁，而lock一定要求程序员手工释放，并且必须在finally从句中释放。lock还有更强大的功能，例如，它的trylock方法可以非阻塞方式去拿锁。\n\n举例说明（对下面的题用lock进行了改写）：\n\nimport java.util.concurrent.locks.lock;\nimport java.util.concurrent.locks.reentrantlock;\n\npublic class threadtest {\n    private int j;\n    private lock lock = new reentrantlock();\n\n    public static void main(string[] args) {\n        threadtest tt = new threadtest();\n        for (int i = 0; i < 2; i++) {\n            new thread(tt.new adder()).start();\n            new thread(tt.new subtractor()).start();\n        }\n    }\n\n    private class subtractor implements runnable {\n        @override\n        public void run() {\n            while (true) {\n    /*synchronized (threadtest.this) {   \n     system.out.println("j--=" + j--);\n     //这里抛异常了，锁能释放吗？\n    }*/\n                lock.lock();\n                try {\n                    system.out.println("j--=" + j--);\n                } finally {\n                    lock.unlock();\n                }\n            }\n        }\n\n    }\n\n    private class adder implements runnable {\n        @override\n        public void run() {\n            while (true) {\n    /*synchronized (threadtest.this) {\n    system.out.println("j++=" + j++); \n    }*/\n                lock.lock();\n                try {\n                    system.out.println("j++=" + j++);\n                } finally {\n                    lock.unlock();\n                }\n            }\n        }\n\n    }\n}\n\n\n\n# 52.设计4个线程，其中两个线程每次对j增加1，另外两个线程对j每次减少1。写出程序\n\n以下程序使用内部类实现线程，对j增减的时候没有考虑顺序问题。\n\npublic class threadtest1\n{\nprivate int j;\npublic static void main(string[] args){\n    threadtest1 tt=new threadtest1();\n    inc inc=tt.new inc();\n    dec dec=tt.new dec();\n    for(int i=0;i<2;i++){\n        thread t=new thread(inc);\n        t.start();\n        t=new thread(dec);\n        t.start();\n        }\n    }\nprivate synchronized void inc(){\n    j++;\n    system.out.println(thread.currentthread().getname()+"-inc:"+j);\n    }\nprivate synchronized void dec(){\n    j--;\n    system.out.println(thread.currentthread().getname()+"-dec:"+j);\n    }\nclass inc implements runnable{\n    public void run(){\n        for(int i=0;i<100;i++){\n        inc();\n        }\n    }\n}\nclass dec implements runnable{\n    public void run(){\n        for(int i=0;i<100;i++){\n        dec();\n        }\n    }\n}\n}\n\n\n----------随手再写的一个-------------\n\nclass a\n{\njmanger j =new jmanager();\nmain()\n{\n new a().call();\n}\nvoid call()\n{\n for(int i=0;i<2;i++)\n {\n  new thread(\n   new runnable(){ public void run(){while(true){j.accumulate();}}}\n  ).start();\n  new thread(new runnable(){ public void run(){while(true){j.sub();}}}).start();\n }\n}\n}\nclass jmanager\n{\n private int j = 0;\n \n public synchronized void subtract()\n {\n  j--;\n }\n \n public synchronized void accumulate()\n {\n  j++;\n }\n \n}\n\n\n\n# 53.子线程循环10次，接着主线程循环100，接着又回到子线程循环10次，接着再回到主线程又循环100，如此循环50次，请写出程序\n\n最终的程序代码如下：\n\npublic class threadtest {\n\n public static void main(string[] args) {\n  new threadtest().init();\n }\n public void init()\n {\n  final business business = new business();\n  new thread(\n    new runnable()\n    {\n     public void run() {\n      for(int i=0;i<50;i++)\n      {\n       business.subthread(i);\n      }      \n     }\n     \n    }\n  \n  ).start();\n  for(int i=0;i<50;i++)\n  {\n   business.mainthread(i);\n  }  \n }\n \n private class business\n {\n  boolean bshouldsub = true;//这里相当于定义了控制该谁执行的一个信号灯\n  public synchronized void mainthread(int i)\n  {\n   if(bshouldsub)\n    try {\n     this.wait();\n    } catch (interruptedexception e) {\n     e.printstacktrace();\n    }  \n    \n   for(int j=0;j<5;j++)\n   {\n    system.out.println(thread.currentthread().getname() + ":i=" + i +",j=" + j);\n   }\n   bshouldsub = true;\n   this.notify();\n  \n  }\n  \n  public synchronized void subthread(int i)\n  {\n   if(!bshouldsub)\n    try {\n     this.wait();\n    } catch (interruptedexception e) {\n     // todo auto-generated catch block\n     e.printstacktrace();\n    } \n    \n   for(int j=0;j<10;j++)\n   {\n    system.out.println(thread.currentthread().getname() + ":i=" + i +",j=" + j);\n   }\n   bshouldsub = false;    \n   this.notify();   \n  }\n }\n}\n\n\n备注：不可能一上来就写出上面的完整代码，最初写出来的代码如下，问题在于两个线程的代码要参照同一个变量，即这两个线程的代码要共享数据，所以，把这两个线程的执行代码搬到同一个类中去：\n\npackage com.huawei.interview.lym;\npublic class threadtest {\n private static boolean bshouldmain = false;\n public static void main(string[] args) {\n  // todo auto-generated method stub\n  /*new thread(){\n  public void run()\n  {\n   for(int i=0;i<50;i++)\n   {\n    for(int j=0;j<10;j++)\n    {\n     system.out.println("i=" + i + ",j=" + j);\n    }\n   }    \n  }\n  \n }.start();*/  \n    \n  //final string str = new string("");\n  new thread(\n    new runnable()\n    {\n     public void run()\n     {\n      for(int i=0;i<50;i++)\n      {\n       synchronized (threadtest.class) {\n        if(bshouldmain)\n        {\n         try {\n          threadtest.class.wait();}\n         catch (interruptedexception e) {\n          e.printstacktrace();\n         }\n        }\n        for(int j=0;j<10;j++)\n        {\n         system.out.println(\n           thread.currentthread().getname() +\n           "i=" + i + ",j=" + j);\n        }\n        bshouldmain = true;\n        threadtest.class.notify();\n       }       \n      }      \n     }\n    }\n  ).start();\n  \n  for(int i=0;i<50;i++)\n  {\n   synchronized (threadtest.class) {\n    if(!bshouldmain)\n    {\n     try {\n      threadtest.class.wait();}\n     catch (interruptedexception e) {\n      e.printstacktrace();\n     }\n    }    \n    for(int j=0;j<5;j++)\n    {\n     system.out.println(\n       thread.currentthread().getname() +       \n       "i=" + i + ",j=" + j);\n    }\n    bshouldmain = false;\n    threadtest.class.notify();    \n   }   \n  }\n }\n}\n\n\n下面使用jdk5中的并发库来实现的：\n\nimport java.util.concurrent.executors;\nimport java.util.concurrent.executorservice;\nimport java.util.concurrent.locks.lock;\nimport java.util.concurrent.locks.reentrantlock;\nimport java.util.concurrent.locks.condition;\npublic class threadtest\n{\n private static lock lock = new reentrantlock();\n private static condition subthreadcondition = lock.newcondition();\n private static boolean bbhouldsubthread = false;\n public static void main(string [] args)\n {\n  executorservice threadpool = executors.newfixedthreadpool(3);\n  threadpool.execute(new runnable(){\n   public void run()\n   {\n    for(int i=0;i<50;i++)\n    {\n     lock.lock();     \n     try\n     {     \n      if(!bbhouldsubthread)\n       subthreadcondition.await();\n      for(int j=0;j<10;j++)\n      {\n       system.out.println(thread.currentthread().getname() + ",j=" + j);\n      }\n      bbhouldsubthread = false;\n      subthreadcondition.signal();\n     }catch(exception e)\n     {      \n     }\n     finally\n     {\n      lock.unlock();\n     }\n    }   \n   }\n   \n  });\n  threadpool.shutdown();\n  for(int i=0;i<50;i++)\n  {\n    lock.lock();     \n    try\n    { \n     if(bbhouldsubthread)\n       subthreadcondition.await();        \n     for(int j=0;j<10;j++)\n     {\n      system.out.println(thread.currentthread().getname() + ",j=" + j);\n     }\n     bbhouldsubthread = true;\n     subthreadcondition.signal();     \n    }catch(exception e)\n    {      \n    }\n    finally\n    {\n     lock.unlock();\n    }     \n  }\n }\n}\n\n\n\n# 54.collection框架中实现比较要实现什么接口\n\ncomparable/comparator\n\n\n# 55.arraylist和vector的区别\n\n这两个类都实现了list接口（list接口继承了collection接口），他们都是有序集合，即存储在这两个集合中的元素的位置都是有顺序的，相当于一种动态的数组，我们以后可以按位置索引号取出某个元素，，并且其中的数据是允许重复的，这是hashset之类的集合的最大不同处，hashset之类的集合不可以按索引号去检索其中的元素，也不允许有重复的元素（本来题目问的与hashset没有任何关系，但为了说清楚arraylist与vector的功能，我们使用对比方式，更有利于说明问题）。\n\n接着才说arraylist与vector的区别，这主要包括两个方面：.\n\n（1）同步性：\n\nvector是线程安全的，也就是说是它的方法之间是线程同步的，而arraylist是线程序不安全的，它的方法之间是线程不同步的。如果只有一个线程会访问到集合，那最好是使用arraylist，因为它不考虑线程安全，效率会高些；如果有多个线程会访问到集合，那最好是使用vector，因为不需要我们自己再去考虑和编写线程安全的代码。\n\n备注：对于vector&arraylist、hashtable&hashmap，要记住线程安全的问题，记住vector与hashtable是旧的，是java一诞生就提供了的，它们是线程安全的，arraylist与hashmap是java2时才提供的，它们是线程不安全的。所以，我们讲课时先讲老的。\n\n（2）数据增长：\n\narraylist与vector都有一个初始的容量大小，当存储进它们里面的元素的个数超过了容量时，就需要增加arraylist与vector的存储空间，每次要增加存储空间时，不是只增加一个存储单元，而是增加多个存储单元，每次增加的存储单元的个数在内存空间利用与程序效率之间要取得一定的平衡。vector默认增长为原来两倍，而arraylist的增长策略在文档中没有明确规定（从源代码看到的是增长为原来的1.5倍）。arraylist与vector都可以设置初始的空间大小，vector还可以设置增长的空间大小，而arraylist没有提供设置增长空间的方法。\n\n总结：即vector增长原来的一倍，arraylist增加原来的0.5倍。\n\n\n# 56.hashmap和hashtable的区别\n\nhashmap是hashtable的轻量级实现（非线程安全的实现），他们都完成了map接口，主要区别在于hashmap允许空（null）键值（key）,由于非线程安全，在只有一个线程访问的情况下，效率要高于hashtable。\n\nhashmap允许将null作为一个entry的key或者value，而hashtable不允许。hashmap把hashtable的contains方法去掉了，改成containsvalue和containskey。因为contains方法容易让人引起误解。\n\nhashtable继承自dictionary类，而hashmap是java1.2引进的map interface的一个实现。\n\n最大的不同是，hashtable的方法是synchronize的，而hashmap不是，在多个线程访问hashtable时，不需要自己为它的方法实现同步，而hashmap 就必须为之提供外同步。\n\nhashtable和hashmap采用的hash/rehash算法都大概一样，所以性能不会有很大的差异。\n\n就hashmap与hashtable主要从三方面来说：\n\n1）历史原因:hashtable是基于陈旧的dictionary类的，hashmap是java 1.2引进的map接口的一个实现；\n\n2）同步性:hashtable是线程安全的，也就是说是同步的，而hashmap是线程序不安全的，不是同步的；\n\n3）值：只有hashmap可以让你将空值作为一个表的条目的key或value\n\n\n# 57.list 和 map 区别?\n\n一个是存储单列数据的集合，另一个是存储键和值这样的双列数据的集合，list中存储的数据是有顺序，并且允许重复；map中存储的数据是没有顺序的，其键是不能重复的，它的值是可以有重复的。\n\n\n# 58.list, set, map是否继承自collection接口?\n\nlist，set是，map不是\n\n\n# 59.list、map、set三个接口，存取元素时，各有什么特点？\n\n这样的题属于随意发挥题：这样的题比较考水平，两个方面的水平：一是要真正明白这些内容，二是要有较强的总结和表述能力。如果你明白，但表述不清楚，在别人那里则等同于不明白。\n\n首先，list与set具有相似性，它们都是单列元素的集合，所以，它们有一个功共同的父接口，叫collection。set里面不允许有重复的元素，所谓重复，即不能有两个相等（注意，不是仅仅是相同）的对象 ，即假设set集合中有了一个a对象，现在我要向set集合再存入一个b对象，但b对象与a对象equals相等，则b对象存储不进去，所以，set集合的add方法有一个boolean的返回值，当集合中没有某个元素，此时add方法可成功加入该元素时，则返回true，当集合含有与某个元素equals相等的元素时，此时add方法无法加入该元素，返回结果为false。set取元素时，没法说取第几个，只能以iterator接口取得所有的元素，再逐一遍历各个元素。\n\nlist表示有先后顺序的集合， 注意，不是那种按年龄、按大小、按价格之类的排序。当我们多次调用add(obj e)方法时，每次加入的对象就像火车站买票有排队顺序一样，按先来后到的顺序排序。有时候，也可以插队，即调用add(int index,obj e)方法，就可以指定当前对象在集合中的存放位置。一个对象可以被反复存储进list中，每调用一次add方法，这个对象就被插入进集合中一次，其实，并不是把这个对象本身存储进了集合中，而是在集合中用一个索引变量指向这个对象，当这个对象被add多次时，即相当于集合中有多个索引指向了这个对象，如图x所示。list除了可以以iterator接口取得所有的元素，再逐一遍历各个元素之外，还可以调用get(index i)来明确说明取第几个。\n\nmap与list和set不同，它是双列的集合，其中有put方法，定义如下：put(obj key,obj value)，每次存储时，要存储一对key/value，不能存储重复的key，这个重复的规则也是按equals比较相等。取则可以根据key获得相应的value，即get(object key)返回值为key 所对应的value。另外，也可以获得所有的key的结合，还可以获得所有的value的结合，还可以获得key和value组合成的map.entry对象的集合。\n\nlist 以特定次序来持有元素，可有重复元素。set 无法拥有重复元素,内部排序。map 保存key-value值，value可多值。\n\nhashset按照hashcode值的某种运算方式进行存储，而不是直接按hashcode值的大小进行存储。例如，"abc" ---\x3e 78，"def" ---\x3e 62，"xyz" ---\x3e 65在hashset中的存储顺序不是62，65，78。linkedhashset按插入的顺序存储，那被存储对象的hashcode方法还有什么作用呢？hashset集合比较两个对象是否相等，首先看hashcode方法是否相等，然后看equals方法是否相等。new 两个student插入到hashset中，看hashset的size，实现hashcode和equals方法后再看size。\n\n同一个对象可以在vector中加入多次。往集合里面加元素，相当于集合里用一根绳子连接到了目标对象。往hashset中却加不了多次的。\n\n\n# 60.说出arraylist,vector, linkedlist的存储性能和特性\n\narraylist和vector都是使用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉及数组元素移动等内存操作，所以索引数据快而插入数据慢，vector由于使用了synchronized方法（线程安全），通常性能上较arraylist差，而linkedlist使用双向链表实现存储，按序号索引数据需要进行前向或后向遍历，但是插入数据时只需要记录本项的前后项即可，所以插入速度较快。\n\nlinkedlist也是线程不安全的，linkedlist提供了一些方法，使得linkedlist可以被当作堆栈和队列来使用。\n\n\n# 61.去掉一个vector集合中重复的元素\n\nvector newvector = new vector();\nfor (int i=0;i<vector.size();i++)\n{\nobject obj = vector.get(i);\n if(!newvector.contains(obj);\n  newvector.add(obj);\n}\n\n\n还有一种简单的方式\n\nhashset set = new hashset(vector);\n\n\n\n# 62.collection 和 collections的区别\n\ncollection是集合类的上级接口，继承与他的接口主要有set 和list。\n\ncollections是针对集合类的一个帮助类，他提供一系列静态方法实现对各种集合的搜索、排序、线程安全化等操作。\n\n\n# 63.set里的元素是不能重复的，那么用什么方法来区分重复与否呢? 是用==还是equals()? 它们有何区别?\n\nset里的元素是不能重复的，元素重复与否是使用equals()方法进行判断的。\n\nequals()和==方法决定引用值是否指向同一对象equals()在类中被覆盖，为的是当两个分离的对象的内容和类型相配的话，返回真值。\n\n\n# 64.你所知道的集合类都有哪些？主要方法？\n\n最常用的集合类是 list 和 map。 list 的具体实现包括 arraylist 和 vector，它们是可变大小的列表，比较适合构建、存储和操作任何类型对象的元素列表。 list 适用于按数值索引访问元素的情形。\n\nmap 提供了一个更通用的元素存储方法。 map 集合类用于存储元素对（称作"键"和"值"），其中每个键映射到一个值。\n\n记的不是方法名，而是思想，知道它们都有增删改查的方法，。因为只要在eclispe下按点操作符，很自然的这些方法就出来了。记住的一些思想就是list类会有get(int index)这样的方法，因为它可以按顺序取元素，而set类中没有get(int index)这样的方法。list和set都可以迭代出所有元素，迭代时先要得到一个iterator对象，所以，set和list类都有一个iterator方法，用于返回那个iterator对象。map可以返回三个集合，一个是返回所有的key的集合，另外一个返回的是所有value的集合，再一个返回的key和value组合成的entryset对象的集合，map也有get方法，参数是key，返回值是key对应的value。\n\n\n# 65.两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，这句话对不对?\n\n对。\n\n如果对象要保存在hashset或hashmap中，它们的equals相等，那么，它们的hashcode值就必须相等。\n\n如果不是要保存在hashset或hashmap，则与hashcode没有什么关系了，这时候hashcode不等是可以的，例如arraylist存储的对象就不用实现hashcode，当然，我们没有理由不实现，通常都会去实现的。\n\n\n# 66.treeset里面放对象，如果同时放入了父类和子类的实例对象，那比较时使用的是父类的compareto方法，还是使用的子类的compareto方法，还是抛异常\n\n当前的add方法放入的是哪个对象，就调用哪个对象的compareto方法，至于这个compareto方法怎么做，就看当前这个对象的类中是如何编写这个方法的。\n\n代码：\n\npublic class parent implements comparable {\n private int age = 0;\n public parent(int age){\n  this.age = age;\n }\n public int compareto(object o) {\n  // todo auto-generated method stub\n  system.out.println("method of parent");\n  parent o1 = (parent)o;\n  return age>o1.age?1:age<o1.age?-1:0;\n }\n}\npublic class child extends parent {\n public child(){\n  super(3);\n }\n public int compareto(object o) {\n   // todo auto-generated method stub\n   system.out.println("method of child");\n//   child o1 = (child)o;\n   return 1;\n }\n}\npublic class treesettest {\n /**\n  * @param args\n  */\n public static void main(string[] args) {\n  // todo auto-generated method stub\n  treeset set = new treeset();\n  set.add(new parent(3));\n  set.add(new child());\n  set.add(new parent(4));\n  system.out.println(set.size());\n }\n}\n\n\n\n# 67.说出一些常用的类，包，接口，请各举5个\n\n要让人家感觉你对java ee开发很熟，所以，不能仅仅只列core java中的那些东西，要多列你在做ssh项目中涉及的那些东西，就写你最近写的那些程序中涉及的那些类。\n\n常用的类：bufferedreader bufferedwriter filereader filewirter string integer\n\njava.util.date，system，class，list,hashmap\n\n常用的包：java.lang java.io java.util java.sql ,javax.servlet,org.apache.strtuts.action,org.hibernate\n\n常用的接口：remote list map document nodelist,servlet,httpservletrequest,httpservletresponse,transaction(hibernate)、session(hibernate),httpsession\n\n\n# 68.java中有几种类型的流？jdk为每种类型的流提供了一些抽象类以供继承，请说出他们分别是哪些类？\n\n字节流，字符流。\n\n字节流继承于inputstream outputstream，字符流继承于inputstreamreader outputstreamwriter。在java.io包中还有许多其他的流，主要是为了提高性能和使用方便。\n\n\n# 69.字节流与字符流的区别\n\n要把一片二进制数据数据逐一输出到某个设备中，或者从某个设备中逐一读取一片二进制数据，不管输入输出设备是什么，我们要用统一的方式来完成这些操作，用一种抽象的方式进行描述，这个抽象描述方式起名为io流，对应的抽象类为outputstream和inputstream ，不同的实现类就代表不同的输入和输出设备，它们都是针对字节进行操作的。\n\n在应用中，经常要完全是字符的一段文本输出去或读进来，用字节流可以吗？计算机中的一切最终都是二进制的字节形式存在。对于“中国”这些字符，首先要得到其对应的字节，然后将字节写入到输出流。读取时，首先读到的是字节，可是我们要把它显示为字符，我们需要将字节转换成字符。由于这样的需求很广泛，人家专门提供了字符流的包装类。\n\n底层设备永远只接受字节数据，有时候要写字符串到底层设备，需要将字符串转成字节再进行写入。字符流是字节流的包装，字符流则是直接接受字符串，它内部将串转成字节，再写入底层设备，这为我们向io设别写入或读取字符串提供了一点点方便。\n\n字符向字节转换时，要注意编码的问题，因为字符串转成字节数组，其实是转成该字符的某种编码的字节形式，读取也是反之的道理。\n\n字节流与字符流关系的代码案例：\nimport java.io.bufferedreader;\nimport java.io.fileinputstream;\nimport java.io.fileoutputstream;\nimport java.io.filereader;\nimport java.io.filewriter;\nimport java.io.inputstreamreader;\nimport java.io.printwriter;\npublic class iotest {\n public static void main(string[] args) throws exception {\n  string str = "中国人";\n  /*fileoutputstream fos = new fileoutputstream("1.txt");\n  \n  fos.write(str.getbytes("utf-8"));\n  fos.close();*/\n  \n  /*filewriter fw = new filewriter("1.txt");\n  fw.write(str);\n  fw.close();*/\n  printwriter pw = new printwriter("1.txt","utf-8");\n  pw.write(str);\n  pw.close();\n  \n  /*filereader fr = new filereader("1.txt");\n  char[] buf = new char[1024];\n  int len = fr.read(buf);\n  string mystr = new string(buf,0,len);\n  system.out.println(mystr);*/\n  /*fileinputstream fr = new fileinputstream("1.txt");\n  byte[] buf = new byte[1024];\n  int len = fr.read(buf);\n  string mystr = new string(buf,0,len,"utf-8");\n  system.out.println(mystr);*/\n  bufferedreader br = new bufferedreader(\n    new inputstreamreader(\n     new fileinputstream("1.txt"),"utf-8" \n     )\n    );\n  string mystr = br.readline();\n  br.close();\n  system.out.println(mystr);\n }\n}\n\n\n\n# 70.什么是java序列化，如何实现java序列化？或者请解释serializable接口的作用\n\n我们有时候将一个java对象变成字节流的形式传出去或者从一个字节流中恢复成一个java对象，例如，要将java对象存储到硬盘或者传送给网络上的其他计算机，这个过程我们可以自己写代码去把一个java对象变成某个格式的字节流再传输，但是，jre本身就提供了这种支持，我们可以调用outputstream的writeobject方法来做，如果要让java 帮我们做，要被传输的对象必须实现serializable接口，这样，javac编译时就会进行特殊处理，编译的类才可以被writeobject方法操作，这就是所谓的序列化。需要被序列化的类必须实现serializable接口，该接口是一个mini接口，其中没有需要实现的方法，implements serializable只是为了标注该对象是可被序列化的。\n\n例如，在web开发中，如果对象被保存在了session中，tomcat在重启时要把session对象序列化到硬盘，这个对象就必须实现serializable接口。如果对象要经过分布式系统进行网络传输或通过rmi等远程调用，这就需要在网络上传输对象，被传输的对象就必须实现serializable接口。\n\n\n# 71.描述一下jvm加载class文件的原理机制?\n\njvm中类的装载是由classloader和它的子类来实现的，java classloader 是一个重要的java运行时系统组件。它负责在运行时查找和装入类文件的类。\n\n\n# 72.heap和stack有什么区别\n\njava的内存分为两类，一类是栈内存，一类是堆内存。栈内存是指程序进入一个方法时，会为这个方法单独分配一块私属存储空间，用于存储这个方法内部的局部变量，当这个方法结束时，分配给这个方法的栈会释放，这个栈中的变量也将随之释放。\n\n堆是与栈作用不同的内存，一般用于存放不放在当前方法栈中的那些数据，例如，使用new创建的对象都放在堆里，所以，它不会随方法的结束而消失。方法中的局部变量使用final修饰后，放在堆中，而不是栈中。\n\n\n# 73.gc是什么? 为什么要有gc?\n\ngc是垃圾收集的意思（gabage collection）,内存处理是编程人员容易出现问题的地方，忘记或者错误的内存回收会导致程序或系统的不稳定甚至崩溃，java提供的gc功能可以自动监测对象是否超过作用域从而达到自动回收内存的目的，java语言没有提供释放已分配内存的显示操作方法。\n\n\n# 74.垃圾回收的优点和原理。并考虑2种回收机制\n\njava语言中一个显著的特点就是引入了垃圾回收机制，使c++程序员最头疼的内存管理的问题迎刃而解，它使得java程序员在编写程序的时候不再需要考虑内存管理。由于有个垃圾回收机制，java中的对象不再有"作用域"的概念，只有对象的引用才有"作用域"。垃圾回收可以有效的防止内存泄露，有效的使用可以使用的内存。垃圾回收器通常是作为一个单独的低级别的线程运行，不可预知的情况下对内存堆中已经死亡的或者长时间没有使用的对象进行清楚和回收，程序员不能实时的调用垃圾回收器对某个对象或所有对象进行垃圾回收。回收机制有分代复制垃圾回收和标记垃圾回收，增量垃圾回收。\n\n\n# 75.垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？\n\n对于gc来说，当程序员创建对象时，gc就开始监控这个对象的地址、大小以及使用情况。通常，gc采用有向图的方式记录和管理堆(heap)中的所有对象。通过这种方式确定哪些对象是“可达的”，哪些对象是“不可达的”。当gc确定一些对象为“不可达”时，gc就有责任回收这些内存空间。可以。程序员可以手动执行system.gc()，通知gc运行，但是java语言规范并不保证gc一定会执行。\n\n\n# 76.什么时候用assert\n\nassertion(断言)在软件开发中是一种常用的调试方式，很多开发语言中都支持这种机制。在实现中，assertion就是在程序中的一条语句，它对一个boolean表达式进行检查，一个正确程序必须保证这个boolean表达式的值为true；如果该值为false，说明程序已经处于不正确的状态下，assert将给出警告或退出。一般来说，assertion用于保证程序最基本、关键的正确性。\n\nassertion检查通常在开发和测试时开启。为了提高性能，在软件发布后，assertion检查通常是关闭的。\n\npackage com.huawei.interview;\npublic class asserttest {\n /**\n  * @param args\n  */\n public static void main(string[] args) {\n  // todo auto-generated method stub\n  int i = 0;\n  for(i=0;i<5;i++)\n  {\n   system.out.println(i);\n  }\n  //假设程序不小心多了一句--i;\n  --i;\n  assert i==5;  \n }\n}\n\n\n\n# 77.java中会存在内存泄漏吗，请简单描述\n\n所谓内存泄露就是指一个不再被程序使用的对象或变量一直被占据在内存中。java中有垃圾回收机制，它可以保证一对象不再被引用的时候，即对象编程了孤儿的时候，对象将自动被垃圾回收器从内存中清除掉。由于java 使用有向图的方式进行垃圾回收管理，可以消除引用循环的问题，例如有两个对象，相互引用，只要它们和根进程不可达的，那么gc也是可以回收它们的，例如下面的代码可以看到这种情况的内存回收：\n\npackage com.huawei.interview;\nimport java.io.ioexception;\npublic class garbagetest {\n /**\n  * @param args\n  * @throws ioexception\n  */\n public static void main(string[] args) throws ioexception {\n  // todo auto-generated method stub\n  try {\n   gctest();\n  } catch (ioexception e) {\n   // todo auto-generated catch block\n   e.printstacktrace();\n  }\n  system.out.println("has exited gctest!");\n  system.in.read();\n  system.in.read();  \n  system.out.println("out begin gc!");  \n  for(int i=0;i<100;i++)\n  {\n   system.gc();\n   system.in.read(); \n   system.in.read(); \n  }\n }\n private static void gctest() throws ioexception {\n  system.in.read();\n  system.in.read();  \n  person p1 = new person();\n  system.in.read();\n  system.in.read();  \n  person p2 = new person();\n  p1.setmate(p2);\n  p2.setmate(p1);\n  system.out.println("before exit gctest!");\n  system.in.read();\n  system.in.read();  \n  system.gc();\n  system.out.println("exit gctest!");\n }\n private static class person\n {\n  byte[] data = new byte[20000000];\n  person mate = null;\n  public void setmate(person other)\n  {\n   mate = other;\n  }\n }\n}\n\n\njava中的内存泄露的情况：长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄露，尽管短生命周期对象已经不再需要，但是因为长生命周期对象持有它的引用而导致不能被回收，这就是java中内存泄露的发生场景，通俗地说，就是程序员可能创建了一个对象，以后一直不再使用这个对象，这个对象却一直被引用，即这个对象无用但是却无法被垃圾回收器回收的，这就是java中可能出现内存泄露的情况，例如，缓存系统，我们加载了一个对象放在缓存中(例如放在一个全局map对象中)，然后一直不再使用它，这个对象一直被缓存引用，但却不再被使用。\n\n检查java中的内存泄露，一定要让程序将各种分支情况都完整执行到程序结束，然后看某个对象是否被使用过，如果没有，则才能判定这个对象属于内存泄露。\n\n如果一个外部类的实例对象的方法返回了一个内部类的实例对象，这个内部类对象被长期引用了，即使那个外部类实例对象不再被使用，但由于内部类持久外部类的实例对象，这个外部类对象将不会被垃圾回收，这也会造成内存泄露。\n\n主要特点就是清空堆栈中的某个元素，并不是彻底把它从数组中拿掉，而是把存储的总数减少，在拿掉某个元素时，顺便也让它从数组中消失，将那个元素所在的位置的值设置为null即可：\n\npublic class stack {\n    private object[] elements=new object[10];\n    private int size = 0;\n    public void push(object e){\n    ensurecapacity();\n        elements[size++] = e;\n    }\n    public object pop(){\n        if( size == 0)\n        throw new emptystackexception();\n            return elements[--size];\n        }\n    private void ensurecapacity(){\n        if(elements.length == size){\n            object[] oldelements = elements;\n            elements = new object[2 * elements.length+1];\n            system.arraycopy(oldelements,0, elements, 0, size);     \n        }\n    }\n}\n\n\n上面的原理应该很简单，假如堆栈加了10个元素，然后全部弹出来，虽然堆栈是空的，没有我们要的东西，但是这是个对象是无法回收的，这个才符合了内存泄露的两个条件：无用，无法回收。 但是就是存在这样的东西也不一定会导致什么样的后果，如果这个堆栈用的比较少，也就浪费了几个k内存而已，反正我们的内存都上g了，哪里会有什么影响，再说这个东西很快就会被回收的，有什么关系。\n\n例：\n\npublic class bad{\n    public static stack s=stack();\n    static{\n        s.push(new object());\n        s.pop(); //这里有一个对象发生内存泄露\n        s.push(new object()); //上面的对象可以被回收了，等于是自愈了\n    }\n}\n\n\n因为是static，就一直存在到程序退出，但是我们也可以看到它有自愈功能，就是说如果你的stack最多有100个对象，那么最多也就只有100个对象无法被回收其实这个应该很容易理解，stack内部持有100个引用，最坏的情况就是他们都是无用的，因为我们一旦放新的进取，以前的引用自然消失！\n\n内存泄露的另外一种情况：当一个对象被存储进hashset集合中以后，就不能修改这个对象中的那些参与计算哈希值的字段了，否则，对象修改后的哈希值与最初存储进hashset集合中时的哈希值就不同了，在这种情况下，即使在contains方法使用该对象的当前引用作为的参数去hashset集合中检索对象，也将返回找不到对象的结果，这也会导致无法从hashset集合中单独删除当前对象，造成内存泄露。\n\n\n# 78.能不能自己写个类，也叫java.lang.string？\n\n可以，但在应用的时候，需要用自己的类加载器去加载，否则，系统的类加载器永远只是去加载jre.jar包中的那个java.lang.string。由于在tomcat的web应用程序中，都是由webapp自己的类加载器先自己加载web-inf/classess目录中的类，然后才委托上级的类加载器加载，如果我们在tomcat的web应用程序中写一个java.lang.string，这时候servlet程序加载的就是我们自己写的java.lang.string，但是这么干就会出很多潜在的问题，原来所有用了java.lang.string类的都将出现问题。\n\n虽然java提供了endorsed技术，可以覆盖jdk中的某些类，具体做法是….。但是，能够被覆盖的类是有限制范围，反正不包括java.lang这样的包中的类。例如，运行下面的程序：\n\npackage java.lang;\npublic class string {\n /**\n  * @param args\n  */\n public static void main(string[] args) {\n  // todo auto-generated method stub\n  system.out.println("string");\n }\n}\n\n\n报告的错误如下： java.lang.nosuchmethoderror: main\n\nexception in thread "main"\n\n这是因为加载了jre自带的java.lang.string，而该类中没有main方法。\n\n\n# 79.获得一个类的类对象有哪些方式？\n\n答：\n\n方法1：类型.class，例如：string.class\n\n方法2：对象.getclass()，例如：”hello”.getclass()\n\n方法3：class.forname()，例如：class.forname(“java.lang.string”)\n\n\n# 80.java代码查错\n\n1）\n\nabstract class name {\n    private string name;\n    public abstract boolean isstupidname(string name) {}\n}\n\n\n这有何错误? 答案: 错。abstract method必须以分号结尾，且不带花括号。\n\n2）\n\npublic class something {\n    void dosomething () {\n        private string s = "";\n        int l = s.length();\n    }\n}\n\n\n有错吗? 答案: 错。局部变量前不能放置任何访问修饰符 (private，public，和protected)。final可以用来修饰局部变量(final如同abstract和strictfp，都是非访问修饰符，strictfp只能修饰class和method而非variable)。\n\n3）\n\nabstract class something {\n    private abstract string dosomething ();\n}\n\n\n这好像没什么错吧? 答案: 错。abstract的methods不能以private修饰。abstract的methods就是让子类implement(实现)具体细节的，怎么可以用private把abstract method封锁起来呢? (同理，abstract method前不能加final)。\n\n4）\n\npublic class something {\n    public int addone(final int x) {\n        return ++x;\n    }\n}\n\n\n这个比较明显。 答案: 错。int x被修饰成final，意味着x不能在addone method中被修改。\n\n5）\n\npublic class something {\n    public static void main(string[] args) {\n        other o = new other();\n        new something().addone(o);\n    }\n    public void addone(final other o) {\n        o.i++;\n    }\n}\nclass other {\n    public int i;\n}\n\n\n和上面的很相似，都是关于final的问题，这有错吗? 答案: 正确。在addone method中，参数o被修饰成final。如果在addone method里我们修改了o的reference(比如: o = new other()😉，那么如同上例这题也是错的。但这里修改的是o的member vairable(成员变量)，而o的reference并没有改变。\n\n6）\n\nclass something {\n    int i;\n    public void dosomething() {\n        system.out.println("i = " + i);\n    }\n}\n\n\n有什么错呢? 看不出来啊。 答案: 正确。输出的是"i = 0"。int i属於instant variable (实例变量，或叫成员变量)。instant variable有default value。int的default value是0。\n\n7）\n\nclass something {\n    final int i;\n    public void dosomething() {\n        system.out.println("i = " + i);\n    }\n}\n\n\n和上面一题只有一个地方不同，就是多了一个final。这难道就错了吗? 答案: 错。final int i是个final的instant variable (实例变量，或叫成员变量)。final的instant variable没有default value，必须在constructor (构造器)结束之前被赋予一个明确的值。可以修改为“final int i = 0;”。\n\n8）\n\npublic class something {\n    public static void main(string[] args) {\n        something s = new something();\n        system.out.println("s.dosomething() returns " + dosomething());\n    }\n    public string dosomething() {\n        return "do something ...";\n    }\n}\n\n\n看上去很完美。 答案: 错。看上去在main里call dosomething没有什么问题，毕竟两个methods都在同一个class里。但仔细看，main是static的。static method不能直接call non-static methods。可改成"system.out.println("s.dosomething() returns " + s.dosomething());"。同理，static method不能访问non-static instant variable。\n\n9）\n\n此处，something类的文件名叫otherthing.java\n\nclass something {\n    private static void main(string[] something_to_do) {   \n        system.out.println("do something ...");\n    }\n}\n\n\n这个好像很明显。 答案: 正确。从来没有人说过java的class名字必须和其文件名相同。但public class的名字必须和文件名相同。\n\n10）\n\ninterface a{\n    int x = 0;\n}\nclass b{\n    int x =1;\n}\nclass c extends b implements a {\n    public void px(){\n        system.out.println(x);\n    }\n    public static void main(string[] args) {\n        new c().px();\n    }\n}\n\n\n答案：错误。在编译时会发生错误(错误描述不同的jvm有不同的信息，意思就是未明确的x调用，两个x都匹配（就象在同时import java.util和java.sql两个包时直接声明date一样)。对于父类的变量,可以用super.x来明确，而接口的属性默认隐含为 public static final.所以可以通过a.x来明确。 11）\n\ninterface playable {\n    void play();\n}\ninterface bounceable {\n    void play();\n}\ninterface rollable extends playable, bounceable {\n    ball ball = new ball("pingpang");\n}\nclass ball implements rollable {\n    private string name;\n    public string getname() {\n        return name;\n    }\n    public ball(string name) {\n        this.name = name;   \n    }\n    public void play() {\n        ball = new ball("football");\n        system.out.println(ball.getname());\n    }\n}\n\n\n这个错误不容易发现。 答案: 错。\n\n"interface rollable extends playable, bounceable"没有问题。interface可继承多个interfaces，所以这里没错。问题出在interface rollable里的"ball ball = new ball("pingpang");"。任何在interface里声明的interface variable (接口变量，也可称成员变量)，默认为public static final。也就是说"ball ball = new ball("pingpang");"实际上是"public static final ball ball = new ball("pingpang");"。在ball类的play()方法中，"ball = new ball("football");"改变了ball的reference，而这里的ball来自rollable interface，rollable interface里的ball是public static final的，final的object是不能被改变reference的。\n\n因此编译器将在"ball = new ball("football");"这里显示有错。',charsets:{cjk:!0}},{title:"面向对象设计五大原则",frontmatter:{title:"面向对象设计五大原则",date:"2023-04-07T16:37:20.000Z",permalink:"/pages/43f8ea/"},regularPath:"/02.%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/01.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/01.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E4%BA%94%E5%A4%A7%E5%8E%9F%E5%88%99.html",relativePath:"02.开发笔记/01.架构设计/01.面向对象设计五大原则.md",key:"v-2a5b0312",path:"/pages/43f8ea/",headers:[{level:2,title:"1、单一职责原则(SRP)",slug:"_1、单一职责原则-srp",normalizedTitle:"1、单一职责原则(srp)",charIndex:163},{level:2,title:"2、开放-封闭原则(OCP)",slug:"_2、开放-封闭原则-ocp",normalizedTitle:"2、开放-封闭原则(ocp)",charIndex:535},{level:2,title:"3、依赖倒转原则(DIP)",slug:"_3、依赖倒转原则-dip",normalizedTitle:"3、依赖倒转原则(dip)",charIndex:1158},{level:2,title:"4、接口隔离原则",slug:"_4、接口隔离原则",normalizedTitle:"4、接口隔离原则",charIndex:1633},{level:2,title:"5、Liskov（里氏）替换原则(LSP)",slug:"_5、liskov-里氏-替换原则-lsp",normalizedTitle:"5、liskov（里氏）替换原则(lsp)",charIndex:2054},{level:2,title:"补充：迪米特法则(LoD)",slug:"补充-迪米特法则-lod",normalizedTitle:"补充：迪米特法则(lod)",charIndex:2368}],headersStr:"1、单一职责原则(SRP) 2、开放-封闭原则(OCP) 3、依赖倒转原则(DIP) 4、接口隔离原则 5、Liskov（里氏）替换原则(LSP) 补充：迪米特法则(LoD)",content:"“宇宙万物之中,没有一样东西能像思想那么顽固。” 一爱默生\n\n首先明确模式是针对面向对象的，它的三大特性，封装、继承、多态。\n\n面向对象设计模式有5大基本原则：单一职责原则、开发封闭原则、依赖倒置原则、接口隔离原则、Liskov替换原则。\n\n而设计模式都是在面向对象的特性以及5大基本原则的基础上衍生而来的具体实现。\n\n\n# 1、单一职责原则(SRP)\n\n1.1，SRP(Single Responsibilities Principle)的定义：就一个类而言，应该仅有一个引起它变化的原因。简而言之，就是功能要单一。 　　1.2，如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其它职责的能力。这种耦合会导致脆弱的设计，当变化发生时，设计会遭受到意想不到的破坏。(敏捷软件开发) 　　1.3，软件设计真正要做的许多内容，就是发现职责并把那些职责相互分离。(敏捷软件开发)\n\n小结：\n\n单一职责原则可以看做是低耦合、高内聚在面向对象原则上的引申，将职责定义为引起变化的原因，以提高内聚性来减少引起变化的原因。职责过多，可能引起它变化的原因就越多，这样导致职责依赖，相互之间就会产生原因，大大损伤其内聚性和耦合度。\n\n\n# 2、开放-封闭原则(OCP)\n\n2.1，OCP(Open-Close Principle)的定义：就是说软件实体(类，方法等等)应该可以扩展，但是不能修改。它是软件设计中也是最重要的一种设计原则。 　　2.2，OCP的两个特征： 　　　　2.2.1> 对于扩展是开放的。 　　　　2.2.2> 对于修改是封闭的。\n\n2.3，什么时候应用OCP原则呢？ 　　　　在我们最初编写代码时，假设变化不会发生，当变化发生时，我们就创建抽象(比如抽象类，接口等等)来隔离以后发生的同类变化。 　　2.4，开放-封闭原则是面向对象设计的核心所在。遵循这个原则可以带来面向对象技术所声称的巨大好处，也就是可维护，可扩展，可复用，灵活性好。开发人员应该仅对程序中呈现出频繁变化的那些部分做出抽象，然而，对于应用程序中的每个部分都刻意地进行抽象同样不是一个好主意。拒绝不成熟的抽象和抽象本身一样重要。 　　2.5，OCP的UML图：\n\n小结：\n\n开放封闭原则是面向对象设计的核心所在。遵循这个原则可以带来面向对象技术所声称的巨大好处：可维护、可扩展、可复用、灵活性好。开发人员应该仅对程序中呈现频繁变化的那些部分做出抽象，然而，对于应用程序中的每个部分都刻意地进行抽象同样也不是一个好主意。拒绝不成熟的抽象和抽象本身一样重要。“需求总是变化”没有不变的软件，所以需要用开放封闭原则来封闭变化满足需求，同时还能保持软件内部的封装体系稳定，不被需求的变化影响。\n\n\n# 3、依赖倒转原则(DIP)\n\n3.1，DIP(Dependence Inversion Principle)的定义：抽象不应该依赖细节，细节应该依赖于抽象。简单说就是，我们要针对接口编程，而不要针对实现编程。\n\n       3.1. 1 高层模块不应该依赖低层模块。两个都应该依赖抽象。\n\n       3.1.2 抽象不应该依赖具体（细节）。具体（细节）应该依赖抽象。\n\n\n3.2、反面例子UML图：\n\n缺点：高层模块太依赖低层模块，耦合太紧密。低层模块发生变化会影响到高层模块。 　　解决方法：利用依赖倒置原则使高层模块和低层模块都依赖于抽象(接口或抽象类)。 　　3.3、修改后的UML图如下： 　　 　　优点：这样的话修改低层模块不会影响到高层模块，减小了它们之间的耦合度，增强系统的稳定性。\n\n小结：\n\n依赖倒置原则其实可以说是面向对象设计的标志，用哪种语言来编写程序不重要，如果编写时考虑的都是如何针对抽象编程而不是针对细节编程，即程序中所有的依赖关系都是终止于抽象类或者接口，那就是面向对象的设计，反之那就是过程化的设计了。\n\n\n# 4、接口隔离原则\n\n使用多个专门的接口比使用单一的总接口要好。\n\n一个类对另外一个类的依赖性应当是建立在最小的接口上的。\n\n一个接口代表一个角色，不应当将不同的角色都交给一个接口。没有关系的接口合并在一起，形成一个臃肿的大接口，这是对角色和接口的污染。\n\n“不应该强迫客户依赖于它们不用的方法。接口属于客户，不属于它所在的类层次结构。”这个说得很明白了，再通俗点说，不要强迫客户使用它们不用的方法，如果强迫用户使用它们不使用的方法，那么这些客户就会面临由于这些不使用的方法的改变所带来的改变。\n\n小结\n\n接口隔离的方法有两种（分享客户就是分离接口）： 1、使用委托（此委托非.net委托[delegate]）分离接口 使用委托即，创建一个委托类，用此类去实现分离后的其它接口中的方法。 2、使用多重继承分离接口、 此方法，即将现有“胖”接口分成供不同客户程序调用的两个或多个接口，而需要实现多个接口的客户程序，则使用多重继承来实现。\n\n\n# 5、Liskov（里氏）替换原则(LSP)\n\n5.1，LSP(Liskov Substitution Principle)的定义：子类型必须能够替换掉它们的父类型。简单地说，这是因为子类型继承了父类，所以子类可以以父类的身份出现。\n\n实例UML图：\n\n小结：\n\n任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。\n\n\n# 补充：迪米特法则(LoD)\n\n 自从我们接触编程开始，就知道了软件编程的总的原则：低耦合，高内聚。无论是面向过程编程还是面向对象编程，只有使各个模块之间的耦合尽量的低，才能提高代码的复用率。低耦合的优点不言而喻，但是怎么样编程才能做到低耦合呢？那正是迪米特法则要去完成的。\n\n\n迪米特法则又叫最少知道原则，最早是在1987年由美国Northeastern University的Ian Holland提出。通俗的来讲，就是一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类来说，无论逻辑多么复杂，都尽量地的将逻辑封装在类的内部，对外除了提供的public方法，不对外泄漏任何信息。迪米特法则还有一个更简单的定义：只与直接的朋友通信。首先来解释一下什么是直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖、关联、组合、聚合等。其中，我们称出现成员变量、方法参数、方法返回值中的类为直接的朋友，而出现在局部变量中的类则不是直接的朋友。也就是说，陌生的类最好不要作为局部变量的形式出现在类的内部。\n\n1，LoD(Law of Demeter)的定义：如果两个类不必彼此直接通信，那么这两个类就不应当直接的相互作用。如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。\n\n2，在类的结构设计上，每一个类都应当尽量降低成员的访问权限，也就是说，一个类包装好自己的private状态，不需要让别的类知道的字段或行为(方法)就尽量不要公开。\n\n定义：一个对象应该对其他对象保持最少的了解。\n\n问题由来：类与类之间的关系越密切，耦合度越大，当一个类发生改变时，对另一个类的影响也越大。\n\n解决方案：尽量降低类与类之间的耦合。\n\n举例：有一个集团公司，下属单位有分公司和直属部门，现在要求打印出所有下属单位的员工ID。先来看一下违反迪米特法则的设计。\n\n现在这个设计的主要问题出在CompanyManager中，根据迪米特法则，只与直接的朋友发生通信，而SubEmployee类并不是CompanyManager类的直接朋友（以局部变量出现的耦合不属于直接朋友），从逻辑上讲总公司只与他的分公司耦合就行了，与分公司的员工并没有任何联系，这样设计显然是增加了不必要的耦合。按照迪米特法则，应该避免类中出现这样非直接朋友关系的耦合。\n\n修改后，为分公司增加了打印人员ID的方法，总公司直接调用来打印，从而避免了与分公司的员工发生耦合。\n\n小结：\n\n迪米特法则的初衷是降低类之间的耦合，由于每个类都减少了不必要的依赖，因此的确可以降低耦合关系。但是凡事都有度，虽然可以避免与非直接的类通信，但是要通信，必然会通过一个“中介”来发生联系，例如本例中，总公司就是通过分公司这个“中介”来与分公司的员工发生联系的。过分的使用迪米特原则，会产生大量这样的中介和传递类，导致系统复杂度变大。所以在采用迪米特法则时要反复权衡，既做到结构清晰，又要高内聚低耦合。",normalizedContent:"“宇宙万物之中,没有一样东西能像思想那么顽固。” 一爱默生\n\n首先明确模式是针对面向对象的，它的三大特性，封装、继承、多态。\n\n面向对象设计模式有5大基本原则：单一职责原则、开发封闭原则、依赖倒置原则、接口隔离原则、liskov替换原则。\n\n而设计模式都是在面向对象的特性以及5大基本原则的基础上衍生而来的具体实现。\n\n\n# 1、单一职责原则(srp)\n\n1.1，srp(single responsibilities principle)的定义：就一个类而言，应该仅有一个引起它变化的原因。简而言之，就是功能要单一。 　　1.2，如果一个类承担的职责过多，就等于把这些职责耦合在一起，一个职责的变化可能会削弱或者抑制这个类完成其它职责的能力。这种耦合会导致脆弱的设计，当变化发生时，设计会遭受到意想不到的破坏。(敏捷软件开发) 　　1.3，软件设计真正要做的许多内容，就是发现职责并把那些职责相互分离。(敏捷软件开发)\n\n小结：\n\n单一职责原则可以看做是低耦合、高内聚在面向对象原则上的引申，将职责定义为引起变化的原因，以提高内聚性来减少引起变化的原因。职责过多，可能引起它变化的原因就越多，这样导致职责依赖，相互之间就会产生原因，大大损伤其内聚性和耦合度。\n\n\n# 2、开放-封闭原则(ocp)\n\n2.1，ocp(open-close principle)的定义：就是说软件实体(类，方法等等)应该可以扩展，但是不能修改。它是软件设计中也是最重要的一种设计原则。 　　2.2，ocp的两个特征： 　　　　2.2.1> 对于扩展是开放的。 　　　　2.2.2> 对于修改是封闭的。\n\n2.3，什么时候应用ocp原则呢？ 　　　　在我们最初编写代码时，假设变化不会发生，当变化发生时，我们就创建抽象(比如抽象类，接口等等)来隔离以后发生的同类变化。 　　2.4，开放-封闭原则是面向对象设计的核心所在。遵循这个原则可以带来面向对象技术所声称的巨大好处，也就是可维护，可扩展，可复用，灵活性好。开发人员应该仅对程序中呈现出频繁变化的那些部分做出抽象，然而，对于应用程序中的每个部分都刻意地进行抽象同样不是一个好主意。拒绝不成熟的抽象和抽象本身一样重要。 　　2.5，ocp的uml图：\n\n小结：\n\n开放封闭原则是面向对象设计的核心所在。遵循这个原则可以带来面向对象技术所声称的巨大好处：可维护、可扩展、可复用、灵活性好。开发人员应该仅对程序中呈现频繁变化的那些部分做出抽象，然而，对于应用程序中的每个部分都刻意地进行抽象同样也不是一个好主意。拒绝不成熟的抽象和抽象本身一样重要。“需求总是变化”没有不变的软件，所以需要用开放封闭原则来封闭变化满足需求，同时还能保持软件内部的封装体系稳定，不被需求的变化影响。\n\n\n# 3、依赖倒转原则(dip)\n\n3.1，dip(dependence inversion principle)的定义：抽象不应该依赖细节，细节应该依赖于抽象。简单说就是，我们要针对接口编程，而不要针对实现编程。\n\n       3.1. 1 高层模块不应该依赖低层模块。两个都应该依赖抽象。\n\n       3.1.2 抽象不应该依赖具体（细节）。具体（细节）应该依赖抽象。\n\n\n3.2、反面例子uml图：\n\n缺点：高层模块太依赖低层模块，耦合太紧密。低层模块发生变化会影响到高层模块。 　　解决方法：利用依赖倒置原则使高层模块和低层模块都依赖于抽象(接口或抽象类)。 　　3.3、修改后的uml图如下： 　　 　　优点：这样的话修改低层模块不会影响到高层模块，减小了它们之间的耦合度，增强系统的稳定性。\n\n小结：\n\n依赖倒置原则其实可以说是面向对象设计的标志，用哪种语言来编写程序不重要，如果编写时考虑的都是如何针对抽象编程而不是针对细节编程，即程序中所有的依赖关系都是终止于抽象类或者接口，那就是面向对象的设计，反之那就是过程化的设计了。\n\n\n# 4、接口隔离原则\n\n使用多个专门的接口比使用单一的总接口要好。\n\n一个类对另外一个类的依赖性应当是建立在最小的接口上的。\n\n一个接口代表一个角色，不应当将不同的角色都交给一个接口。没有关系的接口合并在一起，形成一个臃肿的大接口，这是对角色和接口的污染。\n\n“不应该强迫客户依赖于它们不用的方法。接口属于客户，不属于它所在的类层次结构。”这个说得很明白了，再通俗点说，不要强迫客户使用它们不用的方法，如果强迫用户使用它们不使用的方法，那么这些客户就会面临由于这些不使用的方法的改变所带来的改变。\n\n小结\n\n接口隔离的方法有两种（分享客户就是分离接口）： 1、使用委托（此委托非.net委托[delegate]）分离接口 使用委托即，创建一个委托类，用此类去实现分离后的其它接口中的方法。 2、使用多重继承分离接口、 此方法，即将现有“胖”接口分成供不同客户程序调用的两个或多个接口，而需要实现多个接口的客户程序，则使用多重继承来实现。\n\n\n# 5、liskov（里氏）替换原则(lsp)\n\n5.1，lsp(liskov substitution principle)的定义：子类型必须能够替换掉它们的父类型。简单地说，这是因为子类型继承了父类，所以子类可以以父类的身份出现。\n\n实例uml图：\n\n小结：\n\n任何基类可以出现的地方，子类一定可以出现。 lsp是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。\n\n\n# 补充：迪米特法则(lod)\n\n 自从我们接触编程开始，就知道了软件编程的总的原则：低耦合，高内聚。无论是面向过程编程还是面向对象编程，只有使各个模块之间的耦合尽量的低，才能提高代码的复用率。低耦合的优点不言而喻，但是怎么样编程才能做到低耦合呢？那正是迪米特法则要去完成的。\n\n\n迪米特法则又叫最少知道原则，最早是在1987年由美国northeastern university的ian holland提出。通俗的来讲，就是一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类来说，无论逻辑多么复杂，都尽量地的将逻辑封装在类的内部，对外除了提供的public方法，不对外泄漏任何信息。迪米特法则还有一个更简单的定义：只与直接的朋友通信。首先来解释一下什么是直接的朋友：每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式很多，依赖、关联、组合、聚合等。其中，我们称出现成员变量、方法参数、方法返回值中的类为直接的朋友，而出现在局部变量中的类则不是直接的朋友。也就是说，陌生的类最好不要作为局部变量的形式出现在类的内部。\n\n1，lod(law of demeter)的定义：如果两个类不必彼此直接通信，那么这两个类就不应当直接的相互作用。如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。\n\n2，在类的结构设计上，每一个类都应当尽量降低成员的访问权限，也就是说，一个类包装好自己的private状态，不需要让别的类知道的字段或行为(方法)就尽量不要公开。\n\n定义：一个对象应该对其他对象保持最少的了解。\n\n问题由来：类与类之间的关系越密切，耦合度越大，当一个类发生改变时，对另一个类的影响也越大。\n\n解决方案：尽量降低类与类之间的耦合。\n\n举例：有一个集团公司，下属单位有分公司和直属部门，现在要求打印出所有下属单位的员工id。先来看一下违反迪米特法则的设计。\n\n现在这个设计的主要问题出在companymanager中，根据迪米特法则，只与直接的朋友发生通信，而subemployee类并不是companymanager类的直接朋友（以局部变量出现的耦合不属于直接朋友），从逻辑上讲总公司只与他的分公司耦合就行了，与分公司的员工并没有任何联系，这样设计显然是增加了不必要的耦合。按照迪米特法则，应该避免类中出现这样非直接朋友关系的耦合。\n\n修改后，为分公司增加了打印人员id的方法，总公司直接调用来打印，从而避免了与分公司的员工发生耦合。\n\n小结：\n\n迪米特法则的初衷是降低类之间的耦合，由于每个类都减少了不必要的依赖，因此的确可以降低耦合关系。但是凡事都有度，虽然可以避免与非直接的类通信，但是要通信，必然会通过一个“中介”来发生联系，例如本例中，总公司就是通过分公司这个“中介”来与分公司的员工发生联系的。过分的使用迪米特原则，会产生大量这样的中介和传递类，导致系统复杂度变大。所以在采用迪米特法则时要反复权衡，既做到结构清晰，又要高内聚低耦合。",charsets:{cjk:!0}},{title:"java常见中间件笔记",frontmatter:{title:"java常见中间件笔记",date:"2023-03-31T10:20:38.000Z",permalink:"/pages/Notes/java/001/"},regularPath:"/02.%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/02.Java/01.Java%E5%B8%B8%E7%94%A8%E4%B8%AD%E9%97%B4%E4%BB%B6.html",relativePath:"02.开发笔记/02.Java/01.Java常用中间件.md",key:"v-32ff3e21",path:"/pages/Notes/java/001/",headers:[{level:2,title:"tomcat",slug:"tomcat",normalizedTitle:"tomcat",charIndex:0},{level:2,title:"JBOSS等",slug:"jboss等",normalizedTitle:"jboss等",charIndex:599},{level:2,title:"中间件的概念",slug:"中间件的概念",normalizedTitle:"中间件的概念",charIndex:853},{level:2,title:"远程过程调用和对象访问中间件",slug:"远程过程调用和对象访问中间件",normalizedTitle:"远程过程调用和对象访问中间件",charIndex:1118},{level:2,title:"数据访问中间件",slug:"数据访问中间件",normalizedTitle:"数据访问中间件",charIndex:1331}],headersStr:"tomcat JBOSS等 中间件的概念 远程过程调用和对象访问中间件 数据访问中间件",content:"tomcat Weblogic JBOSS Coldfusion Websphere GlassFish\n\n一般本地开发的话建议使用tomcat。\n\nlinux系统建议使用jetty或apache hpptd\n\n大型的项目就用JBOSS或webloigc\n\n小项目，或者是个人开发tomcat 大项目或者商业项目一般采用：weblgoic/webshere 其他的还有jboss、glasshfish等 一些示例项目或者小项目常采用jetty tomcat , jboss, weblogic, websphere 一般项目tomcat就可以了\n\n\n# tomcat\n\nTomcat是Sun的JSWDK(JavaServer Web Development Kit)中Servlet的运行环境(servlet容器)。Tomcat是Apache Jakarta软件组织的一个子项目，Tomcat是一个JSP/Servlet容器，它是在SUN公司的JSWDK（Java Server Web Development Kit）基础上发展起来的一个JSP和Servlet规范的标准实现，使用Tomcat可以体验JSP和Servlet的最新规范。经过多年的发展，Tomcat不仅是JSP和Servlet规范的标准实现，而且具备了很多商业Java Servlet容器的特性，并被一些企业用于商业用途。\n\n\n# JBOSS等\n\nJBoss是一个运行EJB的J2EE应用服务器。它是开放源代码的项目，遵循最新的J2EE规范。从JBoss项目开始至今，它已经从一个EJB容器发展成为一个基于的J2EE的一个web 操作系统（operating system for web），它体现了J2EE规范中最新的技术\n\nWebLogic服务器是企业级的应用服务器，支持EJB, 集群以及 ERP（企业资源计划）的连通性 ，开发公司：BEA。\n\nWebSphere产品系列是IBM公司一套典型的电子商务应用开发工具及运行环境\n\n\n# 中间件的概念\n\n * 1.Java中间件的定义\n\n在Java web开发的演进与进化中，我们对于消息系统，数据库，服务化接口的抽象等，涉及数据分离的过程中，在分离过程中，就会涉及到分离后系统间，数据库间的交互。java中间件就是处理我们数据间交互，连接数据分离后两个系统间的通信，中间件不属于任何一个开发项目，就是让我们对应系统间或者数据库间数据流通无感知。有点像Linux下的管道。\n\n * 2.中间件应用的基本领域与代表\n\n上面说到java是数据间的中间件，在java web开发中适用的范围主要应该是下面三个领域：\n\n\n# 远程过程调用和对象访问中间件\n\n主要解决分布式环境下应用的互相访问问题，这也是支撑应用服务化功能的基础； 例如：RPC：Remote Process Call（远程过程调用中间件） 消息中间件：解决应用之间的消息传递、解耦、异步的问题。 例如：ActiveMQ 是Apache出品，最流行的，能力强劲的开源消息总线。ActiveMQ 是一个完全支持JMS1.1和J2EE 1.4规范的 JMS Provider实现。\n\n\n# 数据访问中间件\n\n主要解决应用访问数据库的共性问题的组件 例如：数据访问中间间就是我们使用数据库指定的数据驱动，例如：ODBC JDBC，以 JDBC 为例，数据库本地维护了一个数据访问中间件，我们在访问数据库的时候，配置的地址其实是直接连接到JDBC这个数据访问中间件，如果我们执行查询数据，或者对数据库的操作都是通过JDBC来连接数据库，然后通过JDBC查询完成数据库以后再返回给我们应用程序。作为中间件，查询过程对于我们是不可知的。",normalizedContent:"tomcat weblogic jboss coldfusion websphere glassfish\n\n一般本地开发的话建议使用tomcat。\n\nlinux系统建议使用jetty或apache hpptd\n\n大型的项目就用jboss或webloigc\n\n小项目，或者是个人开发tomcat 大项目或者商业项目一般采用：weblgoic/webshere 其他的还有jboss、glasshfish等 一些示例项目或者小项目常采用jetty tomcat , jboss, weblogic, websphere 一般项目tomcat就可以了\n\n\n# tomcat\n\ntomcat是sun的jswdk(javaserver web development kit)中servlet的运行环境(servlet容器)。tomcat是apache jakarta软件组织的一个子项目，tomcat是一个jsp/servlet容器，它是在sun公司的jswdk（java server web development kit）基础上发展起来的一个jsp和servlet规范的标准实现，使用tomcat可以体验jsp和servlet的最新规范。经过多年的发展，tomcat不仅是jsp和servlet规范的标准实现，而且具备了很多商业java servlet容器的特性，并被一些企业用于商业用途。\n\n\n# jboss等\n\njboss是一个运行ejb的j2ee应用服务器。它是开放源代码的项目，遵循最新的j2ee规范。从jboss项目开始至今，它已经从一个ejb容器发展成为一个基于的j2ee的一个web 操作系统（operating system for web），它体现了j2ee规范中最新的技术\n\nweblogic服务器是企业级的应用服务器，支持ejb, 集群以及 erp（企业资源计划）的连通性 ，开发公司：bea。\n\nwebsphere产品系列是ibm公司一套典型的电子商务应用开发工具及运行环境\n\n\n# 中间件的概念\n\n * 1.java中间件的定义\n\n在java web开发的演进与进化中，我们对于消息系统，数据库，服务化接口的抽象等，涉及数据分离的过程中，在分离过程中，就会涉及到分离后系统间，数据库间的交互。java中间件就是处理我们数据间交互，连接数据分离后两个系统间的通信，中间件不属于任何一个开发项目，就是让我们对应系统间或者数据库间数据流通无感知。有点像linux下的管道。\n\n * 2.中间件应用的基本领域与代表\n\n上面说到java是数据间的中间件，在java web开发中适用的范围主要应该是下面三个领域：\n\n\n# 远程过程调用和对象访问中间件\n\n主要解决分布式环境下应用的互相访问问题，这也是支撑应用服务化功能的基础； 例如：rpc：remote process call（远程过程调用中间件） 消息中间件：解决应用之间的消息传递、解耦、异步的问题。 例如：activemq 是apache出品，最流行的，能力强劲的开源消息总线。activemq 是一个完全支持jms1.1和j2ee 1.4规范的 jms provider实现。\n\n\n# 数据访问中间件\n\n主要解决应用访问数据库的共性问题的组件 例如：数据访问中间间就是我们使用数据库指定的数据驱动，例如：odbc jdbc，以 jdbc 为例，数据库本地维护了一个数据访问中间件，我们在访问数据库的时候，配置的地址其实是直接连接到jdbc这个数据访问中间件，如果我们执行查询数据，或者对数据库的操作都是通过jdbc来连接数据库，然后通过jdbc查询完成数据库以后再返回给我们应用程序。作为中间件，查询过程对于我们是不可知的。",charsets:{cjk:!0}},{title:"java常用工作流框架",frontmatter:{title:"java常用工作流框架",date:"2023-04-13T08:49:38.000Z",permalink:"/pages/Notes/java/002/"},regularPath:"/02.%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/02.Java/02.Java%E5%B8%B8%E7%94%A8%E5%B7%A5%E4%BD%9C%E6%B5%81%E6%A1%86%E6%9E%B6.html",relativePath:"02.开发笔记/02.Java/02.Java常用工作流框架.md",key:"v-5ca9ee02",path:"/pages/Notes/java/002/",headers:[{level:3,title:"什么是工作流(Worklow)",slug:"什么是工作流-worklow",normalizedTitle:"什么是工作流(worklow)",charIndex:14},{level:3,title:"工作流应用场景",slug:"工作流应用场景",normalizedTitle:"工作流应用场景",charIndex:222},{level:3,title:"工作流实现方式目前常见的工作流程有两种方式",slug:"工作流实现方式目前常见的工作流程有两种方式",normalizedTitle:"工作流实现方式目前常见的工作流程有两种方式",charIndex:461},{level:3,title:"有哪些工作流框架?",slug:"有哪些工作流框架",normalizedTitle:"有哪些工作流框架?",charIndex:546},{level:4,title:"1.Activiti",slug:"_1-activiti",normalizedTitle:"1.activiti",charIndex:648},{level:4,title:"2.Flowable",slug:"_2-flowable",normalizedTitle:"2.flowable",charIndex:1239},{level:4,title:"3.Camunda",slug:"_3-camunda",normalizedTitle:"3.camunda",charIndex:1683},{level:4,title:"4.jBPM",slug:"_4-jbpm",normalizedTitle:"4.jbpm",charIndex:1917},{level:4,title:"5.JFlow",slug:"_5-jflow",normalizedTitle:"5.jflow",charIndex:2230},{level:4,title:"6.osworkflow",slug:"_6-osworkflow",normalizedTitle:"6.osworkflow",charIndex:2495}],headersStr:"什么是工作流(Worklow) 工作流应用场景 工作流实现方式目前常见的工作流程有两种方式 有哪些工作流框架? 1.Activiti 2.Flowable 3.Camunda 4.jBPM 5.JFlow 6.osworkflow",content:"> 本文收集自网络\n\n\n# 什么是工作流(Worklow)\n\n工作流是对工作流程及其各操作步骤之间业务规则的抽象、概括描述。工作流建模，即将工作流程中的工作如前后组织在一起的逻辑和规则，在计算机中以恰当的模型表逢并对其实施计算。工作流要解决的主要问题是: 为实现某个业务目标，利用计算机在多个参与者之间按某种预定规则自动传递文档、信息或者任务。\n\n那么再简单点说，我认为工作流就是对业务的流程化抽象,WFMC给出了工作流参考模型如下:\n\n\n# 工作流应用场景\n\n具体场景，凡是涉及到业务流程的所有场景\n\n * 关键业务流程:订单、报价处理、合同审核、客户电话处理、供应链管理等。行政管理类:出差申请、加班申请、请假申请、用车申请、各种办公用品申请、购买申请、日报周报等凡是原来手工流转处理的行政表单。。人事管理类:员工培训安排、绩效考评、职位变动处理、员工档案信息管理等。财务相关类:付款请求、应收款处理、日常报销处理、出差报销、预算和计划申请等.。客户服务类:客户信息管理、客户投诉、请求处理、售后服务管理等。\n\n\n# 工作流实现方式目前常见的工作流程有两种方式\n\n * 通过状态字段实现流程控制。原始，适合简单流程控制。\n * 工作流引擎实现流程控制。适用场景更广泛，扩展性更好\n\n\n# 有哪些工作流框架?\n\n目前市面上主流的开源流程引擎主要有 Activiti、Flowable,CamundajBPM,jflow, oworkflow等。现在我们对这些开源流程框架进行调研和分析。\n\n# 1.Activiti\n\nActiviti 由 Alfresco 公司开发，目前最高版本为 Activiti cloud 71.0\n\n其中 activiti5 和 activiti6 的核心 leader 是 Tijs Rademakers，由于团队内部分歧，2017 年 Tijs Rademakers 离开团队，创建了后来的 Flowable。activiti6 以及 activiti5 代码则交接给 Salabov 团队维护，activiti6 以及 activiti5 的代码官方已经暂停维护。往后 Salaboy 团开发了 activiti7 框架，ativiti7 内核使用的还是 activiti6，并没有为引擎注入更多的新特性，只是在 Activiti 之外的上层封装了些应用。\n\n直到 Activiti cloud710版本，Activiti coud 将系统分为 Runtime Bundle、 Audit Service Query Service、 CloudConnectors、Application Service、 Notification Service。这些工作的主要目的其实就是为了上云，减少对 Activiti 依赖的糖合，需要使用Activiti的系统只需要通过调用 http 接口的方式来实现工作流能力的整合，将工作流业务托管上云\n\n# 2.Flowable\n\nFlowable是基于activiti6 衍生出来的版本，目前最新版本是v6.7.0\n\n开发团队是从Activiti 中分裂出来的，修复了一众activiti6 的 bug，并在其基础上实现了 DMN 支持，BPEL 支持等。\n\n相对开源版，其商业版的功能会更强大。Flowable 是一个使用Java 编写的轻量级业务流程引擎，使用 Apache V2 license 协议开源。2016年10月，Activiti工作流擎的主要开发者离开 Alfresco 公司并在 Activiti分支基础上开启了 Flowable 开源项目。Flowable 项目中包括 BPMN (Business Process Model and Notation)引擎CMMN (Case Management Modeland Notation)引擎、DMN (Decision Model and Notation) 引擎和表单引擎 (Form Engine) 等模块。\n\n# 3.Camunda\n\nCamunda 基于activiti5，所以其保留了 PVM，最新版本Camunda7.17，开发团队也是从activiti 中分裂出来的，发展轨与Flowable 相似。\n\n通过压力测试验证 Camunda BPMN 引擎性能和稳定性更好。功能比较完善，除了BPMN，Camunda 还支持 CMMN(案例管理)和 DMN (决策自动化)。Camunda 不仅带有引擎，还带有非常强大的工具[6]，用于建模、任务管理、操作监控和用户管理\n\n# 4.jBPM\n\nBPM 由JBoss 公司开发，目前最高版本 7.61.0.Final，不过从BPM5开始已经限之前不是同一个产品了，BPM5 的代码基础不是jBPM4，而是从 Drools Flow 重新开始，基于 Drools Flow 技术在国内市场上用的很少,jBPM4 诞生的比较早，后来jBPM4创建者 Tom Baeyens 离开JBoss 后，加入 Alfresco 后很快推出了新的基于jBPM4 的开源工作流系统 Activiti，另外jBPM 以Hibernate 作为数据持久化 ORM，而 Hibernate 也已不是主流技术mikechen的互联网架松首页架构视频技术文章面试题库问答社区。\n\n# 5.JFlow\n\nJflow是一个国产的开源工作流引擎，与业务场景结合紧密，再带表单引擎，数据表较多，中文概念较多，可配置型性强，支持作为中间件模式的集成。配置点集中在，节点属性，流程属性，方向条件。概念名词比较清晰，文档全面。有qq群技术支持。\n\n流程设计器界面干净，从节点类型分类，分流，合流，分合流，子线程等等。表单与流程完美结合，与其它几款流程引擎设计理念不同。Jflow更适用，贴近用户操作。\n\n表单引擎中的精华是审核组件，满足国内审批要求的需求，退回，分合流审核，会签，并行处理，队列处理，概念清晰，容易理解。\n\n# 6.osworkflow\n\n是一个轻量化的流程引擎，基于状态机机制，数据库表很少，osworkflow 提供的工作流构成元素有: 步骤(step) 、条件(conditions) 、循环(loops) 、分支(spilts) 、合并 joins)等，但不支持会签、跳转、退回、加签等这些操作，需要自己扩展开发，有一定难度。如果流程比较简单，osworkflow 是很好的选择",normalizedContent:"> 本文收集自网络\n\n\n# 什么是工作流(worklow)\n\n工作流是对工作流程及其各操作步骤之间业务规则的抽象、概括描述。工作流建模，即将工作流程中的工作如前后组织在一起的逻辑和规则，在计算机中以恰当的模型表逢并对其实施计算。工作流要解决的主要问题是: 为实现某个业务目标，利用计算机在多个参与者之间按某种预定规则自动传递文档、信息或者任务。\n\n那么再简单点说，我认为工作流就是对业务的流程化抽象,wfmc给出了工作流参考模型如下:\n\n\n# 工作流应用场景\n\n具体场景，凡是涉及到业务流程的所有场景\n\n * 关键业务流程:订单、报价处理、合同审核、客户电话处理、供应链管理等。行政管理类:出差申请、加班申请、请假申请、用车申请、各种办公用品申请、购买申请、日报周报等凡是原来手工流转处理的行政表单。。人事管理类:员工培训安排、绩效考评、职位变动处理、员工档案信息管理等。财务相关类:付款请求、应收款处理、日常报销处理、出差报销、预算和计划申请等.。客户服务类:客户信息管理、客户投诉、请求处理、售后服务管理等。\n\n\n# 工作流实现方式目前常见的工作流程有两种方式\n\n * 通过状态字段实现流程控制。原始，适合简单流程控制。\n * 工作流引擎实现流程控制。适用场景更广泛，扩展性更好\n\n\n# 有哪些工作流框架?\n\n目前市面上主流的开源流程引擎主要有 activiti、flowable,camundajbpm,jflow, oworkflow等。现在我们对这些开源流程框架进行调研和分析。\n\n# 1.activiti\n\nactiviti 由 alfresco 公司开发，目前最高版本为 activiti cloud 71.0\n\n其中 activiti5 和 activiti6 的核心 leader 是 tijs rademakers，由于团队内部分歧，2017 年 tijs rademakers 离开团队，创建了后来的 flowable。activiti6 以及 activiti5 代码则交接给 salabov 团队维护，activiti6 以及 activiti5 的代码官方已经暂停维护。往后 salaboy 团开发了 activiti7 框架，ativiti7 内核使用的还是 activiti6，并没有为引擎注入更多的新特性，只是在 activiti 之外的上层封装了些应用。\n\n直到 activiti cloud710版本，activiti coud 将系统分为 runtime bundle、 audit service query service、 cloudconnectors、application service、 notification service。这些工作的主要目的其实就是为了上云，减少对 activiti 依赖的糖合，需要使用activiti的系统只需要通过调用 http 接口的方式来实现工作流能力的整合，将工作流业务托管上云\n\n# 2.flowable\n\nflowable是基于activiti6 衍生出来的版本，目前最新版本是v6.7.0\n\n开发团队是从activiti 中分裂出来的，修复了一众activiti6 的 bug，并在其基础上实现了 dmn 支持，bpel 支持等。\n\n相对开源版，其商业版的功能会更强大。flowable 是一个使用java 编写的轻量级业务流程引擎，使用 apache v2 license 协议开源。2016年10月，activiti工作流擎的主要开发者离开 alfresco 公司并在 activiti分支基础上开启了 flowable 开源项目。flowable 项目中包括 bpmn (business process model and notation)引擎cmmn (case management modeland notation)引擎、dmn (decision model and notation) 引擎和表单引擎 (form engine) 等模块。\n\n# 3.camunda\n\ncamunda 基于activiti5，所以其保留了 pvm，最新版本camunda7.17，开发团队也是从activiti 中分裂出来的，发展轨与flowable 相似。\n\n通过压力测试验证 camunda bpmn 引擎性能和稳定性更好。功能比较完善，除了bpmn，camunda 还支持 cmmn(案例管理)和 dmn (决策自动化)。camunda 不仅带有引擎，还带有非常强大的工具[6]，用于建模、任务管理、操作监控和用户管理\n\n# 4.jbpm\n\nbpm 由jboss 公司开发，目前最高版本 7.61.0.final，不过从bpm5开始已经限之前不是同一个产品了，bpm5 的代码基础不是jbpm4，而是从 drools flow 重新开始，基于 drools flow 技术在国内市场上用的很少,jbpm4 诞生的比较早，后来jbpm4创建者 tom baeyens 离开jboss 后，加入 alfresco 后很快推出了新的基于jbpm4 的开源工作流系统 activiti，另外jbpm 以hibernate 作为数据持久化 orm，而 hibernate 也已不是主流技术mikechen的互联网架松首页架构视频技术文章面试题库问答社区。\n\n# 5.jflow\n\njflow是一个国产的开源工作流引擎，与业务场景结合紧密，再带表单引擎，数据表较多，中文概念较多，可配置型性强，支持作为中间件模式的集成。配置点集中在，节点属性，流程属性，方向条件。概念名词比较清晰，文档全面。有qq群技术支持。\n\n流程设计器界面干净，从节点类型分类，分流，合流，分合流，子线程等等。表单与流程完美结合，与其它几款流程引擎设计理念不同。jflow更适用，贴近用户操作。\n\n表单引擎中的精华是审核组件，满足国内审批要求的需求，退回，分合流审核，会签，并行处理，队列处理，概念清晰，容易理解。\n\n# 6.osworkflow\n\n是一个轻量化的流程引擎，基于状态机机制，数据库表很少，osworkflow 提供的工作流构成元素有: 步骤(step) 、条件(conditions) 、循环(loops) 、分支(spilts) 、合并 joins)等，但不支持会签、跳转、退回、加签等这些操作，需要自己扩展开发，有一定难度。如果流程比较简单，osworkflow 是很好的选择",charsets:{cjk:!0}},{title:"微服务常用组件",frontmatter:{title:"微服务常用组件",date:"2023-04-07T17:43:51.000Z",permalink:"/pages/e08693/"},regularPath:"/02.%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/01.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/02.%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6.html",relativePath:"02.开发笔记/01.架构设计/02.微服务常用组件.md",key:"v-1098946a",path:"/pages/e08693/",headers:[{level:2,title:"一、常见的API网关",slug:"一、常见的api网关",normalizedTitle:"一、常见的api网关",charIndex:2},{level:3,title:"1.1、Nginx",slug:"_1-1、nginx",normalizedTitle:"1.1、nginx",charIndex:17},{level:3,title:"1.2、Zuul",slug:"_1-2、zuul",normalizedTitle:"1.2、zuul",charIndex:241},{level:3,title:"1.3、SpringCloud Gateway",slug:"_1-3、springcloud-gateway",normalizedTitle:"1.3、springcloud gateway",charIndex:599},{level:3,title:"1.4、Kong",slug:"_1-4、kong",normalizedTitle:"1.4、kong",charIndex:991},{level:3,title:"1.5、Traefik",slug:"_1-5、traefik",normalizedTitle:"1.5、traefik",charIndex:1524},{level:3,title:"1.6、OpenResty",slug:"_1-6、openresty",normalizedTitle:"1.6、openresty",charIndex:1708},{level:2,title:"二、常见的注册中心",slug:"二、常见的注册中心",normalizedTitle:"二、常见的注册中心",charIndex:1845},{level:3,title:"2.1、Eureka",slug:"_2-1、eureka",normalizedTitle:"2.1、eureka",charIndex:1954},{level:3,title:"2.2、Zookeeper",slug:"_2-2、zookeeper",normalizedTitle:"2.2、zookeeper",charIndex:2110},{level:3,title:"2.3、Consul",slug:"_2-3、consul",normalizedTitle:"2.3、consul",charIndex:2337},{level:3,title:"2.4、Nacos",slug:"_2-4、nacos",normalizedTitle:"2.4、nacos",charIndex:2450},{level:2,title:"三、常见的RPC框架",slug:"三、常见的rpc框架",normalizedTitle:"三、常见的rpc框架",charIndex:2760},{level:3,title:"3.1、Dubbo",slug:"_3-1、dubbo",normalizedTitle:"3.1、dubbo",charIndex:2775},{level:3,title:"3.2、Motan",slug:"_3-2、motan",normalizedTitle:"3.2、motan",charIndex:2964},{level:3,title:"3.3、Tars",slug:"_3-3、tars",normalizedTitle:"3.3、tars",charIndex:3195},{level:3,title:"3.4、Spring Cloud",slug:"_3-4、spring-cloud",normalizedTitle:"3.4、spring cloud",charIndex:3537},{level:3,title:"3.5、gRPC",slug:"_3-5、grpc",normalizedTitle:"3.5、grpc",charIndex:3675},{level:3,title:"3.6、Thrift",slug:"_3-6、thrift",normalizedTitle:"3.6、thrift",charIndex:3859}],headersStr:"一、常见的API网关 1.1、Nginx 1.2、Zuul 1.3、SpringCloud Gateway 1.4、Kong 1.5、Traefik 1.6、OpenResty 二、常见的注册中心 2.1、Eureka 2.2、Zookeeper 2.3、Consul 2.4、Nacos 三、常见的RPC框架 3.1、Dubbo 3.2、Motan 3.3、Tars 3.4、Spring Cloud 3.5、gRPC 3.6、Thrift",content:"# 一、常见的API网关\n\n\n# 1.1、Nginx\n\nNginx 是一个高性能的HTTP和反向代理服务器。Nginx一方面可以做反向代理，另外一方面可以做静态资源服务器，接口使用Lua动态语言可以完成灵活的定制功能。\n\nNginx 在启动后，会有一个 Master 进程和多个 Worker 进程，Master 进程和 Worker 进程之间是通过进程间通信进行交互的。Nginx 采用了异步非阻塞的方式来处理请求，也就是说，Nginx 是可以同时处理成千上万个请求的。\n\n\n# 1.2、Zuul\n\nZuul 是 Netflix 开源的一个API网关组件，它可以和 Eureka、Ribbon、Hystrix 等组件配合使用。社区活跃，融合于 SpringCloud 完整生态，是构建微服务体系前置网关服务的最佳选型之一。\n\nZuul 目前有两个大的版本：Zuul1 和 Zuul2\n\nZuul1 是基于 Servlet 框架构建，它采用的是阻塞和多线程方式，即一个线程处理一次连接请求，这种方式在内部延迟严重、设备故障较多情况下会引起存活的连接增多和线程增加的情况发生。\n\nNetflix 发布的 Zuul2 有重大的更新，它运行在异步和无阻塞框架上，每个 CPU 核一个线程，处理所有的请求和响应，请求和响应的生命周期是通过事件和回调来处理的，这种方式减少了线程数量，因此开销较小。\n\n\n# 1.3、SpringCloud Gateway\n\nSpring Cloud Gateway 是Spring Cloud 的一个全新的API网关项目，目的是为了替换掉Zuul1，它基于Spring5.0 + SpringBoot2.0 + WebFlux（基于⾼性能的Reactor模式响应式通信框架Netty，异步⾮阻塞模型）等技术开发，性能⾼于Zuul，官⽅测试，Spring Cloud GateWay是Zuul的1.6倍，旨在为微服务架构提供⼀种简单有效的统⼀的API路由管理⽅式。\n\nSpring Cloud Gateway可以与Spring Cloud Discovery Client（如Eureka）、Ribbon、Hystrix等组件配合使用，实现路由转发、负载均衡、熔断、鉴权、路径重写、⽇志监控等，并且Gateway还内置了限流过滤器，实现了限流的功能。\n\n\n# 1.4、Kong\n\nKong是一款基于OpenResty（Nginx + Lua模块）编写的高可用、易扩展的，由Mashape公司开源的API Gateway项目。Kong是基于NGINX和Apache Cassandra或PostgreSQL构建的，能提供易于使用的RESTful API来操作和配置API管理系统，所以它可以水平扩展多个Kong服务器，通过前置的负载均衡配置把请求均匀地分发到各个Server，来应对大批量的网络请求。\n\nKong主要有三个组件：\n\nKong Server ：基于Nginx的服务器，用来接收API请求。 Apache Cassandra/PostgreSQL ：用来存储操作数据。 Kong dashboard：官方推荐UI管理工具，也可以使用 restfull 方式管理admin api。 Kong采用插件机制进行功能定制，插件集（可以是0或N个）在API请求响应循环的生命周期中被执行。插件使用Lua编写，目前已有几个基础功能：HTTP基本认证、密钥认证、CORS（Cross-Origin Resource Sharing，跨域资源共享）、TCP、UDP、文件日志、API请求限流、请求转发以及Nginx监控。\n\n\n# 1.5、Traefik\n\nTræfɪk 是一个为了让部署微服务更加便捷而诞生的现代HTTP反向代理、负载均衡工具。它支持多种后台 (Docker, Swarm, Kubernetes, Marathon, Mesos, Consul, Etcd, Zookeeper, BoltDB, Rest API, file…) 来自动化、动态的应用它的配置文件设置。\n\n\n# 1.6、OpenResty\n\nOpenResty 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。\n\n\n# 二、常见的注册中心\n\nSpring Cloud支持的多种注册中心Eureka、Consul、Zookeeper、以及阿里巴巴推出Nacos。这些注册中心在本质上都是用来管理服务的注册和发现以及服务状态的检查的\n\n\n# 2.1、Eureka\n\n原生，2.0遇到性能瓶颈，停止维护。\n\nEureka 是 Netflix 出品的用于实现服务注册和发现的工具。 Spring Cloud 集成了 Eureka，并提供了开箱即用的支持。其中， Eureka 又可细分为 Eureka Server 和 Eureka Client。\n\n\n# 2.2、Zookeeper\n\n支持，专业的独立产品。例如：dubbo。\n\nZooKeeper是一种集中式服务，用于维护配置信息、命名、提供分布式同步和提供组服务。分布式应用程序以某种形式使用所有这些类型的服务。每次实现它们时，都需要做大量工作来修复不可避免的bug和竞争条件。由于实现这些类型的服务很困难，应用程序最初通常会忽略它们，这使得它们在发生变化时变得脆弱，难以管理。即使做得正确，这些服务的不同实现也会导致应用程序部署时的管理复杂性。\n\n\n# 2.3、Consul\n\n原生，GO语言开发。\n\nConsul是一个服务网络解决方案，使团队能够管理服务之间以及跨多云环境和运行时的安全网络连接。Consul提供服务发现、基于身份的授权、L7流量管理和服务对服务加密。\n\n\n# 2.4、Nacos\n\n相对于 Spring Cloud Eureka 来说，Nacos 更强大。\n\nNacos /nɑ:kəʊs/ 是 Dynamic Naming and Configuration Service的首字母简称，一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。\n\nNacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。\n\nNacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。\n\n\n# 三、常见的RPC框架\n\n\n# 3.1、Dubbo\n\n国内最早开源的 RPC 框架，由阿里巴巴公司开发并于 2011 年末对外开源，仅支持 Java 语言。后来贡献给了Apache软件基金会。\n\nApache Dubbo 是一款微服务框架，为大规模微服务实践提供高性能 RPC 通信、流量治理、可观测性等解决方案，涵盖 Java、Golang 等多种语言 SDK 实现。最新版本升级到Dubbo3了。\n\n\n# 3.2、Motan\n\n微博内部使用的 RPC 框架，于 2016 年对外开源，仅支持 Java 语言。Motan是一个跨语言远程过程调用（RPC）框架，用于快速开发高性能分布式服务。\n\nMotan生态系统相关项目：\n\nMotan go是golang实现。 MotanPHP是PHP客户端可以直接或通过Motan go代理与Motan服务器交互。 Motan openresty是基于openresty的Lua（Luajit）实现。 Motan 源码托管\n\n\n# 3.3、Tars\n\n腾讯内部使用的 RPC 框架，于 2017 年对外开源，仅支持 C++ 语言。\n\nTARS是一个Linux基金会项目。它是一个基于名称服务和Tars协议的高性能RPC框架，也是一个集成的管理平台，并通过灵活的调度实现了托管服务。\n\nTars，又名TAF（Total Application Framework），自2008年以来一直在腾讯使用。目前它支持C++、Java、Nodejs和PHP。该框架为开发、维护和测试提供了一套解决方案，使开发、部署和测试服务更加高效。它集成了可扩展的编码/解码协议、高性能RPC通信框架、名称服务、监视器、统计和配置。您可以使用它快速开发基于微服务的可靠分布式应用程序，并实现完全高效的服务管理。\n\nTars 源码托管\n\n\n# 3.4、Spring Cloud\n\n国外 Pivotal 公司 2014 年对外开源的 RPC 框架，仅支持 Java 语言。Spring Cloud 利用 Spring Boot 特性整合了开源行业中优秀的组件，整体对外提供了一套在微服务架构中服务治理的解决方案。\n\n\n# 3.5、gRPC\n\nGoogle 于 2015 年对外开源的跨语言 RPC 框架，支持多种语言。\n\ngRPC是一个现代的开源高性能远程过程调用（RPC）框架，可以在任何环境中运行。它可以通过可插拔的负载平衡、跟踪、健康检查和身份验证支持，有效地连接数据中心内和数据中心之间的服务。它也适用于分布式计算的最后一英里，将设备、移动应用程序和浏览器连接到后端服务。\n\n\n# 3.6、Thrift\n\n最初是由 Facebook 开发的内部系统跨语言的 RPC 框架，2007 年贡献给了 Apache 基金，成为 Apache 开源项目之一，支持多种语言。\n\nThrift 是一个软件框架（远程过程调用框架），用来进行可扩展且跨语言的服务的开发。它结合了功能强大的软件堆栈和代码生成引 擎，以构建在 C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, JavaScript, Node.js, Smalltalk, and OCaml 这些编程语言间无缝结合的、高效的服务。\n\nthrift 最初由 facebook 开发，07 年四月开放源码，08 年 5 月进入 apache 孵化器，现在是 Apache 基金会的顶级项目。\n\nthrift 允许你定义一个简单的定义文件中的数据类型和服务接口，以作为输入文件，编译器生成代码用来方便地生成 RPC 客户端和服务器通信的无缝跨编程语言。。\n\n著名的 Key-Value 存储服务器 Cassandra 就是使用 Thrift 作为其客户端 API 的。",normalizedContent:"# 一、常见的api网关\n\n\n# 1.1、nginx\n\nnginx 是一个高性能的http和反向代理服务器。nginx一方面可以做反向代理，另外一方面可以做静态资源服务器，接口使用lua动态语言可以完成灵活的定制功能。\n\nnginx 在启动后，会有一个 master 进程和多个 worker 进程，master 进程和 worker 进程之间是通过进程间通信进行交互的。nginx 采用了异步非阻塞的方式来处理请求，也就是说，nginx 是可以同时处理成千上万个请求的。\n\n\n# 1.2、zuul\n\nzuul 是 netflix 开源的一个api网关组件，它可以和 eureka、ribbon、hystrix 等组件配合使用。社区活跃，融合于 springcloud 完整生态，是构建微服务体系前置网关服务的最佳选型之一。\n\nzuul 目前有两个大的版本：zuul1 和 zuul2\n\nzuul1 是基于 servlet 框架构建，它采用的是阻塞和多线程方式，即一个线程处理一次连接请求，这种方式在内部延迟严重、设备故障较多情况下会引起存活的连接增多和线程增加的情况发生。\n\nnetflix 发布的 zuul2 有重大的更新，它运行在异步和无阻塞框架上，每个 cpu 核一个线程，处理所有的请求和响应，请求和响应的生命周期是通过事件和回调来处理的，这种方式减少了线程数量，因此开销较小。\n\n\n# 1.3、springcloud gateway\n\nspring cloud gateway 是spring cloud 的一个全新的api网关项目，目的是为了替换掉zuul1，它基于spring5.0 + springboot2.0 + webflux（基于⾼性能的reactor模式响应式通信框架netty，异步⾮阻塞模型）等技术开发，性能⾼于zuul，官⽅测试，spring cloud gateway是zuul的1.6倍，旨在为微服务架构提供⼀种简单有效的统⼀的api路由管理⽅式。\n\nspring cloud gateway可以与spring cloud discovery client（如eureka）、ribbon、hystrix等组件配合使用，实现路由转发、负载均衡、熔断、鉴权、路径重写、⽇志监控等，并且gateway还内置了限流过滤器，实现了限流的功能。\n\n\n# 1.4、kong\n\nkong是一款基于openresty（nginx + lua模块）编写的高可用、易扩展的，由mashape公司开源的api gateway项目。kong是基于nginx和apache cassandra或postgresql构建的，能提供易于使用的restful api来操作和配置api管理系统，所以它可以水平扩展多个kong服务器，通过前置的负载均衡配置把请求均匀地分发到各个server，来应对大批量的网络请求。\n\nkong主要有三个组件：\n\nkong server ：基于nginx的服务器，用来接收api请求。 apache cassandra/postgresql ：用来存储操作数据。 kong dashboard：官方推荐ui管理工具，也可以使用 restfull 方式管理admin api。 kong采用插件机制进行功能定制，插件集（可以是0或n个）在api请求响应循环的生命周期中被执行。插件使用lua编写，目前已有几个基础功能：http基本认证、密钥认证、cors（cross-origin resource sharing，跨域资源共享）、tcp、udp、文件日志、api请求限流、请求转发以及nginx监控。\n\n\n# 1.5、traefik\n\ntræfɪk 是一个为了让部署微服务更加便捷而诞生的现代http反向代理、负载均衡工具。它支持多种后台 (docker, swarm, kubernetes, marathon, mesos, consul, etcd, zookeeper, boltdb, rest api, file…) 来自动化、动态的应用它的配置文件设置。\n\n\n# 1.6、openresty\n\nopenresty 是一个基于 nginx 与 lua 的高性能 web 平台，其内部集成了大量精良的 lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 web 应用、web 服务和动态网关。\n\n\n# 二、常见的注册中心\n\nspring cloud支持的多种注册中心eureka、consul、zookeeper、以及阿里巴巴推出nacos。这些注册中心在本质上都是用来管理服务的注册和发现以及服务状态的检查的\n\n\n# 2.1、eureka\n\n原生，2.0遇到性能瓶颈，停止维护。\n\neureka 是 netflix 出品的用于实现服务注册和发现的工具。 spring cloud 集成了 eureka，并提供了开箱即用的支持。其中， eureka 又可细分为 eureka server 和 eureka client。\n\n\n# 2.2、zookeeper\n\n支持，专业的独立产品。例如：dubbo。\n\nzookeeper是一种集中式服务，用于维护配置信息、命名、提供分布式同步和提供组服务。分布式应用程序以某种形式使用所有这些类型的服务。每次实现它们时，都需要做大量工作来修复不可避免的bug和竞争条件。由于实现这些类型的服务很困难，应用程序最初通常会忽略它们，这使得它们在发生变化时变得脆弱，难以管理。即使做得正确，这些服务的不同实现也会导致应用程序部署时的管理复杂性。\n\n\n# 2.3、consul\n\n原生，go语言开发。\n\nconsul是一个服务网络解决方案，使团队能够管理服务之间以及跨多云环境和运行时的安全网络连接。consul提供服务发现、基于身份的授权、l7流量管理和服务对服务加密。\n\n\n# 2.4、nacos\n\n相对于 spring cloud eureka 来说，nacos 更强大。\n\nnacos /nɑ:kəʊs/ 是 dynamic naming and configuration service的首字母简称，一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。\n\nnacos 致力于帮助您发现、配置和管理微服务。nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。\n\nnacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。\n\n\n# 三、常见的rpc框架\n\n\n# 3.1、dubbo\n\n国内最早开源的 rpc 框架，由阿里巴巴公司开发并于 2011 年末对外开源，仅支持 java 语言。后来贡献给了apache软件基金会。\n\napache dubbo 是一款微服务框架，为大规模微服务实践提供高性能 rpc 通信、流量治理、可观测性等解决方案，涵盖 java、golang 等多种语言 sdk 实现。最新版本升级到dubbo3了。\n\n\n# 3.2、motan\n\n微博内部使用的 rpc 框架，于 2016 年对外开源，仅支持 java 语言。motan是一个跨语言远程过程调用（rpc）框架，用于快速开发高性能分布式服务。\n\nmotan生态系统相关项目：\n\nmotan go是golang实现。 motanphp是php客户端可以直接或通过motan go代理与motan服务器交互。 motan openresty是基于openresty的lua（luajit）实现。 motan 源码托管\n\n\n# 3.3、tars\n\n腾讯内部使用的 rpc 框架，于 2017 年对外开源，仅支持 c++ 语言。\n\ntars是一个linux基金会项目。它是一个基于名称服务和tars协议的高性能rpc框架，也是一个集成的管理平台，并通过灵活的调度实现了托管服务。\n\ntars，又名taf（total application framework），自2008年以来一直在腾讯使用。目前它支持c++、java、nodejs和php。该框架为开发、维护和测试提供了一套解决方案，使开发、部署和测试服务更加高效。它集成了可扩展的编码/解码协议、高性能rpc通信框架、名称服务、监视器、统计和配置。您可以使用它快速开发基于微服务的可靠分布式应用程序，并实现完全高效的服务管理。\n\ntars 源码托管\n\n\n# 3.4、spring cloud\n\n国外 pivotal 公司 2014 年对外开源的 rpc 框架，仅支持 java 语言。spring cloud 利用 spring boot 特性整合了开源行业中优秀的组件，整体对外提供了一套在微服务架构中服务治理的解决方案。\n\n\n# 3.5、grpc\n\ngoogle 于 2015 年对外开源的跨语言 rpc 框架，支持多种语言。\n\ngrpc是一个现代的开源高性能远程过程调用（rpc）框架，可以在任何环境中运行。它可以通过可插拔的负载平衡、跟踪、健康检查和身份验证支持，有效地连接数据中心内和数据中心之间的服务。它也适用于分布式计算的最后一英里，将设备、移动应用程序和浏览器连接到后端服务。\n\n\n# 3.6、thrift\n\n最初是由 facebook 开发的内部系统跨语言的 rpc 框架，2007 年贡献给了 apache 基金，成为 apache 开源项目之一，支持多种语言。\n\nthrift 是一个软件框架（远程过程调用框架），用来进行可扩展且跨语言的服务的开发。它结合了功能强大的软件堆栈和代码生成引 擎，以构建在 c++, java, python, php, ruby, erlang, perl, haskell, c#, cocoa, javascript, node.js, smalltalk, and ocaml 这些编程语言间无缝结合的、高效的服务。\n\nthrift 最初由 facebook 开发，07 年四月开放源码，08 年 5 月进入 apache 孵化器，现在是 apache 基金会的顶级项目。\n\nthrift 允许你定义一个简单的定义文件中的数据类型和服务接口，以作为输入文件，编译器生成代码用来方便地生成 rpc 客户端和服务器通信的无缝跨编程语言。。\n\n著名的 key-value 存储服务器 cassandra 就是使用 thrift 作为其客户端 api 的。",charsets:{cjk:!0}},{title:"Oracle面试题1~33",frontmatter:{title:"Oracle面试题1~33",date:"2023-04-23T16:03:17.000Z",permalink:"/pages/interView/DB/001/"},regularPath:"/01.%E9%9D%A2%E7%BB%8F%E5%9B%AD%E5%9C%B0/04.%E6%95%B0%E6%8D%AE%E5%BA%93/001.Oracle%E9%9D%A2%E8%AF%95%E9%A2%981~33.html",relativePath:"01.面经园地/04.数据库/001.Oracle面试题1~33.md",key:"v-1537d5df",path:"/pages/interView/DB/001/",headers:[{level:4,title:"1.MySQL和Oracle的区别",slug:"_1-mysql和oracle的区别",normalizedTitle:"1.mysql和oracle的区别",charIndex:2},{level:4,title:"2.Oracle中function和procedure的区别？",slug:"_2-oracle中function和procedure的区别",normalizedTitle:"2.oracle中function和procedure的区别？",charIndex:280},{level:4,title:"3. 比较truncate和delete命令 ？",slug:"_3-比较truncate和delete命令",normalizedTitle:"3. 比较truncate和delete命令 ？",charIndex:474},{level:4,title:"4.oralce中 rowid, rownum的定义",slug:"_4-oralce中-rowid-rownum的定义",normalizedTitle:"4.oralce中 rowid, rownum的定义",charIndex:675},{level:4,title:"5. 事务的特性（ACID）是指什么",slug:"_5-事务的特性-acid-是指什么",normalizedTitle:"5. 事务的特性（acid）是指什么",charIndex:788},{level:4,title:"6. 列举几种表连接方式",slug:"_6-列举几种表连接方式",normalizedTitle:"6. 列举几种表连接方式",charIndex:1061},{level:4,title:"7. 描述oracle中tablespace和datafile之间的关系",slug:"_7-描述oracle中tablespace和datafile之间的关系",normalizedTitle:"7. 描述oracle中tablespace和datafile之间的关系",charIndex:1232},{level:4,title:"8. 什么是逻辑备份",slug:"_8-什么是逻辑备份",normalizedTitle:"8. 什么是逻辑备份",charIndex:1500},{level:4,title:"9. 什么是物理备份",slug:"_9-什么是物理备份",normalizedTitle:"9. 什么是物理备份",charIndex:1716},{level:4,title:"10. NVL与NVL2两个函数的使用方法和差别？",slug:"_10-nvl与nvl2两个函数的使用方法和差别",normalizedTitle:"10. nvl与nvl2两个函数的使用方法和差别？",charIndex:1992},{level:4,title:"11.union和union all的区别",slug:"_11-union和union-all的区别",normalizedTitle:"11.union和union all的区别",charIndex:2192},{level:4,title:"12. minus和intersect区别",slug:"_12-minus和intersect区别",normalizedTitle:"12. minus和intersect区别",charIndex:2328},{level:4,title:"13.什么是存储过程，优点是什么？",slug:"_13-什么是存储过程-优点是什么",normalizedTitle:"13.什么是存储过程，优点是什么？",charIndex:2464},{level:4,title:"14.什么是三范式",slug:"_14-什么是三范式",normalizedTitle:"14.什么是三范式",charIndex:2633},{level:4,title:"15.什么是视图？以及视图的使用场景有哪些？",slug:"_15-什么是视图-以及视图的使用场景有哪些",normalizedTitle:"15.什么是视图？以及视图的使用场景有哪些？",charIndex:2747},{level:4,title:"16.索引是什么？有什么作用以及优缺点？",slug:"_16-索引是什么-有什么作用以及优缺点",normalizedTitle:"16.索引是什么？有什么作用以及优缺点？",charIndex:2975},{level:4,title:"17.数据库的乐观锁和悲观锁是什么？",slug:"_17-数据库的乐观锁和悲观锁是什么",normalizedTitle:"17.数据库的乐观锁和悲观锁是什么？",charIndex:3230},{level:4,title:"18.数据库结构优化",slug:"_18-数据库结构优化",normalizedTitle:"18.数据库结构优化",charIndex:3906},{level:4,title:"19.解释oralce中的游标",slug:"_19-解释oralce中的游标",normalizedTitle:"19.解释oralce中的游标",charIndex:3989},{level:4,title:"20.描述oracle中的触发器",slug:"_20-描述oracle中的触发器",normalizedTitle:"20.描述oracle中的触发器",charIndex:4393},{level:4,title:"21. 使用oracle 伪列删除表中重复记录",slug:"_21-使用oracle-伪列删除表中重复记录",normalizedTitle:"21. 使用oracle 伪列删除表中重复记录",charIndex:4863},{level:4,title:"22.列出所有员工的姓名及其直接上级的姓名",slug:"_22-列出所有员工的姓名及其直接上级的姓名",normalizedTitle:"22.列出所有员工的姓名及其直接上级的姓名",charIndex:5007},{level:4,title:"23.列出受雇日期早于其直接上级的所有员工",slug:"_23-列出受雇日期早于其直接上级的所有员工",normalizedTitle:"23.列出受雇日期早于其直接上级的所有员工",charIndex:5158},{level:4,title:"24.列出最低薪金大于1500的各种工作",slug:"_24-列出最低薪金大于1500的各种工作",normalizedTitle:"24.列出最低薪金大于1500的各种工作",charIndex:5283},{level:4,title:"25.列出所有员工的年工资,按年薪从低到高排序",slug:"_25-列出所有员工的年工资-按年薪从低到高排序",normalizedTitle:"25.列出所有员工的年工资,按年薪从低到高排序",charIndex:5468},{level:4,title:"26.列出与“SCOTT”从事相同工作的所有员工",slug:"_26-列出与-scott-从事相同工作的所有员工",normalizedTitle:"26.列出与“scott”从事相同工作的所有员工",charIndex:5548},{level:4,title:"27.删除10号部门薪水最高的员工",slug:"_27-删除10号部门薪水最高的员工",normalizedTitle:"27.删除10号部门薪水最高的员工",charIndex:5740},{level:4,title:"28.将薪水最高的员工的薪水降30%",slug:"_28-将薪水最高的员工的薪水降30",normalizedTitle:"28.将薪水最高的员工的薪水降30%",charIndex:6023},{level:4,title:"29.示出薪水最高人的职位",slug:"_29-示出薪水最高人的职位",normalizedTitle:"29.示出薪水最高人的职位",charIndex:6237},{level:4,title:"30.查询员工姓名，工资和 工资级别(工资>=3000 为3级，工资>2000 为2级，工资<=2000 为1级)",slug:"_30-查询员工姓名-工资和-工资级别-工资-3000-为3级-工资-2000-为2级-工资-2000-为1级",normalizedTitle:"30.查询员工姓名，工资和 工资级别(工资&gt;=3000 为3级，工资&gt;2000 为2级，工资&lt;=2000 为1级)",charIndex:null},{level:4,title:"31.行列互换 与语法：case … when … then … when … then … else … end",slug:"_31-行列互换-与语法-case-when-then-when-then-else-end",normalizedTitle:"31.行列互换 与语法：case … when … then … when … then … else … end",charIndex:6541},{level:4,title:"32. Oracle中的分页",slug:"_32-oracle中的分页",normalizedTitle:"32. oracle中的分页",charIndex:7056},{level:4,title:"33.一个叫department的表，里面只有一个字段name,一共有4条纪录，分别是a,b,c,d,对应四个球对，现在四个球对进行比赛，用一条sql语句显示所有可能的比赛组合",slug:"_33-一个叫department的表-里面只有一个字段name-一共有4条纪录-分别是a-b-c-d-对应四个球对-现在四个球对进行比赛-用一条sql语句显示所有可能的比赛组合",normalizedTitle:"33.一个叫department的表，里面只有一个字段name,一共有4条纪录，分别是a,b,c,d,对应四个球对，现在四个球对进行比赛，用一条sql语句显示所有可能的比赛组合",charIndex:7482}],headersStr:"1.MySQL和Oracle的区别 2.Oracle中function和procedure的区别？ 3. 比较truncate和delete命令 ？ 4.oralce中 rowid, rownum的定义 5. 事务的特性（ACID）是指什么 6. 列举几种表连接方式 7. 描述oracle中tablespace和datafile之间的关系 8. 什么是逻辑备份 9. 什么是物理备份 10. NVL与NVL2两个函数的使用方法和差别？ 11.union和union all的区别 12. minus和intersect区别 13.什么是存储过程，优点是什么？ 14.什么是三范式 15.什么是视图？以及视图的使用场景有哪些？ 16.索引是什么？有什么作用以及优缺点？ 17.数据库的乐观锁和悲观锁是什么？ 18.数据库结构优化 19.解释oralce中的游标 20.描述oracle中的触发器 21. 使用oracle 伪列删除表中重复记录 22.列出所有员工的姓名及其直接上级的姓名 23.列出受雇日期早于其直接上级的所有员工 24.列出最低薪金大于1500的各种工作 25.列出所有员工的年工资,按年薪从低到高排序 26.列出与“SCOTT”从事相同工作的所有员工 27.删除10号部门薪水最高的员工 28.将薪水最高的员工的薪水降30% 29.示出薪水最高人的职位 30.查询员工姓名，工资和 工资级别(工资>=3000 为3级，工资>2000 为2级，工资<=2000 为1级) 31.行列互换 与语法：case … when … then … when … then … else … end 32. Oracle中的分页 33.一个叫department的表，里面只有一个字段name,一共有4条纪录，分别是a,b,c,d,对应四个球对，现在四个球对进行比赛，用一条sql语句显示所有可能的比赛组合",content:"# 1.MySQL和Oracle的区别\n\nMySQL是开源的项目，免费。中小企业首选MySQL，Oracle是Oracle公司推出的一款成熟的数据库产品是闭源同时也是收费的，但是Oracle官网是不限制下载的（只要你有账号）一般的开发测试是没问题。 SQL语法的不同，MySQL较为灵活，Oracle较为严格（具体就是单引号，分页的处理，主键的自动增长） 对于事务的支持。MySQL对于事务默认是不支持的，只有存储引擎innodb支持。而Oracle对于事务是完全支持。 并发性。MySql默认表级锁，Oracle行级锁，所以oracle并发行高很多。\n\n# 2.Oracle中function和procedure的区别？\n\n 1. 函数function是存储过程的一种\n 2. 函数可以没有参数,但是一定需要一个返回值，存储过程可以没有参数,不需要返回值\n 3. 函数return返回值没有返回参数模式，存储过程通过out参数返回值, 如果需要返 回多个参数则建议使用存储过程\n 4. 在sql数据操纵语句中只能调用函数而不能调用存储过程\n\n# 3. 比较truncate和delete命令 ？\n\n 1. Truncate 和delete都可以将数据实体删掉，truncate 的操作并不记录到 rollback日志，所以操作速度较快，但同时这个数据不能恢复\n 2. Delete操作不腾出表空间的空间\n 3. Truncate 不能对视图等进行删除\n 4. Truncate是数据定义语言（DDL），而delete是数据操纵语言(DML)\n\n# 4.oralce中 rowid, rownum的定义\n\n 1. rowid和rownum都是伪列\n 2. rowid是物理地址，用于定位oracle中具体数据的物理存储位置\n 3. rownum则是sql的输出结果排序\n\n# 5. 事务的特性（ACID）是指什么\n\n事务是作为一个逻辑单元执行的一系列操作，一个逻辑工作单元必须有四个属性，称为 ACID(原子性、一致性、隔离性和持久性)属性。\n\n 1. 原子性（Atomic）：事务中的各项操作，要么全做要么全不做，任何一项操作的失败都会导致整个事务的失败\n 2. 一致性（Consistent）：事务结束后系统状态是一样的\n 3. 隔离性（Isolated）：并发执行的事务彼此无法看到对方的中间状态\n 4. 持久性（Durable）：事务完成后，即使发生灾难性的故障，通过日志和同步备份可以在故障发生后重建数据\n\n# 6. 列举几种表连接方式\n\n等值连接（内连接）、非等连接、自连接、外连接（左、右、全）\n\n内连接又称等值连接，筛选完全匹配的行\n\n左连接以左表为主，筛选完全匹配的行之外还会把左表中没有匹配的行也筛选，找不到匹配的数据用null填充\n\n右连接以右表为主，筛选完全匹配的行之外还会把有表中没有匹配的行也帅选，找不到匹配的数据用null填充\n\n# 7. 描述oracle中tablespace和datafile之间的关系\n\n一个表空间可包含一个或多个数据文件。表空间利用增加或扩展数据文件扩大表空间，表空间的大小为组成该表空间的数据文件大小的和。一个datafile只能属于一个表空间;一个tablespace可以有一个或多个datafile,每个datafile只能在一个tablespace内, table中的数据,通过hash算法分布在tablespace中的各个datafile中,tablespace是逻辑上的概念,datafile则在物理上储存了数据库的种种对象。\n\n# 8. 什么是逻辑备份\n\n 1. 逻辑备份(exp/imp)用于实现数据库对象的恢复。但不是基于时间点可完全恢复的备份策略。只能作为联机备份和脱机备份的一种补充。\n 2. 完全逻辑备份 完全逻辑备份是将整个数据库导出到一个数据库的格式文件中，该文件可以在不同的数据库版本、操作系统和硬件平台之间进行移植。\n 3. 指定表的逻辑备份 通过备份工具，可以将指定的数据库表备份出来，这可以避免完全逻辑备份所带来的时间和财力上的浪费。\n\n# 9. 什么是物理备份\n\n物理备份是最主要的备份方式。用于保证数据库在最小的数据库丢失或没有数据丢失的情况下得到恢复.物理备份分为热备份和冷备份\n\n 1. 热备份：主要是指备份过程在数据库打开并且用户可以使用的情况下进行。需要执行热物理备份的情况有：由于数据库性质要求不间断工作，因而此时只能采用热物理备份。\n 2. 冷备份：冷物理备份提供了最简单和最直接的方法保护数据库因物理损坏丢失。\n\n对一个已经存在大最数据量的数据库，在晚间数据库可以关闭，此时应用冷物理。\n\n当对数据库服务器进行升级，（如更换硬盘），此时需要备份数据库信息需要采用冷备。\n\n# 10. NVL与NVL2两个函数的使用方法和差别？\n\n 1. NVL (expr1, expr2)：expr1为NULL，返回expr2；不为NULL，返回expr1。注意两者的类型要一致\n 2. NVL2 (expr1, expr2, expr3) ：expr1不为NULL。返回expr2；为NULL，返回expr3。expr2和expr3类型不同的话。expr3会转换为expr2的类型\n\n# 11.union和union all的区别\n\n 1. UNION：由每一个查询 选择的 全部不反复的行组成。并集不包括反复值， 默认按第 1 个查询的第 1 列升序排列。\n 2. UNION ALL： 由每一个查询 选择的 全部的行。全然并集包括反复值。 不排序。\n\n# 12. minus和intersect区别\n\n 1. MINUS: 在第一个查询中但不在后面查询中的行，不包括重复行。 按第1 个查询的第 1 列升序排列。\n 2. INTERSECT:取每一个查询结果的交集。 不包括重复行。 按第1 个查询的第 1 列升序排列。\n\n# 13.什么是存储过程，优点是什么？\n\n存储过程就像我们编程语言中的函数一样，封装了我们的代码(PLSQL、T-SQL)。存储过程的优点：\n\n * 能够将代码封装起来保存在数据库之中\n * 让编程语言进行调用\n * 存储过程是一个预编译的代码块，执行效率比较高 一个存储过程替代大量T_SQL语句 ，可以降低网络通信量，提高通信速率\n\n# 14.什么是三范式\n\n * 第一范式：字段是最小的的单元不可再分\n * 第二范式：满足第一范式,表中的字段必须完全依赖于全部主键而非部分主键。\n * 第三范式：满足第二范式，非主键外的所有字段必须互不依赖既不存在传递依赖\n\n# 15.什么是视图？以及视图的使用场景有哪些？\n\n * 视图是一种基于数据表的一种虚表\n * 视图建立在已有表的基础上, 视图赖以建立的这些表称为基表\n * 向视图提供数据内容的语句为 SELECT 语句,可以将视图理解为存储起来的 SELECT 语句\n * 视图向用户提供基表数据的另一种表现形式\n * 视图没有存储真正的数据，真正的数据还是存储在基表中\n * 程序员虽然操作的是视图，但最终视图还会转成操作基表\n * 一个基表可以有0个或多个视图\n\n# 16.索引是什么？有什么作用以及优缺点？\n\n 1. 是一种快速查询表中内容的机制，类似于新华字典的目录\n 2. 运用在表中某个些字段上，但存储时，独立于表之外\n\n优缺点：\n\n * 索引加快数据库的检索速度\n * 索引降低了插入、删除、修改等维护任务的速度(虽然索引可以提高查询速度，但是它们也会导致数据库系统更新数据的性能下降，因为大部分数据更新需要同时更新索引)\n * 唯一索引可以确保每一行数据的唯一性，通过使用索引，可以在查询的过程中使用优化隐藏器，提高系统的性能\n * 索引需要占物理和数据空间\n\n# 17.数据库的乐观锁和悲观锁是什么？\n\n确保在多个事务同时存取数据库中同一数据时不破坏事务的隔离性和统一性以及数据库的统一性，乐观锁和悲观锁是并发控制主要采用的技术手段。\n\n * 悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作.在查询数据的时候就把事务锁起来，直到提交事务.实现方式：使用数据库中的锁机制。\n\n执行select xxx for update操作时，数据会被锁定，只有执行commit或rollback才会释放.执行select xxx for update nowait操作时，数据也会被锁定，其他人访问时或返回ORA-00054错误，内容是资源正忙，需要采取相应的业务措施进行处理。\n\n * 乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。在修改数据的时候把事务锁起来，通过version的方式来进行锁定.实现方式：使用version版本或者时间戳.\n   \n   1. 在数据取得的时候把整个数据都copy到应用中，在进行提交的时候比对当前数据库中的数据和开始的时候更新前取得的数据。当发现两个数据一模一样以后，就表示没有冲突可以提交，否则就是并发冲突，需要去用业务逻辑进行解决。\n   2. 新增一个Table的Column，这个column是采用timestamp型，存储数据最后更新的时间。这种Timestamp的数据精度在Oracle的时间类型中是最高的，精确到微秒，是在更新提交的时候检查当前数据库中数据的时间戳和自己更新前取到的时间戳进行对比，如果一致则OK，否则就是版本冲突。\n\n# 18.数据库结构优化\n\n 1. 范式优化：比如消除冗余（节省空间）\n 2. 反范式优化：比如适当加冗余等（减少join）\n 3. 拆分表： 垂直拆分和水平拆分\n\n# 19.解释oralce中的游标\n\n游标就是指向一个结果集的记录定位器（指示器），用于定位记录。游标的使用方式：声明游标，打开游标，提取游标数据，关闭游标\n\nDeclare\n \n cursor cur is select * from category;\n \n    record category%rowtype;\n \n  begin\n \n    open cur;\n \n    loop\n \n      fetch cur into record;\n \n      if cur%notfound then\n \n        exit;\n \n      end if;\n \n      dbms_output.put_line(to_char(record.id) || ',' || record.name);\n \n    end loop;\n \n    close cur;\n \n end;\n\n\n# 20.描述oracle中的触发器\n\n触发器是一种特殊的存储过程，存储过程由用户显式调用，而触发器是当用户对表\n\n进行update,delete,insert是自动调用。触发器类型通常包括（插入，删除，修改）\n\nCREATE OR REPLACE TRIGGER SAL_EMP\n BEFORE UPDATE ON scott.EMP\n FOR EACH ROW\nBEGIN\n IF :OLD.SAL > :NEW.SAL THEN\n  DBMS_OUTPUT.PUT_LINE('工资减少');\n ELSIF :OLD.SAL < :NEW.SAL THEN\n  DBMS_OUTPUT.PUT_LINE('工资增加');\n ELSE\n  DBMS_OUTPUT.PUT_LINE('工资未作任何变动');\n END IF;\n \n DBMS_OUTPUT.PUT_LINE('更新前工资 ：' || :OLD.SAL);\n \n DBMS_OUTPUT.PUT_LINE('更新后工资 ：' || :NEW.SAL);\n \nEND;\n\n\n# 21. 使用oracle 伪列删除表中重复记录\n\ndelete table t where t.rowid not in\n\n(select max(t1.rowid) from table1 t1 where t1.name=t.name)\n\n根据表结构scott.emp如下图:\n\n# 22.列出所有员工的姓名及其直接上级的姓名\n\n分析：表自映射，为表起别名，进行关联 t1 表模拟员工表 t2 表保存直接上级信息`\n\nselect t1.ename 员工姓名, t2.ename 直接上级 from emp t1,emp t2 where t1.MGR = t2.empno;\n\n\n# 23.列出受雇日期早于其直接上级的所有员工\n\nselect t1.*,t2.hiredate from emp t1,emp t2 where t1.MGR = t2.empno and t1.hiredate < t2.hiredate;\n\n\n# 24.列出最低薪金大于1500的各种工作\n\n分析：工作的最低薪金 —- 按工作分组，求最低薪金\n\nselect min(sal) from emp group by job;\n\n\n大于1500 是一个分组条件 — having\n\nselect job,min(sal) from emp group by job having min(sal) > 1500;\n\n\n# 25.列出所有员工的年工资,按年薪从低到高排序\n\nselect ename, sal*12 from emp order by sal*12 asc;\n\n\n# 26.列出与“SCOTT”从事相同工作的所有员工\n\n分析：先用子查询查出SCOTT的工作 : select job from emp where ename =’SCOTT';\n\n   select * from emp where ename <> ‘SCOTT’ and job = (select job from emp where ename =’SCOTT’);\n\n\n# 27.删除10号部门薪水最高的员工\n\ndelete from emp where deptno=10 and sal >= all(select sal from emp where deptno=10 ); // MYSQL 不支持\n\n\nMysql 规范，修改或者删除 表中记录，不允许在子查询中 查询相同表 mysql解决方案：临时表\n\ndelete from emp where deptno=10 and sal >= all(select t.sal from (select sal from emp where deptno=10) t );\n\n\n# 28.将薪水最高的员工的薪水降30%\n\noracle：\n\nupdate emp set sal = sal*0.7 where sal = (select max(sal) from emp);\n\n\nmysql:\n\nupdate emp set sal = sal*0.7 where sal = (select t.maxsal  from (select max(sal) maxsal from emp) t);\n\n\n# 29.示出薪水最高人的职位\n\nselect job from emp where sal = (select max(sal) from emp);\nselect job from emp where sal >= all(select sal from emp);\n\n\n# 30.查询员工姓名，工资和 工资级别(工资>=3000 为3级，工资>2000 为2级，工资<=2000 为1级)\n\n分析：\n\nselect ename,sal, case when sal>=3000 then ‘3级’ when sal>2000 then ‘2级’ else ‘1级’ end 级别 from emp;\n\n# 31.行列互换 与语法：case … when … then … when … then … else … end\n\n姓名   课程   分数\n张三   语文   74\n张三   数学   83\n张三   物理   93\n李四   语文   74\n李四   数学   84\n李四   物理   94\n\n变成(得到如下结果)：\n\n姓名   语文   数学   物理\n李四   74   84   94\n张三   74   83   93\n\n\nselect name,max(case when cource =’语文’ then score else 0 end) from scores group by name;\n\nselect name,max(case when cource =’语文’ then score else 0 end)  语文,max(case when cource =’数学’ then score else 0 end) 数学,\nmax(case when cource =’英语’ then score else 0 end) 英语  from scores group by name;\n\n\n# 32. Oracle中的分页\n\n * 使用rownum函数\n   \n   SELECT *\n   FROM (SELECT ROWNUM AS rowno,r.*\n              FROM(SELECT * FROM tmp t  ORDER BY id desc\n                      ) r\n              where ROWNUM <= page*size\n             ) a\n   WHERE a.rowno > (page-1)*size\n   \n\n * 使用row_number()over()函数\n   \n   Select * from (\n     Select * ,row_number() over(order by id desc) num\n     ) a where num between (page-1)*size and page*size\n   \n\n# 33.一个叫department的表，里面只有一个字段name,一共有4条纪录，分别是a,b,c,d,对应四个球对，现在四个球对进行比赛，用一条sql语句显示所有可能的比赛组合\n\nselect a.name, b.name\nfrom team a, team b\nwhere a.name < b.name\n",normalizedContent:"# 1.mysql和oracle的区别\n\nmysql是开源的项目，免费。中小企业首选mysql，oracle是oracle公司推出的一款成熟的数据库产品是闭源同时也是收费的，但是oracle官网是不限制下载的（只要你有账号）一般的开发测试是没问题。 sql语法的不同，mysql较为灵活，oracle较为严格（具体就是单引号，分页的处理，主键的自动增长） 对于事务的支持。mysql对于事务默认是不支持的，只有存储引擎innodb支持。而oracle对于事务是完全支持。 并发性。mysql默认表级锁，oracle行级锁，所以oracle并发行高很多。\n\n# 2.oracle中function和procedure的区别？\n\n 1. 函数function是存储过程的一种\n 2. 函数可以没有参数,但是一定需要一个返回值，存储过程可以没有参数,不需要返回值\n 3. 函数return返回值没有返回参数模式，存储过程通过out参数返回值, 如果需要返 回多个参数则建议使用存储过程\n 4. 在sql数据操纵语句中只能调用函数而不能调用存储过程\n\n# 3. 比较truncate和delete命令 ？\n\n 1. truncate 和delete都可以将数据实体删掉，truncate 的操作并不记录到 rollback日志，所以操作速度较快，但同时这个数据不能恢复\n 2. delete操作不腾出表空间的空间\n 3. truncate 不能对视图等进行删除\n 4. truncate是数据定义语言（ddl），而delete是数据操纵语言(dml)\n\n# 4.oralce中 rowid, rownum的定义\n\n 1. rowid和rownum都是伪列\n 2. rowid是物理地址，用于定位oracle中具体数据的物理存储位置\n 3. rownum则是sql的输出结果排序\n\n# 5. 事务的特性（acid）是指什么\n\n事务是作为一个逻辑单元执行的一系列操作，一个逻辑工作单元必须有四个属性，称为 acid(原子性、一致性、隔离性和持久性)属性。\n\n 1. 原子性（atomic）：事务中的各项操作，要么全做要么全不做，任何一项操作的失败都会导致整个事务的失败\n 2. 一致性（consistent）：事务结束后系统状态是一样的\n 3. 隔离性（isolated）：并发执行的事务彼此无法看到对方的中间状态\n 4. 持久性（durable）：事务完成后，即使发生灾难性的故障，通过日志和同步备份可以在故障发生后重建数据\n\n# 6. 列举几种表连接方式\n\n等值连接（内连接）、非等连接、自连接、外连接（左、右、全）\n\n内连接又称等值连接，筛选完全匹配的行\n\n左连接以左表为主，筛选完全匹配的行之外还会把左表中没有匹配的行也筛选，找不到匹配的数据用null填充\n\n右连接以右表为主，筛选完全匹配的行之外还会把有表中没有匹配的行也帅选，找不到匹配的数据用null填充\n\n# 7. 描述oracle中tablespace和datafile之间的关系\n\n一个表空间可包含一个或多个数据文件。表空间利用增加或扩展数据文件扩大表空间，表空间的大小为组成该表空间的数据文件大小的和。一个datafile只能属于一个表空间;一个tablespace可以有一个或多个datafile,每个datafile只能在一个tablespace内, table中的数据,通过hash算法分布在tablespace中的各个datafile中,tablespace是逻辑上的概念,datafile则在物理上储存了数据库的种种对象。\n\n# 8. 什么是逻辑备份\n\n 1. 逻辑备份(exp/imp)用于实现数据库对象的恢复。但不是基于时间点可完全恢复的备份策略。只能作为联机备份和脱机备份的一种补充。\n 2. 完全逻辑备份 完全逻辑备份是将整个数据库导出到一个数据库的格式文件中，该文件可以在不同的数据库版本、操作系统和硬件平台之间进行移植。\n 3. 指定表的逻辑备份 通过备份工具，可以将指定的数据库表备份出来，这可以避免完全逻辑备份所带来的时间和财力上的浪费。\n\n# 9. 什么是物理备份\n\n物理备份是最主要的备份方式。用于保证数据库在最小的数据库丢失或没有数据丢失的情况下得到恢复.物理备份分为热备份和冷备份\n\n 1. 热备份：主要是指备份过程在数据库打开并且用户可以使用的情况下进行。需要执行热物理备份的情况有：由于数据库性质要求不间断工作，因而此时只能采用热物理备份。\n 2. 冷备份：冷物理备份提供了最简单和最直接的方法保护数据库因物理损坏丢失。\n\n对一个已经存在大最数据量的数据库，在晚间数据库可以关闭，此时应用冷物理。\n\n当对数据库服务器进行升级，（如更换硬盘），此时需要备份数据库信息需要采用冷备。\n\n# 10. nvl与nvl2两个函数的使用方法和差别？\n\n 1. nvl (expr1, expr2)：expr1为null，返回expr2；不为null，返回expr1。注意两者的类型要一致\n 2. nvl2 (expr1, expr2, expr3) ：expr1不为null。返回expr2；为null，返回expr3。expr2和expr3类型不同的话。expr3会转换为expr2的类型\n\n# 11.union和union all的区别\n\n 1. union：由每一个查询 选择的 全部不反复的行组成。并集不包括反复值， 默认按第 1 个查询的第 1 列升序排列。\n 2. union all： 由每一个查询 选择的 全部的行。全然并集包括反复值。 不排序。\n\n# 12. minus和intersect区别\n\n 1. minus: 在第一个查询中但不在后面查询中的行，不包括重复行。 按第1 个查询的第 1 列升序排列。\n 2. intersect:取每一个查询结果的交集。 不包括重复行。 按第1 个查询的第 1 列升序排列。\n\n# 13.什么是存储过程，优点是什么？\n\n存储过程就像我们编程语言中的函数一样，封装了我们的代码(plsql、t-sql)。存储过程的优点：\n\n * 能够将代码封装起来保存在数据库之中\n * 让编程语言进行调用\n * 存储过程是一个预编译的代码块，执行效率比较高 一个存储过程替代大量t_sql语句 ，可以降低网络通信量，提高通信速率\n\n# 14.什么是三范式\n\n * 第一范式：字段是最小的的单元不可再分\n * 第二范式：满足第一范式,表中的字段必须完全依赖于全部主键而非部分主键。\n * 第三范式：满足第二范式，非主键外的所有字段必须互不依赖既不存在传递依赖\n\n# 15.什么是视图？以及视图的使用场景有哪些？\n\n * 视图是一种基于数据表的一种虚表\n * 视图建立在已有表的基础上, 视图赖以建立的这些表称为基表\n * 向视图提供数据内容的语句为 select 语句,可以将视图理解为存储起来的 select 语句\n * 视图向用户提供基表数据的另一种表现形式\n * 视图没有存储真正的数据，真正的数据还是存储在基表中\n * 程序员虽然操作的是视图，但最终视图还会转成操作基表\n * 一个基表可以有0个或多个视图\n\n# 16.索引是什么？有什么作用以及优缺点？\n\n 1. 是一种快速查询表中内容的机制，类似于新华字典的目录\n 2. 运用在表中某个些字段上，但存储时，独立于表之外\n\n优缺点：\n\n * 索引加快数据库的检索速度\n * 索引降低了插入、删除、修改等维护任务的速度(虽然索引可以提高查询速度，但是它们也会导致数据库系统更新数据的性能下降，因为大部分数据更新需要同时更新索引)\n * 唯一索引可以确保每一行数据的唯一性，通过使用索引，可以在查询的过程中使用优化隐藏器，提高系统的性能\n * 索引需要占物理和数据空间\n\n# 17.数据库的乐观锁和悲观锁是什么？\n\n确保在多个事务同时存取数据库中同一数据时不破坏事务的隔离性和统一性以及数据库的统一性，乐观锁和悲观锁是并发控制主要采用的技术手段。\n\n * 悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作.在查询数据的时候就把事务锁起来，直到提交事务.实现方式：使用数据库中的锁机制。\n\n执行select xxx for update操作时，数据会被锁定，只有执行commit或rollback才会释放.执行select xxx for update nowait操作时，数据也会被锁定，其他人访问时或返回ora-00054错误，内容是资源正忙，需要采取相应的业务措施进行处理。\n\n * 乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。在修改数据的时候把事务锁起来，通过version的方式来进行锁定.实现方式：使用version版本或者时间戳.\n   \n   1. 在数据取得的时候把整个数据都copy到应用中，在进行提交的时候比对当前数据库中的数据和开始的时候更新前取得的数据。当发现两个数据一模一样以后，就表示没有冲突可以提交，否则就是并发冲突，需要去用业务逻辑进行解决。\n   2. 新增一个table的column，这个column是采用timestamp型，存储数据最后更新的时间。这种timestamp的数据精度在oracle的时间类型中是最高的，精确到微秒，是在更新提交的时候检查当前数据库中数据的时间戳和自己更新前取到的时间戳进行对比，如果一致则ok，否则就是版本冲突。\n\n# 18.数据库结构优化\n\n 1. 范式优化：比如消除冗余（节省空间）\n 2. 反范式优化：比如适当加冗余等（减少join）\n 3. 拆分表： 垂直拆分和水平拆分\n\n# 19.解释oralce中的游标\n\n游标就是指向一个结果集的记录定位器（指示器），用于定位记录。游标的使用方式：声明游标，打开游标，提取游标数据，关闭游标\n\ndeclare\n \n cursor cur is select * from category;\n \n    record category%rowtype;\n \n  begin\n \n    open cur;\n \n    loop\n \n      fetch cur into record;\n \n      if cur%notfound then\n \n        exit;\n \n      end if;\n \n      dbms_output.put_line(to_char(record.id) || ',' || record.name);\n \n    end loop;\n \n    close cur;\n \n end;\n\n\n# 20.描述oracle中的触发器\n\n触发器是一种特殊的存储过程，存储过程由用户显式调用，而触发器是当用户对表\n\n进行update,delete,insert是自动调用。触发器类型通常包括（插入，删除，修改）\n\ncreate or replace trigger sal_emp\n before update on scott.emp\n for each row\nbegin\n if :old.sal > :new.sal then\n  dbms_output.put_line('工资减少');\n elsif :old.sal < :new.sal then\n  dbms_output.put_line('工资增加');\n else\n  dbms_output.put_line('工资未作任何变动');\n end if;\n \n dbms_output.put_line('更新前工资 ：' || :old.sal);\n \n dbms_output.put_line('更新后工资 ：' || :new.sal);\n \nend;\n\n\n# 21. 使用oracle 伪列删除表中重复记录\n\ndelete table t where t.rowid not in\n\n(select max(t1.rowid) from table1 t1 where t1.name=t.name)\n\n根据表结构scott.emp如下图:\n\n# 22.列出所有员工的姓名及其直接上级的姓名\n\n分析：表自映射，为表起别名，进行关联 t1 表模拟员工表 t2 表保存直接上级信息`\n\nselect t1.ename 员工姓名, t2.ename 直接上级 from emp t1,emp t2 where t1.mgr = t2.empno;\n\n\n# 23.列出受雇日期早于其直接上级的所有员工\n\nselect t1.*,t2.hiredate from emp t1,emp t2 where t1.mgr = t2.empno and t1.hiredate < t2.hiredate;\n\n\n# 24.列出最低薪金大于1500的各种工作\n\n分析：工作的最低薪金 —- 按工作分组，求最低薪金\n\nselect min(sal) from emp group by job;\n\n\n大于1500 是一个分组条件 — having\n\nselect job,min(sal) from emp group by job having min(sal) > 1500;\n\n\n# 25.列出所有员工的年工资,按年薪从低到高排序\n\nselect ename, sal*12 from emp order by sal*12 asc;\n\n\n# 26.列出与“scott”从事相同工作的所有员工\n\n分析：先用子查询查出scott的工作 : select job from emp where ename =’scott';\n\n   select * from emp where ename <> ‘scott’ and job = (select job from emp where ename =’scott’);\n\n\n# 27.删除10号部门薪水最高的员工\n\ndelete from emp where deptno=10 and sal >= all(select sal from emp where deptno=10 ); // mysql 不支持\n\n\nmysql 规范，修改或者删除 表中记录，不允许在子查询中 查询相同表 mysql解决方案：临时表\n\ndelete from emp where deptno=10 and sal >= all(select t.sal from (select sal from emp where deptno=10) t );\n\n\n# 28.将薪水最高的员工的薪水降30%\n\noracle：\n\nupdate emp set sal = sal*0.7 where sal = (select max(sal) from emp);\n\n\nmysql:\n\nupdate emp set sal = sal*0.7 where sal = (select t.maxsal  from (select max(sal) maxsal from emp) t);\n\n\n# 29.示出薪水最高人的职位\n\nselect job from emp where sal = (select max(sal) from emp);\nselect job from emp where sal >= all(select sal from emp);\n\n\n# 30.查询员工姓名，工资和 工资级别(工资>=3000 为3级，工资>2000 为2级，工资<=2000 为1级)\n\n分析：\n\nselect ename,sal, case when sal>=3000 then ‘3级’ when sal>2000 then ‘2级’ else ‘1级’ end 级别 from emp;\n\n# 31.行列互换 与语法：case … when … then … when … then … else … end\n\n姓名   课程   分数\n张三   语文   74\n张三   数学   83\n张三   物理   93\n李四   语文   74\n李四   数学   84\n李四   物理   94\n\n变成(得到如下结果)：\n\n姓名   语文   数学   物理\n李四   74   84   94\n张三   74   83   93\n\n\nselect name,max(case when cource =’语文’ then score else 0 end) from scores group by name;\n\nselect name,max(case when cource =’语文’ then score else 0 end)  语文,max(case when cource =’数学’ then score else 0 end) 数学,\nmax(case when cource =’英语’ then score else 0 end) 英语  from scores group by name;\n\n\n# 32. oracle中的分页\n\n * 使用rownum函数\n   \n   select *\n   from (select rownum as rowno,r.*\n              from(select * from tmp t  order by id desc\n                      ) r\n              where rownum <= page*size\n             ) a\n   where a.rowno > (page-1)*size\n   \n\n * 使用row_number()over()函数\n   \n   select * from (\n     select * ,row_number() over(order by id desc) num\n     ) a where num between (page-1)*size and page*size\n   \n\n# 33.一个叫department的表，里面只有一个字段name,一共有4条纪录，分别是a,b,c,d,对应四个球对，现在四个球对进行比赛，用一条sql语句显示所有可能的比赛组合\n\nselect a.name, b.name\nfrom team a, team b\nwhere a.name < b.name\n",charsets:{cjk:!0}},{title:"第一章：环境初始化",frontmatter:{title:"第一章：环境初始化",date:"2023-04-23T16:03:17.000Z",permalink:"/pages/Notes/Python/miniServer/001/"},regularPath:"/02.%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/03.Python/01.Python+Flask%E5%BC%80%E5%8F%91%E5%BE%AE%E6%9C%8D%E5%8A%A1/001.%E7%8E%AF%E5%A2%83%E5%88%9D%E5%A7%8B%E5%8C%96.html",relativePath:"02.开发笔记/03.Python/01.Python+Flask开发微服务/001.环境初始化.md",key:"v-72160dbf",path:"/pages/Notes/Python/miniServer/001/",headers:[{level:3,title:"环境初始化",slug:"环境初始化",normalizedTitle:"环境初始化",charIndex:2},{level:3,title:"添加路由",slug:"添加路由",normalizedTitle:"添加路由",charIndex:390},{level:3,title:"配置启动设置",slug:"配置启动设置",normalizedTitle:"配置启动设置",charIndex:1248},{level:3,title:"保证依赖同步",slug:"保证依赖同步",normalizedTitle:"保证依赖同步",charIndex:2048},{level:3,title:"GIT提交",slug:"git提交",normalizedTitle:"git提交",charIndex:2368}],headersStr:"环境初始化 添加路由 配置启动设置 保证依赖同步 GIT提交",content:"# 环境初始化\n\n 1. 首先建立项目文件夹，进入文件夹，使用 shift+鼠标右键，选择[在此处打开PowerShell窗口]。\n\n 2. 建立服务端项目文件夹:\n    \n    mkdir server_user\n    \n\n 3. 创建并启动虚拟环境:\n    \n    python -m virtualenv tddFlask\n    .\\/tddFlask/Scripts/activate\n    \n\n 4. 安装Flask：\n    \n    pip install Flask\n    \n\n> 说明: 如果出现：[notice] A new release of pip is available:...字样提示，说明pip install版本不是最新。 可以执行：python.exe -m pip install --upgrade pip 升级\n\n\n# 添加路由\n\n使用VsCode打开server_user文件夹，在根目录下新建__init__.py文件\n\nfrom flask import Flask,jsonify\n\n#App初始化\napp=Flask(__name__)\n\n@app.route('/startInfo',methods=['GET'])\ndef start_info():\n    return jsonify({\n        'code':'000000000000',\n        'message':'OK'\n    })\n\n\n安装Flask-Script包，用于使用命令行来管理Flask\n\npip install Flask-Script\n\n\n使用vscode，在server_user目录下新增:main.py文件：\n\nfrom flask_script import Manager\nfrom __init__ import app\n\nmanager = Manager(app)\n\nif __name__ == '__main__':\n    manager.run()\n\n\n在PowerShell中使用命令行启动:\n\npython main.py runserver\n\n\n> 此时如果出现No module named 'flask._compat'错误，说明flask_script版本可能过高。 此时可以减配，也可以到 /tddFlask/Lib/site-packages/flask_script/ 目录下的 init.py 文件第15行 将 from flask._compat import text_type改为 from flask_script._compat import text_type即可.\n\n在浏览器中打开 http://127.0.0.1:5000/startInfo，即可看到页面输出信息：\n\n{\"code\":\"000000000000\",\"message\":\"OK\"}\n\n\n\n# 配置启动设置\n\n根目录下使用VSCode添加文件：config.py:\n\nclass BaseConfig:\n    \"\"\"基础配置\"\"\"\n    DEBUG=False\n    TESTING=False\n\nclass DevConfig(BaseConfig):\n    \"\"\"开发环境配置\"\"\"\n    DEBUG=True\n\nclass TestConfig(BaseConfig):\n    \"\"\"测试环境配置\"\"\"\n    DEBUG=True\n    TESTING=True\n\nclass ProdConfig(BaseConfig):\n    \"\"\"生产环境配置\"\"\"\n    DEBUG=False\n\n\n修改__init__.py文件：\n\n# server/__init__.py\nfrom flask import Flask,jsonify\nfrom config import DevConfig,TestConfig,ProdConfig\n\n#App初始化\napp=Flask(__name__)\n#环境配置\ncurrConfig=DevConfig()\napp.config.from_object(currConfig)\n\n#路由设置\n@app.route('/startInfo',methods=['GET'])\ndef start_info():\n    return jsonify({\n        'code':'000000000000',\n        'message':'OK'\n    })\n\n\n重新启动：\n\npython main.py runserver\n\n\n此时出现\n\n'''Shell Debug mode: on '''\n\n字样提示，标志Debug模式已经打开。此时任何代码改动将即时地进行加载，不必再重新启动Flask。\n\n\n# 保证依赖同步\n\n为了保证我们的项目依赖实时同步，我们将依赖包添加到一个名为 requirements.txt 的文件中\n\npip freeze > requirements.txt\n\n\n查看 requirements.txt 文件的内容\n\nautopep8==2.0.2\nclick==8.1.3\ncolorama==0.4.6\nFlask==2.2.3\nFlask-Script==2.0.6\nitsdangerous==2.1.2\nJinja2==3.1.2\nMarkupSafe==2.1.2\npycodestyle==2.10.0\nWerkzeug==2.2.3\n\n\n配置完毕，可以退出虚拟环境：\n\ndeactivate\n\n\n\n# GIT提交\n\n为提交Git，项目根目录下新增 .gitignore 文件：\n\n__pycache__\nenv\n\n\n根目录下初始化Git：\n\ngit init\n\n\n添加文件:\n\ngit add .\n\n\n提交并推送至github:\n\ngit commit -m 'Flask微服务项目 初始化提交'\ngit push ...\n",normalizedContent:"# 环境初始化\n\n 1. 首先建立项目文件夹，进入文件夹，使用 shift+鼠标右键，选择[在此处打开powershell窗口]。\n\n 2. 建立服务端项目文件夹:\n    \n    mkdir server_user\n    \n\n 3. 创建并启动虚拟环境:\n    \n    python -m virtualenv tddflask\n    .\\/tddflask/scripts/activate\n    \n\n 4. 安装flask：\n    \n    pip install flask\n    \n\n> 说明: 如果出现：[notice] a new release of pip is available:...字样提示，说明pip install版本不是最新。 可以执行：python.exe -m pip install --upgrade pip 升级\n\n\n# 添加路由\n\n使用vscode打开server_user文件夹，在根目录下新建__init__.py文件\n\nfrom flask import flask,jsonify\n\n#app初始化\napp=flask(__name__)\n\n@app.route('/startinfo',methods=['get'])\ndef start_info():\n    return jsonify({\n        'code':'000000000000',\n        'message':'ok'\n    })\n\n\n安装flask-script包，用于使用命令行来管理flask\n\npip install flask-script\n\n\n使用vscode，在server_user目录下新增:main.py文件：\n\nfrom flask_script import manager\nfrom __init__ import app\n\nmanager = manager(app)\n\nif __name__ == '__main__':\n    manager.run()\n\n\n在powershell中使用命令行启动:\n\npython main.py runserver\n\n\n> 此时如果出现no module named 'flask._compat'错误，说明flask_script版本可能过高。 此时可以减配，也可以到 /tddflask/lib/site-packages/flask_script/ 目录下的 init.py 文件第15行 将 from flask._compat import text_type改为 from flask_script._compat import text_type即可.\n\n在浏览器中打开 http://127.0.0.1:5000/startinfo，即可看到页面输出信息：\n\n{\"code\":\"000000000000\",\"message\":\"ok\"}\n\n\n\n# 配置启动设置\n\n根目录下使用vscode添加文件：config.py:\n\nclass baseconfig:\n    \"\"\"基础配置\"\"\"\n    debug=false\n    testing=false\n\nclass devconfig(baseconfig):\n    \"\"\"开发环境配置\"\"\"\n    debug=true\n\nclass testconfig(baseconfig):\n    \"\"\"测试环境配置\"\"\"\n    debug=true\n    testing=true\n\nclass prodconfig(baseconfig):\n    \"\"\"生产环境配置\"\"\"\n    debug=false\n\n\n修改__init__.py文件：\n\n# server/__init__.py\nfrom flask import flask,jsonify\nfrom config import devconfig,testconfig,prodconfig\n\n#app初始化\napp=flask(__name__)\n#环境配置\ncurrconfig=devconfig()\napp.config.from_object(currconfig)\n\n#路由设置\n@app.route('/startinfo',methods=['get'])\ndef start_info():\n    return jsonify({\n        'code':'000000000000',\n        'message':'ok'\n    })\n\n\n重新启动：\n\npython main.py runserver\n\n\n此时出现\n\n'''shell debug mode: on '''\n\n字样提示，标志debug模式已经打开。此时任何代码改动将即时地进行加载，不必再重新启动flask。\n\n\n# 保证依赖同步\n\n为了保证我们的项目依赖实时同步，我们将依赖包添加到一个名为 requirements.txt 的文件中\n\npip freeze > requirements.txt\n\n\n查看 requirements.txt 文件的内容\n\nautopep8==2.0.2\nclick==8.1.3\ncolorama==0.4.6\nflask==2.2.3\nflask-script==2.0.6\nitsdangerous==2.1.2\njinja2==3.1.2\nmarkupsafe==2.1.2\npycodestyle==2.10.0\nwerkzeug==2.2.3\n\n\n配置完毕，可以退出虚拟环境：\n\ndeactivate\n\n\n\n# git提交\n\n为提交git，项目根目录下新增 .gitignore 文件：\n\n__pycache__\nenv\n\n\n根目录下初始化git：\n\ngit init\n\n\n添加文件:\n\ngit add .\n\n\n提交并推送至github:\n\ngit commit -m 'flask微服务项目 初始化提交'\ngit push ...\n",charsets:{cjk:!0}},{title:"VSCode+Python+Flask+MySql 开发微服务",frontmatter:{title:"VSCode+Python+Flask+MySql 开发微服务",date:"2023-04-23T16:03:17.000Z",permalink:"/pages/Notes/Python/miniServer/000/"},regularPath:"/02.%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/03.Python/01.Python+Flask%E5%BC%80%E5%8F%91%E5%BE%AE%E6%9C%8D%E5%8A%A1/000.%E7%9B%AE%E5%BD%95.html",relativePath:"02.开发笔记/03.Python/01.Python+Flask开发微服务/000.目录.md",key:"v-3352041f",path:"/pages/Notes/Python/miniServer/000/",headers:[{level:4,title:"目录",slug:"目录",normalizedTitle:"目录",charIndex:2},{level:4,title:"环境初始化",slug:"环境初始化",normalizedTitle:"环境初始化",charIndex:8}],headersStr:"目录 环境初始化",content:"# 目录\n\n# 环境初始化",normalizedContent:"# 目录\n\n# 环境初始化",charsets:{cjk:!0}},{title:"Go语言入门教程",frontmatter:{title:"Go语言入门教程",date:"2023-04-09T09:55:22.000Z",permalink:"/pages/GoTour/002/"},regularPath:"/03.%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91/01.Go%E8%AF%AD%E8%A8%80%E6%96%87%E6%A1%A3%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91/03.Go%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B.html",relativePath:"03.中文翻译/01.Go语言文档中文翻译/03.Go入门教程.md",key:"v-427adef7",path:"/pages/GoTour/002/",headers:[{level:2,title:"Go语言入门教程",slug:"go语言入门教程",normalizedTitle:"go语言入门教程",charIndex:2},{level:3,title:"学习的先决条件",slug:"学习的先决条件",normalizedTitle:"学习的先决条件",charIndex:169},{level:3,title:"安装Go",slug:"安装go",normalizedTitle:"安装go",charIndex:46},{level:3,title:"写一些简单的Go代码",slug:"写一些简单的go代码",normalizedTitle:"写一些简单的go代码",charIndex:395},{level:3,title:"调用外部程序包的Go代码",slug:"调用外部程序包的go代码",normalizedTitle:"调用外部程序包的go代码",charIndex:1367},{level:3,title:"写更多的代码",slug:"写更多的代码",normalizedTitle:"写更多的代码",charIndex:2431}],headersStr:"Go语言入门教程 学习的先决条件 安装Go 写一些简单的Go代码 调用外部程序包的Go代码 写更多的代码",content:'# Go语言入门教程\n\n在本教程中，您将获得Go编程的简要介绍。在本课程中，您将：\n\n * 安装Go（如果您还没有安装）。\n * 写一些简单的“你好，世界”代码。\n * 使用go命令来运行代码。\n * 使用Go程序包发现工具查找可以在自己的代码中使用的程序包。\n * 调用外部模块的函数。\n\n> 注意：有关其他教程，请参见教程。\n\n\n# 学习的先决条件\n\n * 一些编程经验。这里的代码非常简单，但了解一些函数会有所帮助。\n * 用于编辑代码的工具。您拥有的任何文本编辑器都可以正常工作。大多数文本编辑器都很好地支持Go。最受欢迎的是VSCode（免费）、GoLand（付费）和Vim（免费）。\n * 一种命令终端。Go在Linux和Mac上以及Windows中的PowerShell或cmd上使用任何终端都能很好地工作。\n\n\n# 安装Go\n\n依据 Go语言的下载和安装 进行操作\n\n\n# 写一些简单的Go代码\n\n从Hello，World开始。\n\n 1. 打开一个终端窗口并cd到您的主目录。 在Linux或Mac上：\n\ncd\n\n在Windows上：\n\ncd %HOMEPATH%\n2. 为您的第一个Go源代码创建一个hello目录。\n\n例如，使用以下命令：\n\nmkdir hello  \ncd hello\n\n\n 3. 为代码启用依赖项跟踪。 当您的代码导入包含在其他模块中的包时，您可以通过代码自己的模块来管理这些依赖关系。该模块由一个go.mod文件定义，该文件跟踪提供这些包的模块。该go.mod文件与您的代码一起保存，并包括在您的源代码存储库中。\n\n要通过创建go.mod文件为代码启用依赖项跟踪，请运行go-mod-init命令，为其提供代码所在模块的名称。该名称是模块的模块路径。在大多数情况下，这将是保存源代码的存储库位置，例如github.com/mymodule。如果您计划发布模块供他人使用，则模块路径必须是Go工具可以下载模块的位置。\n\n就本教程而言，只需使用example.com/hello即可。\n\n$go mod init example.com/hello\n\ngo:creating new go.mod: module example.com/hello\n\n\n在文本编辑器中，创建一个文件hello.go，在其中编写代码。\n\n将以下代码粘贴到hello.go文件中并保存该文件。\n\npackage main\n\nimport "fmt"\n\nfunc main（）{\n\nfmt.Println（"Hello,World!"）\n\n}\n\n\n这是你的第一次编写的Go代码。在此代码中，您将：\n\n * 声明一个main包（包是对函数进行分组的一种方式，它由同一目录中的所有文件组成）。\n * 导入流行的fmt包，其中包含格式化文本的功能，包括打印到控制台。这个程序包是安装Go时得到的标准库程序包之一。\n * 实现一个main方法，将消息打印到控制台。当您运行主程序包时，默认情况下会执行该主函数。\n * 运行您的代码以查看问候语。\n\n$go run\nHello,World!\n\n\n * go-run命令是您使用go完成任务的众多go命令之一。你可以使用以下命令获取其他命令的列表：\n\n$go help\n\n\n\n# 调用外部程序包的Go代码\n\n当你的代码需要做一些可能已经被其他人实现的事情时，你可以寻找一个包含你可以在代码中使用的函数的包。\n\n 1. 使用来自外部模块的功能，使打印的消息更加有趣。\n    \n    1. 访问pkg.go.dev并搜索“quote”包。\n    2. 在搜索结果中找到并单击rsc.io/quote包（如果您看到rsc.io/quote/v3，请暂时忽略它）。\n    3. 在“Documentation”部分的“索引”下，记下可以从代码中调用的函数列表。您将使用Go功能。\n    4. 在代码页顶部，quote包包含在rsc.io/quote模块中。\n\n您可以使用pkg.go.dev网站查找已发布的模块，这些模块的包中有您可以在自己的代码中使用的功能。包发布在模块中，比如rsc.io/quote，其他人可以在其中使用它们。随着时间的推移，新版本会对模块进行改进，您可以升级代码以使用改进的版本。\n2. 在Go代码中，导入rsc.io/quote包并添加对其Go函数的调用。\n\n添加突出显示的行之后，您的代码应该包括以下内容：\n\npackage main\nimport "fmt"\nimport "rsc.io/quote"\n\nfunc main（）{\nfmt.Println(quote.Go())\n}\n\n\n\n3. 添加新模块的要求和操作。 Go将添加quote模块作为需求，以及用于验证模块的Go.sum文件。有关更多信息，请参阅 [Go modules Reference中的Authenticating modules](http://docscn.studygolang.com/ref/mod#authenticating)。\n\n$ go mod tidy\ngo: finding module for package rsc.io/quote\ngo: found rsc.io/quote in rsc.io/quote v1.5.2\n\n\n\n4. 运行您的代码以查看您正在调用的函数生成的消息。 ``` shell $go run Don\'t communicate by sharing memory, share memory by communicating. ``` 请注意，您的代码调用Go函数，打印出一条关于通信的即时消息。\n\n当您运行go mod tidy时，它找到并下载了包含您导入的包的rsc.io/quote模块。默认情况下，它下载最新版本v1.5.2。\n\n\n# 写更多的代码\n\n通过这个快速介绍，您安装了Go并学习了一些基本知识。要使用另一个教程编写更多的代码，请查看Create a Go模块。',normalizedContent:'# go语言入门教程\n\n在本教程中，您将获得go编程的简要介绍。在本课程中，您将：\n\n * 安装go（如果您还没有安装）。\n * 写一些简单的“你好，世界”代码。\n * 使用go命令来运行代码。\n * 使用go程序包发现工具查找可以在自己的代码中使用的程序包。\n * 调用外部模块的函数。\n\n> 注意：有关其他教程，请参见教程。\n\n\n# 学习的先决条件\n\n * 一些编程经验。这里的代码非常简单，但了解一些函数会有所帮助。\n * 用于编辑代码的工具。您拥有的任何文本编辑器都可以正常工作。大多数文本编辑器都很好地支持go。最受欢迎的是vscode（免费）、goland（付费）和vim（免费）。\n * 一种命令终端。go在linux和mac上以及windows中的powershell或cmd上使用任何终端都能很好地工作。\n\n\n# 安装go\n\n依据 go语言的下载和安装 进行操作\n\n\n# 写一些简单的go代码\n\n从hello，world开始。\n\n 1. 打开一个终端窗口并cd到您的主目录。 在linux或mac上：\n\ncd\n\n在windows上：\n\ncd %homepath%\n2. 为您的第一个go源代码创建一个hello目录。\n\n例如，使用以下命令：\n\nmkdir hello  \ncd hello\n\n\n 3. 为代码启用依赖项跟踪。 当您的代码导入包含在其他模块中的包时，您可以通过代码自己的模块来管理这些依赖关系。该模块由一个go.mod文件定义，该文件跟踪提供这些包的模块。该go.mod文件与您的代码一起保存，并包括在您的源代码存储库中。\n\n要通过创建go.mod文件为代码启用依赖项跟踪，请运行go-mod-init命令，为其提供代码所在模块的名称。该名称是模块的模块路径。在大多数情况下，这将是保存源代码的存储库位置，例如github.com/mymodule。如果您计划发布模块供他人使用，则模块路径必须是go工具可以下载模块的位置。\n\n就本教程而言，只需使用example.com/hello即可。\n\n$go mod init example.com/hello\n\ngo:creating new go.mod: module example.com/hello\n\n\n在文本编辑器中，创建一个文件hello.go，在其中编写代码。\n\n将以下代码粘贴到hello.go文件中并保存该文件。\n\npackage main\n\nimport "fmt"\n\nfunc main（）{\n\nfmt.println（"hello,world!"）\n\n}\n\n\n这是你的第一次编写的go代码。在此代码中，您将：\n\n * 声明一个main包（包是对函数进行分组的一种方式，它由同一目录中的所有文件组成）。\n * 导入流行的fmt包，其中包含格式化文本的功能，包括打印到控制台。这个程序包是安装go时得到的标准库程序包之一。\n * 实现一个main方法，将消息打印到控制台。当您运行主程序包时，默认情况下会执行该主函数。\n * 运行您的代码以查看问候语。\n\n$go run\nhello,world!\n\n\n * go-run命令是您使用go完成任务的众多go命令之一。你可以使用以下命令获取其他命令的列表：\n\n$go help\n\n\n\n# 调用外部程序包的go代码\n\n当你的代码需要做一些可能已经被其他人实现的事情时，你可以寻找一个包含你可以在代码中使用的函数的包。\n\n 1. 使用来自外部模块的功能，使打印的消息更加有趣。\n    \n    1. 访问pkg.go.dev并搜索“quote”包。\n    2. 在搜索结果中找到并单击rsc.io/quote包（如果您看到rsc.io/quote/v3，请暂时忽略它）。\n    3. 在“documentation”部分的“索引”下，记下可以从代码中调用的函数列表。您将使用go功能。\n    4. 在代码页顶部，quote包包含在rsc.io/quote模块中。\n\n您可以使用pkg.go.dev网站查找已发布的模块，这些模块的包中有您可以在自己的代码中使用的功能。包发布在模块中，比如rsc.io/quote，其他人可以在其中使用它们。随着时间的推移，新版本会对模块进行改进，您可以升级代码以使用改进的版本。\n2. 在go代码中，导入rsc.io/quote包并添加对其go函数的调用。\n\n添加突出显示的行之后，您的代码应该包括以下内容：\n\npackage main\nimport "fmt"\nimport "rsc.io/quote"\n\nfunc main（）{\nfmt.println(quote.go())\n}\n\n\n\n3. 添加新模块的要求和操作。 go将添加quote模块作为需求，以及用于验证模块的go.sum文件。有关更多信息，请参阅 [go modules reference中的authenticating modules](http://docscn.studygolang.com/ref/mod#authenticating)。\n\n$ go mod tidy\ngo: finding module for package rsc.io/quote\ngo: found rsc.io/quote in rsc.io/quote v1.5.2\n\n\n\n4. 运行您的代码以查看您正在调用的函数生成的消息。 ``` shell $go run don\'t communicate by sharing memory, share memory by communicating. ``` 请注意，您的代码调用go函数，打印出一条关于通信的即时消息。\n\n当您运行go mod tidy时，它找到并下载了包含您导入的包的rsc.io/quote模块。默认情况下，它下载最新版本v1.5.2。\n\n\n# 写更多的代码\n\n通过这个快速介绍，您安装了go并学习了一些基本知识。要使用另一个教程编写更多的代码，请查看create a go模块。',charsets:{cjk:!0}},{title:"序言和目录",frontmatter:{title:"序言和目录",date:"2023-04-08T20:24:41.000Z",permalink:"/pages/GoTour/000/"},regularPath:"/03.%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91/01.Go%E8%AF%AD%E8%A8%80%E6%96%87%E6%A1%A3%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91/01.%E5%BA%8F%E8%A8%80%E5%92%8C%E7%9B%AE%E5%BD%95.html",relativePath:"03.中文翻译/01.Go语言文档中文翻译/01.序言和目录.md",key:"v-328d6153",path:"/pages/GoTour/000/",headers:[{level:2,title:"Go中文文档",slug:"go中文文档",normalizedTitle:"go中文文档",charIndex:25},{level:2,title:"从此开始",slug:"从此开始",normalizedTitle:"从此开始",charIndex:214},{level:3,title:"Go语言的下载和安装",slug:"go语言的下载和安装",normalizedTitle:"go语言的下载和安装",charIndex:223},{level:3,title:"教程：从Hello World入门",slug:"教程-从hello-world入门",normalizedTitle:"教程：从hello world入门",charIndex:255},{level:3,title:"教程：创建模块",slug:"教程-创建模块",normalizedTitle:"教程：创建模块",charIndex:319},{level:3,title:"教程：使用Go和Gin开发RESTful API",slug:"教程-使用go和gin开发restful-api",normalizedTitle:"教程：使用go和gin开发restful api",charIndex:366},{level:3,title:"编写Web应用程序",slug:"编写web应用程序",normalizedTitle:"编写web应用程序",charIndex:444},{level:3,title:"如何编写Go代码",slug:"如何编写go代码",normalizedTitle:"如何编写go代码",charIndex:475},{level:3,title:"Go语言之旅",slug:"go语言之旅",normalizedTitle:"go语言之旅",charIndex:533},{level:2,title:"使用和理解Go语言",slug:"使用和理解go语言",normalizedTitle:"使用和理解go语言",charIndex:719},{level:3,title:"Go高效编程",slug:"go高效编程",normalizedTitle:"go高效编程",charIndex:733},{level:3,title:"编辑器插件和IDE",slug:"编辑器插件和ide",normalizedTitle:"编辑器插件和ide",charIndex:818},{level:3,title:"Go语言调试",slug:"go语言调试",normalizedTitle:"go语言调试",charIndex:860},{level:3,title:"Go语言相关性管理",slug:"go语言相关性管理",normalizedTitle:"go语言相关性管理",charIndex:892},{level:2,title:"访问数据库",slug:"访问数据库",normalizedTitle:"访问数据库",charIndex:943},{level:3,title:"教程：访问关系数据库",slug:"教程-访问关系数据库",normalizedTitle:"教程：访问关系数据库",charIndex:953},{level:3,title:"访问关系数据库",slug:"访问关系数据库",normalizedTitle:"访问关系数据库",charIndex:956},{level:3,title:"操作数据库",slug:"操作数据库",normalizedTitle:"操作数据库",charIndex:1029},{level:3,title:"执行不返回数据的SQL语句",slug:"执行不返回数据的sql语句",normalizedTitle:"执行不返回数据的sql语句",charIndex:1092},{level:3,title:"查询数据",slug:"查询数据",normalizedTitle:"查询数据",charIndex:1166},{level:3,title:"使用准备好的报表",slug:"使用准备好的报表",normalizedTitle:"使用准备好的报表",charIndex:1214},{level:3,title:"执行数据库事务",slug:"执行数据库事务",normalizedTitle:"执行数据库事务",charIndex:1284},{level:3,title:"取消正在进行的数据库操作",slug:"取消正在进行的数据库操作",normalizedTitle:"取消正在进行的数据库操作",charIndex:1353},{level:3,title:"管理连接",slug:"管理连接",normalizedTitle:"管理连接",charIndex:1427},{level:3,title:"避免SQL注入风险",slug:"避免sql注入风险",normalizedTitle:"避免sql注入风险",charIndex:1467},{level:2,title:"模块的开发",slug:"模块的开发",normalizedTitle:"模块的开发",charIndex:1516},{level:3,title:"开发和发布模块",slug:"开发和发布模块",normalizedTitle:"开发和发布模块",charIndex:1526},{level:3,title:"模块发布和版本控制工作流程",slug:"模块发布和版本控制工作流程",normalizedTitle:"模块发布和版本控制工作流程",charIndex:1586},{level:3,title:"管理模块源",slug:"管理模块源",normalizedTitle:"管理模块源",charIndex:1677},{level:3,title:"开发主要版本更新",slug:"开发主要版本更新",normalizedTitle:"开发主要版本更新",charIndex:1748},{level:3,title:"发布模块",slug:"发布模块",normalizedTitle:"发布模块",charIndex:1529},{level:3,title:"模块版本编号",slug:"模块版本编号",normalizedTitle:"模块版本编号",charIndex:1905},{level:2,title:"常见问题解答",slug:"常见问题解答",normalizedTitle:"常见问题解答",charIndex:1989},{level:2,title:"参考资源",slug:"参考资源",normalizedTitle:"参考资源",charIndex:2013},{level:3,title:"标准包文档",slug:"标准包文档",normalizedTitle:"标准包文档",charIndex:2022},{level:3,title:"Go命令文档",slug:"go命令文档",normalizedTitle:"go命令文档",charIndex:2043},{level:3,title:"语言规范",slug:"语言规范",normalizedTitle:"语言规范",charIndex:796},{level:3,title:"Go模块参考",slug:"go模块参考",normalizedTitle:"go模块参考",charIndex:2090},{level:3,title:"go.mod文件引用",slug:"go-mod文件引用",normalizedTitle:"go.mod文件引用",charIndex:2121},{level:3,title:"Go内存模型",slug:"go内存模型",normalizedTitle:"go内存模型",charIndex:2156},{level:3,title:"发布历史记录",slug:"发布历史记录",normalizedTitle:"发布历史记录",charIndex:2239},{level:2,title:"Go项目导游",slug:"go项目导游",normalizedTitle:"go项目导游",charIndex:2264},{level:2,title:"Go语言博文精选",slug:"go语言博文精选",normalizedTitle:"go语言博文精选",charIndex:2330},{level:3,title:"Go语言",slug:"go语言",normalizedTitle:"go语言",charIndex:223},{level:3,title:"Go语言包",slug:"go语言包",normalizedTitle:"go语言包",charIndex:2531},{level:3,title:"Go模块",slug:"go模块",normalizedTitle:"go模块",charIndex:2090},{level:3,title:"Go语言工具",slug:"go语言工具",normalizedTitle:"go语言工具",charIndex:2821},{level:2,title:"Go语言Wiki",slug:"go语言wiki",normalizedTitle:"go语言wiki",charIndex:3044},{level:2,title:"Go语言讲座",slug:"go语言讲座",normalizedTitle:"go语言讲座",charIndex:3125},{level:3,title:"Go语言之旅视频",slug:"go语言之旅视频",normalizedTitle:"go语言之旅视频",charIndex:3136},{level:3,title:"优雅自然的代码编写",slug:"优雅自然的代码编写",normalizedTitle:"优雅自然的代码编写",charIndex:3193},{level:3,title:"Go并发模式",slug:"go并发模式",normalizedTitle:"go并发模式",charIndex:2446},{level:3,title:"高级Go并发模式",slug:"高级go并发模式",normalizedTitle:"高级go并发模式",charIndex:3497},{level:3,title:"更多",slug:"更多",normalizedTitle:"更多",charIndex:1804},{level:2,title:"非英语文档",slug:"非英语文档",normalizedTitle:"非英语文档",charIndex:3583}],headersStr:"Go中文文档 从此开始 Go语言的下载和安装 教程：从Hello World入门 教程：创建模块 教程：使用Go和Gin开发RESTful API 编写Web应用程序 如何编写Go代码 Go语言之旅 使用和理解Go语言 Go高效编程 编辑器插件和IDE Go语言调试 Go语言相关性管理 访问数据库 教程：访问关系数据库 访问关系数据库 操作数据库 执行不返回数据的SQL语句 查询数据 使用准备好的报表 执行数据库事务 取消正在进行的数据库操作 管理连接 避免SQL注入风险 模块的开发 开发和发布模块 模块发布和版本控制工作流程 管理模块源 开发主要版本更新 发布模块 模块版本编号 常见问题解答 参考资源 标准包文档 Go命令文档 语言规范 Go模块参考 go.mod文件引用 Go内存模型 发布历史记录 Go项目导游 Go语言博文精选 Go语言 Go语言包 Go模块 Go语言工具 Go语言Wiki Go语言讲座 Go语言之旅视频 优雅自然的代码编写 Go并发模式 高级Go并发模式 更多 非英语文档",content:"> WARNING: 翻译草稿 未定稿!\n\n\n# Go中文文档\n\nGo编程语言是一个开源项目，旨在提高程序员的工作效率。\n\nGo表现力强、简洁、干净、高效。它的并发机制使编写程序变得容易，从而最大限度地利用多核和网络机器，而它的新型系统则实现了灵活和模块化的程序构建。Go可以快速编译为机器代码，但同时具有垃圾收集的便利性和运行时反射的功能。这是一种快速、静态类型化、编译的语言，感觉就像是一种动态类型化、解释的语言。\n\n\n# 从此开始\n\n\n# Go语言的下载和安装\n\n有关下载和安装Go的说明。->\n\n\n# 教程：从Hello World入门\n\n一个简短的Hello，World入门教程。了解一些Go代码、工具、包和模块。->\n\n\n# 教程：创建模块\n\n介绍函数、错误处理、数组、映射、单元测试和编译的简短主题教程。->\n\n\n# 教程：使用Go和Gin开发RESTful API\n\n介绍了使用Go和GinWebFramework编写RESTful web服务API的基础知识。\n\n\n# 编写Web应用程序\n\n构建一个简单的web应用程序。\n\n\n# 如何编写Go代码\n\n本文档解释了如何在模块中开发一组简单的Go包，并展示了如何使用Go命令来构建和测试包。\n\n\n# Go语言之旅\n\nGo语言的互动介绍分为三个部分。第一部分介绍了基本语法和数据结构；第二部分讨论了方法和接口；第三部分介绍了Go的并发原语。每一节都以一些练习作为结束，这样你就可以练习你所学到的东西。您可以在线参观，也可以使用以下软件在本地安装：\n\n    $go get golang.org/x/tour\n\n\n这将把编译后的二进制文件放在工作区的bin目录中。\n\n\n# 使用和理解Go语言\n\n\n# Go高效编程\n\n一份文档，提供了编写清晰、惯用的Go代码的技巧。对于任何新的Go语言程序员来说都是必读之作。它扩充了tour和语言规范，这两个规范都应该先阅读。\n\n\n# 编辑器插件和IDE\n\n一份文档，总结了常用的编辑器插件和支持Go的IDE。\n\n\n# Go语言调试\n\n总结了Go程序中诊断问题的工具和方法。\n\n\n# Go语言相关性管理\n\n当您的代码使用外部包时，这些包（作为模块分发）将成为Go程序的依赖项。\n\n\n# 访问数据库\n\n\n# 教程：访问关系数据库\n\n介绍使用Go和标准库中的数据库/sql包访问关系数据库的基本知识。\n\n\n# 访问关系数据库\n\nGo的数据访问功能概述。\n\n\n# 操作数据库\n\n您可以使用Go语言来执行数据库操作。打开带有数据库连接资源的操作对象后，该操作对象表示您管理的连接池。\n\n\n# 执行不返回数据的SQL语句\n\n对于可能更改数据库的SQL操作，包括SQL INSERT、UPDATE和DELETE，可以使用Exec方法。\n\n\n# 查询数据\n\n对于使用query或QueryRow方法从查询返回数据的SELECT语句。\n\n\n# 使用准备好的报表\n\n定义一个准备好的语句以供重复使用，可以避免每次代码执行数据库操作时重新创建语句的开销，从而帮助代码更快地运行。\n\n\n# 执行数据库事务\n\nsql.Tx导出表示事务特定语义的方法，包括Commit和Rollback，以及用于执行常见数据库操作的方法。\n\n\n# 取消正在进行的数据库操作\n\n使用context.context，您可以让应用程序的函数调用和服务提前停止工作，并在不再需要处理时返回错误。\n\n\n# 管理连接\n\n对于某些高级程序，您可能需要调整连接池参数或显式处理连接。\n\n\n# 避免SQL注入风险\n\n通过提供SQL参数值作为SQL包函数参数，可以避免SQL注入风险。\n\n\n# 模块的开发\n\n\n# 开发和发布模块\n\n您可以将相关的包收集到模块中，然后发布模块供其他开发人员使用。本主题概述了模块的开发和发布。\n\n\n# 模块发布和版本控制工作流程\n\n当您开发供其他开发人员使用的模块时，您可以遵循有助于确保使用该模块的开发人员获得可靠、一致的体验的工作流程。本主题介绍了该工作流中的高级步骤。\n\n\n# 管理模块源\n\n当您开发要发布的模块以供其他人使用时，您可以通过遵循本主题中描述的存储库约定来帮助确保您的模块更易于其他开发人员使用。\n\n\n# 开发主要版本更新\n\n主要版本更新可能会对模块的用户造成很大的破坏，因为它包括中断更改并代表新模块。在本主题中了解更多信息。\n\n\n# 发布模块\n\n当你想让其他开发人员可以使用一个模块时，你可以发布它，以便Go工具可以看到它。发布模块后，导入其包的开发人员将能够通过运行go-get等命令来解决对模块的依赖。\n\n\n# 模块版本编号\n\n模块的开发人员使用模块版本号的每一部分来表示版本的稳定性和向后兼容性。对于每个新版本，模块的发布版本号具体反映了自上一版本以来模块更改的性质。\n\n\n# 常见问题解答\n\nGo语言常见问题解答。\n\n\n# 参考资源\n\n\n# 标准包文档\n\nGo标准库的文档。\n\n\n# Go命令文档\n\nGo Cmd命令工具的文档。\n\n\n# 语言规范\n\n官方Go语言规范。\n\n\n# Go模块参考\n\nGo依赖关系管理系统的详细参考手册。\n\n\n# go.mod文件引用\n\ngo.mod文件中包含的指令的参考。\n\n\n# Go内存模型\n\n一个指定条件的文档，在该条件下，可以保证在一个goroutine中读取一个变量，以观察在另一个gorroutine中写入同一变量所产生的值。\n\n\n# 发布历史记录\n\nGo版本之间的更改摘要。\n\n\n# Go项目导游\n\nGO项目导游。\n\n * Go的第一个类函数\n * 生成任意文本：一种马尔可夫链算法\n * 通过通信共享内存\n\n\n# Go语言博文精选\n\nGo语言官方博客，以Go开发团队和嘉宾的深度文章为特色。\n\n\n# Go语言\n\n * JSON-RPC：接口的故事\n * Go的定义语法\n * Go语言错误处理的Defer, Panic, 和Recover\n * Go并发模式：超时，继续\n * Go语言切片：Slice的用法和内部结构\n * GIF解码器：Go语言界面开发练习\n * Go语言和错误处理\n * 组织Go代码\n\n\n# Go语言包\n\n * JSON和Go————使用JSON包。\n * gob包的数据采集操作-gob包的设计和使用。\n * 反射的规则-reflect 包的基本原理。\n * Go图像包-图像包的基本原理。\n * Go图像/绘图软件包-图像/绘图程序包的基本原理。\n\n\n# Go模块\n\n * 使用Go模块-介绍如何在一个简单的项目中使用模块。\n * 迁移到Go模块-将现有项目转换为使用模块。\n * 发布Go模块-如何向其他人提供新版本的模块。\n * Go模块：v2和Beyond-创建和发布主要版本2及更高版本。\n * 保持模块兼容-如何保持模块与以前的次要/补丁版本兼容。\n\n\n# Go语言工具\n\n * 关于Go命令——我们为什么写它，它是什么，它不是什么，以及如何使用它。\n * 使用GDB调试Go代码\n * 数据竞赛检测器-数据竞赛检测器手册。\n * Go汇编程序快速指南-介绍Go语言使用的汇编程序。\n * C语言来加油！-使用cgo链接C代码。\n * Godoc：编写Go代码——为Godoc编写好的文档。\n * 评测Go程序\n * race detector检测器简介-race detector检测器简介。\n\n\n# Go语言Wiki\n\nGo Wiki由Go社区维护，包括有关Go语言、工具和其他资源的文章。\n\n有关更多Go语言学习资源，请参阅Wiki上的“学习”页面。\n\n\n# Go语言讲座\n\n\n# Go语言之旅视频\n\n让Go快速、有趣、高效的三件事是：接口、反射和并发。构建一个玩具网络爬虫来演示这些。\n\n\n# 优雅自然的代码编写\n\nGo的主要设计目标之一是代码适应性；采用一个简单的设计并以一种干净自然的方式构建它应该很容易。在这次演讲中，Andrew Gerrand描述了一个简单的“聊天轮盘赌”服务器，它匹配成对的传入TCP连接，然后使用Go的并发机制、接口和标准库，通过web接口和其他功能对其进行扩展。虽然程序的功能发生了巨大变化，但Go的灵活性在其发展过程中保留了原始设计。\n\n\n# Go并发模式\n\n并发性是设计高性能网络服务的关键。Go的并发原语（goroutines和channel）提供了一种简单高效的方式来表达并发执行。在这次演讲中，我们将看到如何用简单的Go代码优雅地解决棘手的并发问题。\n\n\n# 高级Go并发模式\n\n本次讲座扩展了Go并发模式讲座，以深入了解Go的并发原语。\n\n\n# 更多\n\n请参阅Go Talks网站和wiki页面了解更多Go Talks。\n\n\n# 非英语文档\n\n有关本地化文档，请参阅Wiki上的非英语页面。",normalizedContent:"> warning: 翻译草稿 未定稿!\n\n\n# go中文文档\n\ngo编程语言是一个开源项目，旨在提高程序员的工作效率。\n\ngo表现力强、简洁、干净、高效。它的并发机制使编写程序变得容易，从而最大限度地利用多核和网络机器，而它的新型系统则实现了灵活和模块化的程序构建。go可以快速编译为机器代码，但同时具有垃圾收集的便利性和运行时反射的功能。这是一种快速、静态类型化、编译的语言，感觉就像是一种动态类型化、解释的语言。\n\n\n# 从此开始\n\n\n# go语言的下载和安装\n\n有关下载和安装go的说明。->\n\n\n# 教程：从hello world入门\n\n一个简短的hello，world入门教程。了解一些go代码、工具、包和模块。->\n\n\n# 教程：创建模块\n\n介绍函数、错误处理、数组、映射、单元测试和编译的简短主题教程。->\n\n\n# 教程：使用go和gin开发restful api\n\n介绍了使用go和ginwebframework编写restful web服务api的基础知识。\n\n\n# 编写web应用程序\n\n构建一个简单的web应用程序。\n\n\n# 如何编写go代码\n\n本文档解释了如何在模块中开发一组简单的go包，并展示了如何使用go命令来构建和测试包。\n\n\n# go语言之旅\n\ngo语言的互动介绍分为三个部分。第一部分介绍了基本语法和数据结构；第二部分讨论了方法和接口；第三部分介绍了go的并发原语。每一节都以一些练习作为结束，这样你就可以练习你所学到的东西。您可以在线参观，也可以使用以下软件在本地安装：\n\n    $go get golang.org/x/tour\n\n\n这将把编译后的二进制文件放在工作区的bin目录中。\n\n\n# 使用和理解go语言\n\n\n# go高效编程\n\n一份文档，提供了编写清晰、惯用的go代码的技巧。对于任何新的go语言程序员来说都是必读之作。它扩充了tour和语言规范，这两个规范都应该先阅读。\n\n\n# 编辑器插件和ide\n\n一份文档，总结了常用的编辑器插件和支持go的ide。\n\n\n# go语言调试\n\n总结了go程序中诊断问题的工具和方法。\n\n\n# go语言相关性管理\n\n当您的代码使用外部包时，这些包（作为模块分发）将成为go程序的依赖项。\n\n\n# 访问数据库\n\n\n# 教程：访问关系数据库\n\n介绍使用go和标准库中的数据库/sql包访问关系数据库的基本知识。\n\n\n# 访问关系数据库\n\ngo的数据访问功能概述。\n\n\n# 操作数据库\n\n您可以使用go语言来执行数据库操作。打开带有数据库连接资源的操作对象后，该操作对象表示您管理的连接池。\n\n\n# 执行不返回数据的sql语句\n\n对于可能更改数据库的sql操作，包括sql insert、update和delete，可以使用exec方法。\n\n\n# 查询数据\n\n对于使用query或queryrow方法从查询返回数据的select语句。\n\n\n# 使用准备好的报表\n\n定义一个准备好的语句以供重复使用，可以避免每次代码执行数据库操作时重新创建语句的开销，从而帮助代码更快地运行。\n\n\n# 执行数据库事务\n\nsql.tx导出表示事务特定语义的方法，包括commit和rollback，以及用于执行常见数据库操作的方法。\n\n\n# 取消正在进行的数据库操作\n\n使用context.context，您可以让应用程序的函数调用和服务提前停止工作，并在不再需要处理时返回错误。\n\n\n# 管理连接\n\n对于某些高级程序，您可能需要调整连接池参数或显式处理连接。\n\n\n# 避免sql注入风险\n\n通过提供sql参数值作为sql包函数参数，可以避免sql注入风险。\n\n\n# 模块的开发\n\n\n# 开发和发布模块\n\n您可以将相关的包收集到模块中，然后发布模块供其他开发人员使用。本主题概述了模块的开发和发布。\n\n\n# 模块发布和版本控制工作流程\n\n当您开发供其他开发人员使用的模块时，您可以遵循有助于确保使用该模块的开发人员获得可靠、一致的体验的工作流程。本主题介绍了该工作流中的高级步骤。\n\n\n# 管理模块源\n\n当您开发要发布的模块以供其他人使用时，您可以通过遵循本主题中描述的存储库约定来帮助确保您的模块更易于其他开发人员使用。\n\n\n# 开发主要版本更新\n\n主要版本更新可能会对模块的用户造成很大的破坏，因为它包括中断更改并代表新模块。在本主题中了解更多信息。\n\n\n# 发布模块\n\n当你想让其他开发人员可以使用一个模块时，你可以发布它，以便go工具可以看到它。发布模块后，导入其包的开发人员将能够通过运行go-get等命令来解决对模块的依赖。\n\n\n# 模块版本编号\n\n模块的开发人员使用模块版本号的每一部分来表示版本的稳定性和向后兼容性。对于每个新版本，模块的发布版本号具体反映了自上一版本以来模块更改的性质。\n\n\n# 常见问题解答\n\ngo语言常见问题解答。\n\n\n# 参考资源\n\n\n# 标准包文档\n\ngo标准库的文档。\n\n\n# go命令文档\n\ngo cmd命令工具的文档。\n\n\n# 语言规范\n\n官方go语言规范。\n\n\n# go模块参考\n\ngo依赖关系管理系统的详细参考手册。\n\n\n# go.mod文件引用\n\ngo.mod文件中包含的指令的参考。\n\n\n# go内存模型\n\n一个指定条件的文档，在该条件下，可以保证在一个goroutine中读取一个变量，以观察在另一个gorroutine中写入同一变量所产生的值。\n\n\n# 发布历史记录\n\ngo版本之间的更改摘要。\n\n\n# go项目导游\n\ngo项目导游。\n\n * go的第一个类函数\n * 生成任意文本：一种马尔可夫链算法\n * 通过通信共享内存\n\n\n# go语言博文精选\n\ngo语言官方博客，以go开发团队和嘉宾的深度文章为特色。\n\n\n# go语言\n\n * json-rpc：接口的故事\n * go的定义语法\n * go语言错误处理的defer, panic, 和recover\n * go并发模式：超时，继续\n * go语言切片：slice的用法和内部结构\n * gif解码器：go语言界面开发练习\n * go语言和错误处理\n * 组织go代码\n\n\n# go语言包\n\n * json和go————使用json包。\n * gob包的数据采集操作-gob包的设计和使用。\n * 反射的规则-reflect 包的基本原理。\n * go图像包-图像包的基本原理。\n * go图像/绘图软件包-图像/绘图程序包的基本原理。\n\n\n# go模块\n\n * 使用go模块-介绍如何在一个简单的项目中使用模块。\n * 迁移到go模块-将现有项目转换为使用模块。\n * 发布go模块-如何向其他人提供新版本的模块。\n * go模块：v2和beyond-创建和发布主要版本2及更高版本。\n * 保持模块兼容-如何保持模块与以前的次要/补丁版本兼容。\n\n\n# go语言工具\n\n * 关于go命令——我们为什么写它，它是什么，它不是什么，以及如何使用它。\n * 使用gdb调试go代码\n * 数据竞赛检测器-数据竞赛检测器手册。\n * go汇编程序快速指南-介绍go语言使用的汇编程序。\n * c语言来加油！-使用cgo链接c代码。\n * godoc：编写go代码——为godoc编写好的文档。\n * 评测go程序\n * race detector检测器简介-race detector检测器简介。\n\n\n# go语言wiki\n\ngo wiki由go社区维护，包括有关go语言、工具和其他资源的文章。\n\n有关更多go语言学习资源，请参阅wiki上的“学习”页面。\n\n\n# go语言讲座\n\n\n# go语言之旅视频\n\n让go快速、有趣、高效的三件事是：接口、反射和并发。构建一个玩具网络爬虫来演示这些。\n\n\n# 优雅自然的代码编写\n\ngo的主要设计目标之一是代码适应性；采用一个简单的设计并以一种干净自然的方式构建它应该很容易。在这次演讲中，andrew gerrand描述了一个简单的“聊天轮盘赌”服务器，它匹配成对的传入tcp连接，然后使用go的并发机制、接口和标准库，通过web接口和其他功能对其进行扩展。虽然程序的功能发生了巨大变化，但go的灵活性在其发展过程中保留了原始设计。\n\n\n# go并发模式\n\n并发性是设计高性能网络服务的关键。go的并发原语（goroutines和channel）提供了一种简单高效的方式来表达并发执行。在这次演讲中，我们将看到如何用简单的go代码优雅地解决棘手的并发问题。\n\n\n# 高级go并发模式\n\n本次讲座扩展了go并发模式讲座，以深入了解go的并发原语。\n\n\n# 更多\n\n请参阅go talks网站和wiki页面了解更多go talks。\n\n\n# 非英语文档\n\n有关本地化文档，请参阅wiki上的非英语页面。",charsets:{cjk:!0}},{title:"Go模块教程",frontmatter:{title:"Go模块教程",date:"2023-04-10T14:59:34.000Z",permalink:"/pages/GoTour/003/"},regularPath:"/03.%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91/01.Go%E8%AF%AD%E8%A8%80%E6%96%87%E6%A1%A3%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91/04.Go%E6%A8%A1%E5%9D%97%E6%95%99%E7%A8%8B.html",relativePath:"03.中文翻译/01.Go语言文档中文翻译/04.Go模块教程.md",key:"v-148f6fd2",path:"/pages/GoTour/003/",headers:[{level:2,title:"创建你的 Go 模块",slug:"创建你的-go-模块",normalizedTitle:"创建你的 go 模块",charIndex:2},{level:3,title:"学习准备",slug:"学习准备",normalizedTitle:"学习准备",charIndex:455},{level:3,title:"开发一个其他人也能使用的模块",slug:"开发一个其他人也能使用的模块",normalizedTitle:"开发一个其他人也能使用的模块",charIndex:667},{level:2,title:"从其他模块中调用你的代码",slug:"从其他模块中调用你的代码",normalizedTitle:"从其他模块中调用你的代码",charIndex:2344},{level:2,title:"返回与错误处理",slug:"返回与错误处理",normalizedTitle:"返回与错误处理",charIndex:4795},{level:2,title:"返回随机问候语",slug:"返回随机问候语",normalizedTitle:"返回随机问候语",charIndex:6865},{level:2,title:"为多人返回问候语",slug:"为多人返回问候语",normalizedTitle:"为多人返回问候语",charIndex:9508},{level:2,title:"创建单元测试",slug:"创建单元测试",normalizedTitle:"创建单元测试",charIndex:13074},{level:2,title:"Go 应用程序的编译和安装",slug:"go-应用程序的编译和安装",normalizedTitle:"go 应用程序的编译和安装",charIndex:15870}],headersStr:"创建你的 Go 模块 学习准备 开发一个其他人也能使用的模块 从其他模块中调用你的代码 返回与错误处理 返回随机问候语 为多人返回问候语 创建单元测试 Go 应用程序的编译和安装",content:'# 创建你的 Go 模块\n\n这是教程的第一部分，介绍了 Go 语言的一些基本功能。如果你刚开始使用Go语言，一定要看一下教程：Go 入门，它介绍了 Go 命令、Go 模块和非常简单的 Go 代码。\n\n在本教程中，您将创建两个模块。第一种是打算由其他库或应用程序导入的库。第二个是将使用第一个的调用方应用程序。\n\n本教程的顺序包括七个简短的主题，每个主题都说明了语言的不同部分。\n\n 1. 创建一个模块——编写一个小模块，其中包含可以从另一个模块调用的函数。\n 2. 从另一个模块调用您的代码--导入并使用您的新模块。\n 3. 返回并处理错误--添加简单的错误处理。\n 4. 返回一个随机的 greetings——处理切片中的数据（Go 的动态大小数组）。\n 5. 为多个人返回 greetings--将键/值对存储在映射中。\n 6. 添加测试--使用 Go 内置的单元测试功能来测试代码。\n 7. 编译并安装应用程序--在本地编译并安装代码。\n\n> 注意: 有关其他课程, 参见 Go 语言中文文档.\n\n\n# 学习准备\n\n * 一些编程经验。这里的代码非常简单，但了解函数、循环和数组会有所帮助。\n * 用于编辑代码的工具。您拥有的任何文本编辑器都可以正常工作。大多数文本编辑器都很好地支持 Go。最受欢迎的是 VSCode（免费）、GoLand（付费）和 Vim（免费）。\n * 一个命令终端。Go 在 Linux 和 Mac 上以及 Windows 中的 PowerShell 或 cmd 上使用任何终端都能很好地工作。\n\n\n# 开发一个其他人也能使用的模块\n\n首先创建 Go 模块。在一个模块中，您可以为一组离散且有用的函数收集一个或多个相关的包。例如，您可以创建一个包含包的模块，这些包具有进行财务分析的功能，以便其他编写财务应用程序的人可以使用您的工作。有关开发模块的更多信息，请参阅开发和发布模块。\n\nGo 代码被分组到包中，包被分组到模块中。您的模块指定运行代码所需的依赖项，包括 Go 版本及其所需的一组其他模块。\n\n当您在模块中添加或改进功能时，您将发布模块的新版本。编写调用模块中函数的代码的开发人员可以导入模块的更新包，并在将其投入生产使用之前使用新版本进行测试。\n\n 1. 打开一个命令提示符并 cd 到您的主目录。 在 Linux 或 Mac 上：\n\ncd\n\n\n在 Windows 上：\n\ncd %HOMEPATH%\n\n\n 2. 为 Go 模块的源代码创建一个主目录。\n\n例如，在主目录中使用以下命令：\n\nmkdir greetings\ncd greetings\n\n\n 3. 使用 go-mod-init 命令初始化模块。\n\n运行 go-mod-init 命令，给它你的模块路径——在这里，使用 example.com/greetings。如果你发布了一个模块，这必须是 go 工具可以下载你的模块的路径。那将是您的代码存储库。\n\n$ go mod init example.com/greetings\ngo: creating new go.mod: module example.com/greetings\n\n\ngo-mod-init 命令创建一个 go.mod 文件来跟踪代码的依赖关系。到目前为止，该文件只包括模块的名称和代码支持的 Go 版本。但当你添加依赖项时，go.mod 文件会列出你的代码所依赖的版本。这可以保持构建的可复制性，并让你直接控制要使用的模块版本。\n\n 4. 在文本编辑器中，创建一个用于编写代码的文件，并将其命名为 greetings.go。\n 5. 将以下代码粘贴到 greetings.go 文件中并保存该文件。\n\npackage greetings\n\nimport "fmt"\n\n// Hello returns a greeting for the named person.\nfunc Hello(name string) string {\n    // Return a greeting that embeds the name in a message.\n    message := fmt.Sprintf("Hi, %v. Welcome!", name)\n    return message\n}\n\n\n这是您的第一份模块代码。它会向任何需要问候的来访者返回 greetings。您将在下一步中编写调用此函数的代码。\n\n在此代码中，您：\n\n * 声明一个 greetings 包以容纳相关函数。\n * 实现 Hello 函数以返回 greetings。\n * 此函数接受一个类型为字符串的名称参数。该函数还返回一个字符串。在 Go 中，名称以大写字母开头的函数可以由不在同一个包中的函数调用。这在 Go 中被称为导出名称。有关导出名称的详细信息，请参阅 Go tour 中的导出名称。\n   \n * 声明一个消息变量来保存您的 greetings。 在 Go 中，：=运算符是在一行中声明和初始化变量的快捷方式（Go 使用右侧的值来确定变量的类型）。从长远来看，你可能会这样写：\n\nvar message string\nmessage = fmt.Sprintf("Hi, %v. Welcome!", name)\n\n\n\n*使用fmt包的Sprintf函数可以创建一条问候消息。第一个参数是一个格式字符串，Sprintf将name参数的值替换为%v格式谓词。插入name参数的值将完成greetings文本。 * 将格式化的greetings文本返回给呼叫者。\n\n下一课，您将从另一个模块调用此函数。\n\n\n# 从其他模块中调用你的代码\n\n在上一节中，您创建了一个 grteeings 模块。在本节中，您将编写代码来调用刚刚编写的模块中的 Hello 函数。您将编写可以作为应用程序执行的代码，并调用 grteeings 模块中的代码。\n\n> 注意：本主题是从创建 Go 模块开始的多部分教程的一部分。\n\n 1. 为 Go 模块的源代码创建一个 hello 目录。\n\n创建此目录后，您应该在层次结构的同一级别同时拥有 hello 和 greetings 目录，如下所示：\n\n<home>/\n |-- greetings/\n |-- hello/\n\n\n例如，如果命令提示符位于 greetings 目录中，则可以使用以下命令：\n\ncd ..\nmkdir hello\ncd hello\n\n\n 2. 为即将编写的代码启用依赖项跟踪。 要为代码启用依赖项跟踪，请运行 go-mod-init 命令，为其提供代码所在模块的名称。\n\n出于本教程的目的，请使用 example.com/hello 作为模块路径。\n\n$ go mod init example.com/hello\ngo: creating new go.mod: module example.com/hello\n\n\n 3. 在文本编辑器的 hello 目录中，创建一个用于编写代码的文件，并将其命名为 hello.go。\n 4. 编写代码调用 Hello 函数，然后打印函数的返回值。 要做到这一点，请将以下代码粘贴到 hello.go 中。\n\npackage main\nimport (\n    "fmt"\n\n    "example.com/greetings"\n)\nfunc main() {\n    // Get a greeting message and print it.\n    message := greetings.Hello("Gladys")\n    fmt.Println(message)\n}\n\n\n在此代码中，您：\n\n * 声明一个主程序包。在 Go 中，作为应用程序执行的代码必须在主包中。\n * 导入两个包：example.com/greetings 和 fmt 包。这使您的代码可以访问这些包中的函数。导入 example.com/greetings（包含在您之前创建的模块中的包）可以访问 Hello 函数。您还可以导入 fmt，它具有处理输入和输出文本的功能（例如将文本打印到控制台）。\n * 通过调用问候软件包的 Hello 功能来获得返回的 greetings。\n\n 5. 编辑 example.com/hello 模块以使用您本地的 example.com/hellos 模块。\n\n对于生产使用，您可以从其存储库中发布 example.com/helles 模块（带有反映其发布位置的模块路径），Go 工具可以在那里找到它来下载。目前，由于您尚未发布该模块，您需要调整 example.com/hello 模块，以便它可以在本地文件系统中找到 example.com/hellos 代码。\n\n要做到这一点，请使用 go mod edit 命令编辑 example.com/hello 模块，将 go 工具从其模块路径（模块不在的地方）重定向到本地目录（模块所在的地方）。\n\n 1. 在 hello 目录中的命令提示符下，运行以下命令：\n\ngo mod edit -replace example.com/greetings=../greetings\n\n\n该命令指定 example.com/greetings 应替换为../greetings，用于查找依赖项。运行该命令后，hello 目录中的 go.mod 文件应包含一个 replace 指令：\n\nmodule example.com/hello\ngo 1.16\nreplace example.com/greetings => ../greetings\n\n\n 2. 在 hello 目录中的命令提示符下，运行 go mod 整洁命令来同步 example.com/hello 模块的依赖项，添加代码所需但尚未在模块中跟踪的依赖项。\n\ngo mod tidy\ngo: found example.com/greetings in example.com/greetings v0.0.0-00010101000000-000000000000\n\n\n命令完成后，example.com/hello 模块的 go.mod 文件应该如下所示：\n\nmodule example.com/hello\ngo 1.16\nreplace example.com/greetings => ../greetings\nrequire example.com/greetings v0.0.0-00010101000000-000000000000\n\n\n该命令在 greetings 目录中找到了本地代码，然后添加了一个 require 指令，指定 example.com/hello 需要 example.com/greetings。您在 hello.go 中导入 greetings 包时创建了此依赖项。\n\n模块路径后面的数字是一个伪版本号——一个生成的数字，用来代替语义版本号（模块还没有）。\n\n要引用已发布的模块，go.mod 文件通常会省略 replace 指令，并使用末尾带有标记版本号的 require 指令。\n\nrequire example.com/greetings v1.1.0\n\n\n有关版本号的更多信息，请参阅模块版本号。\n\n 6. 在 hello 目录中的命令提示符下，运行您的代码以确认它是否工作。\n\n$ go run .\nHi, Gladys. Welcome!\n\n\n恭喜！您已经编写了两个功能模块。\n\n在下一个主题中，您将添加一些错误处理。\n\n\n# 返回与错误处理\n\n处理错误是实体代码的一个基本特征。在本节中，您将添加一些代码，从 greetings 模块返回一个错误，然后在调用者中进行处理。\n\n> 注意：本主题是从创建 Go 模块开始的多部分教程的一部分。\n\n 1. 在 greetings/greetings.go 中，添加下面突出显示的代码。\n\n如果你不知道该向谁打招呼，那么问候是没有意义的。如果名称为空，则向调用方返回一个错误。将以下代码复制到 greetings.go 中并保存该文件。\n\npackage greetings\n\nimport (\n    "errors"\n    "fmt"\n)\n\n// Hello returns a greeting for the named person.\nfunc Hello(name string) (string, error) {\n    // If no name was given, return an error with a message.\n    if name == "" {\n        return "", errors.New("empty name")\n    }\n\n    // If a name was received, return a value that embeds the name\n    // in a greeting message.\n    message := fmt.Sprintf("Hi, %v. Welcome!", name)\n    return message, nil\n}\n\n\n在此代码中，您：\n\n * 更改函数，使其返回两个值：一个字符串和一个错误。您的调用者将检查第二个值以查看是否发生错误。（任何 Go 函数都可以返回多个值。有关详细信息，请参阅Effective Go.。）\n * 导入 Go 标准库错误包，以便您可以使用其 errors.New 函数。\n * 添加 if 语句以检查无效请求（名称应为空字符串），如果请求无效则返回错误。errors.New 函数返回一个错误，其中包含您的消息。\n * 在成功返回中添加 nil（表示没有错误）作为第二个值。这样，调用者就可以看到函数成功了。\n\n 2. 在 hello/hello.go 文件中，处理 hello 函数现在返回的错误以及非错误值。\n\n将以下代码粘贴到 hello.go 中。\n\npackage main\n\nimport (\n    "fmt"\n    "log"\n\n    "example.com/greetings"\n)\n\nfunc main() {\n    // Set properties of the predefined Logger, including\n    // the log entry prefix and a flag to disable printing\n    // the time, source file, and line number.\n    log.SetPrefix("greetings: ")\n    log.SetFlags(0)\n\n    // Request a greeting message.\n    message, err := greetings.Hello("")\n    // If an error was returned, print it to the console and\n    // exit the program.\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // If no error was returned, print the returned message\n    // to the console.\n    fmt.Println(message)\n}\n\n\n在此代码中，您：\n\n * 将 log 日志包配置为在其日志消息的开头打印命令名（“问候语：”），不带时间戳或源文件信息。\n * 将两个 Hello 返回值（包括错误）分配给变量。\n * 将 Hello 参数从 Gladys 的名称更改为空字符串，这样您就可以尝试错误处理代码。\n * 查找非零错误值。在这种情况下继续下去是没有意义的。\n * 使用标准库的 log 包中的函数来输出错误信息。如果出现错误，则使用 log 日志包的 Fatal 函数打印错误并停止程序。\n\n 3. 在 hello 目录的命令行中，运行 hello.go 以确认代码是否有效。\n\n现在您传入了一个空名称，您将得到一个错误。\n\n$ go run .\ngreetings: empty name\nexit status 1\n\n\n这是 Go 中常见的错误处理：将错误作为值返回，以便调用方可以检查它。\n\n接下来，您将使用 Go 切片来返回随机选择的问候语。\n\n\n# 返回随机问候语\n\n在本节中，您将更改代码，使其不再每次返回一个问候语，而是返回几个预定义的问候语消息中的一个。\n\n> 注意：本主题是从创建 Go 模块开始的多部分教程的一部分。\n\n为此，您将使用 Go 切片类型。切片就像一个数组，只是它的大小随着添加和删除项目而动态变化。切片（Slice）是 Go 语言最有用的类型之一。\n\n您将添加一个小片段来包含三条问候消息，然后让代码随机返回其中一条消息。有关切片（Slice）的更多信息，请参阅 Go 官方博客中的Go 切片。\n\n在 greetings/greetings.go 中，更改代码，使其看起来如下所示。\n\npackage greetings\n\nimport (\n    "errors"\n    "fmt"\n    "math/rand"\n    "time"\n)\n\n// Hello returns a greeting for the named person.\nfunc Hello(name string) (string, error) {\n    // If no name was given, return an error with a message.\n    if name == "" {\n        return name, errors.New("empty name")\n    }\n    // Create a message using a random format.\n    message := fmt.Sprintf(randomFormat(), name)\n    return message, nil\n}\n\n// init sets initial values for variables used in the function.\nfunc init() {\n    rand.Seed(time.Now().UnixNano())\n}\n\n// randomFormat returns one of a set of greeting messages. The returned\n// message is selected at random.\nfunc randomFormat() string {\n    // A slice of message formats.\n    formats := []string{\n        "Hi, %v. Welcome!",\n        "Great to see you, %v!",\n        "Hail, %v! Well met!",\n    }\n\n    // Return a randomly selected message format by specifying\n    // a random index for the slice of formats.\n    return formats[rand.Intn(len(formats))]\n}\n\n\n在此代码中，您：\n\n * 添加一个 randomFormat 函数，该函数可为问候语返回随机选择的格式。请注意，randomFormat 以小写字母开头，使其只能由自己包中的代码访问（换句话说，它不导出）。\n * 在 randomFormat 中，用三种消息格式声明一个 formats 切片。在声明切片时，可以省略括号中的大小，如下所示：[]字符串。这告诉 Go，片下面的数组大小可以动态更改。\n * 使用 math/rand 包生成一个随机数，用于从切片中选择项目。\n * 添加一个 init 函数，用当前时间为 rand 包设定种子。Go 在初始化全局变量后，在程序启动时自动执行 init 函数。有关 init 函数的更多信息，请参阅Effective Go。\n * 在 Hello 中，调用 randomFormat 函数来获取要返回的消息的格式，然后将格式和名称值一起使用来创建消息。\n * 像以前一样返回消息（或错误）。\n\n 2. 在 hello/hello.go 中，更改代码，使其看起来如下所示。\n\n您只是将 Gladys 的名字（或者其他名字，如果您愿意的话）作为参数添加到 Hello.go 中的 Hello 函数调用中。\n\npackage main\n\nimport (\n    "fmt"\n    "log"\n\n    "example.com/greetings"\n)\n\nfunc main() {\n    // Set properties of the predefined Logger, including\n    // the log entry prefix and a flag to disable printing\n    // the time, source file, and line number.\n    log.SetPrefix("greetings: ")\n    log.SetFlags(0)\n\n    // Request a greeting message.\n    message, err := greetings.Hello("Gladys")\n    // If an error was returned, print it to the console and\n    // exit the program.\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // If no error was returned, print the returned message\n    // to the console.\n    fmt.Println(message)\n}\n\n\n 3. 在 hello 目录的命令行中，运行 hello.go 以确认代码是否有效。多次运行它，可以注意到问候语发生了变化。\n\n$ go run .\nGreat to see you, Gladys!\n\n$ go run .\nHi, Gladys. Welcome!\n\n$ go run .\nHail, Gladys! Well met!\n\n\n接下来，您将使用一个 Slice 切片来问候多个人。\n\n\n# 为多人返回问候语\n\n在您将对模块代码进行的最后一次更改中，您将添加在一个请求中获得多人问候的支持功能。换句话说，您将处理多值输入，然后将该输入中的值与多值输出配对。要做到这一点，您需要将一组名称传递给一个函数，该函数可以为每个名称返回一个问候语。\n\n> 注意：本主题是从创建 Go 模块开始的多部分教程的一部分。\n\n但有一个问题。将 Hello 函数的参数从单个名称更改为一组名称将更改函数的签名。如果您已经发布了 example.com/greetings 模块，并且用户已经编写了调用 Hello 的代码，那么这种更改将破坏他们的程序。\n\n在这种情况下，更好的选择是用不同的名称编写一个新函数。新功能将采用多个参数。这保留了旧功能以实现向后兼容性。\n\n 1. 在 greetings/greetings.go 中，更改代码，使其看起来如下所示:\n\npackage greetings\n\nimport (\n    "errors"\n    "fmt"\n    "math/rand"\n    "time"\n)\n\n// Hello returns a greeting for the named person.\nfunc Hello(name string) (string, error) {\n    // If no name was given, return an error with a message.\n    if name == "" {\n        return name, errors.New("empty name")\n    }\n    // Create a message using a random format.\n    message := fmt.Sprintf(randomFormat(), name)\n    return message, nil\n}\n\n// Hellos returns a map that associates each of the named people\n// with a greeting message.\nfunc Hellos(names []string) (map[string]string, error) {\n    // A map to associate names with messages.\n    messages := make(map[string]string)\n    // Loop through the received slice of names, calling\n    // the Hello function to get a message for each name.\n    for _, name := range names {\n        message, err := Hello(name)\n        if err != nil {\n            return nil, err\n        }\n        // In the map, associate the retrieved message with\n        // the name.\n        messages[name] = message\n    }\n    return messages, nil\n}\n\n// Init sets initial values for variables used in the function.\nfunc init() {\n    rand.Seed(time.Now().UnixNano())\n}\n\n// randomFormat returns one of a set of greeting messages. The returned\n// message is selected at random.\nfunc randomFormat() string {\n    // A slice of message formats.\n    formats := []string{\n        "Hi, %v. Welcome!",\n        "Great to see you, %v!",\n        "Hail, %v! Well met!",\n    }\n\n    // Return one of the message formats selected at random.\n    return formats[rand.Intn(len(formats))]\n}\n\n\n在此代码中，您：\n\n * 添加一个 Hellos 函数，该函数的参数是一组名称，而不是一个单独的名称。此外，您还可以将其返回类型之一从 string 更改为 map，以便返回映射到问候语的名称。\n * 让新的 Hellos 函数调用现有的 Hello 函数。这有助于减少重复，同时保留两个功能。\n * 创建一个消息 map，将每个接收到的名称（作为关键字）与生成的消息（作为值）关联起来。在 Go 中，您可以使用以下语法初始化映射：make（map[key-type]value-type）。您可以使用 Hellos 函数将此映射返回给调用者。有关地图的更多信息，请参阅 Go 博客上的Go maps in action。\n * 循环查看函数接收到的名称，检查每个名称是否都有非空值，然后将消息与每个名称关联起来。在这个 for 循环中，range 返回两个值：循环中当前项的索引和项值的副本。您不需要索引，所以您使用 Go blank 标识符（下划线）来忽略它。有关详细信息，请参阅 Effective Go 中的The blank identifier。\n\n 2. 在 hello/hello.go 调用代码中，传递一组名称，然后打印返回的名称/消息 Map 的内容。\n\n在 hello.go 中，更改您的代码，使其看起来如下所示。\n\npackage main\n\nimport (\n    "fmt"\n    "log"\n\n    "example.com/greetings"\n)\n\nfunc main() {\n    // Set properties of the predefined Logger, including\n    // the log entry prefix and a flag to disable printing\n    // the time, source file, and line number.\n    log.SetPrefix("greetings: ")\n    log.SetFlags(0)\n\n    // A slice of names.\n    names := []string{"Gladys", "Samantha", "Darrin"}\n\n    // Request greeting messages for the names.\n    messages, err := greetings.Hellos(names)\n    if err != nil {\n        log.Fatal(err)\n    }\n    // If no error was returned, print the returned map of\n    // messages to the console.\n    fmt.Println(messages)\n}\n\n\n通过这些更改，您：\n\n * 创建一个名称变量，作为包含三个名称的切片类型。\n * 将 names 变量作为参数传递给 Hellos 函数。\n * 在命令行中，切换到包含 hello/hello.go 的目录，然后使用 go-run 确认代码是否有效。\n * 输出应该是将名称与消息关联起来的映射的字符串表示，如下所示：\n\n$ go run .\nmap[Darrin:Hail, Darrin! Well met! Gladys:Hi, Gladys. Welcome! Samantha:Hail, Samantha! Well met!]\n\n\n本主题介绍了用于表示名称/值对的映射。它还引入了通过为模块中的新功能或更改的功能实现新功能来保持向后兼容性的想法。有关向后兼容性的更多信息，请参阅保持模块兼容。\n\n接下来，您将使用内置的 Go 功能为代码创建一个单元测试。\n\n\n# 创建单元测试\n\n现在您已经将代码放到了一个稳定的位置（顺便说一句，做得很好），添加一个测试。在开发过程中测试代码可能会暴露出在您进行更改时出现的错误。在本主题中，您将为 Hello 函数添加一个测试。\n\n> 注意：本主题是从创建 Go 模块开始的多部分教程的一部分。\n\nGo 内置的对单元测试的支持使得在进行测试时更容易。具体来说，使用命名约定、Go 的测试包和 Go 测试命令，您可以快速编写和执行测试。\n\n 1. 在 greetings 目录中，创建一个名为 greetings_test.go 的文件。\n\n以_test.go 结尾的文件名告诉 go-test 命令此文件包含测试函数。\n\n 2. 在 greetings_test.go 文件中，录入以下代码并保存文件：\n\npackage greetings\n\nimport (\n    "testing"\n    "regexp"\n)\n\n// TestHelloName calls greetings.Hello with a name, checking\n// for a valid return value.\nfunc TestHelloName(t *testing.T) {\n    name := "Gladys"\n    want := regexp.MustCompile(`\\b`+name+`\\b`)\n    msg, err := Hello("Gladys")\n    if !want.MatchString(msg) || err != nil {\n        t.Fatalf(`Hello("Gladys") = %q, %v, want match for %#q, nil`, msg, err, want)\n    }\n}\n\n// TestHelloEmpty calls greetings.Hello with an empty string,\n// checking for an error.\nfunc TestHelloEmpty(t *testing.T) {\n    msg, err := Hello("")\n    if msg != "" || err == nil {\n        t.Fatalf(`Hello("") = %q, %v, want "", error`, msg, err)\n    }\n}\n\n\n在此代码中，您：\n\n * 在与您正在测试的代码相同的包中实现测试函数。\n * 创建两个测试函数来测试问候语。Hello 函数。测试函数名称的形式为 TestName，其中 Name 表示特定测试的内容。此外，测试函数将指向测试包的 testing.T 类型的指针作为参数。您可以使用此参数的方法从测试中进行报告和日志记录。\n * 执行两项测试：\n   * TestHelloName 调用 Hello 函数，传递一个名称值，该函数应该能够使用该名称值返回有效的响应消息。如果调用返回错误或意外响应消息（其中不包括您传入的名称），则使用 t 参数的 Fatalf 方法将消息打印到控制台并结束执行。\n   * TestHelloEmpty 使用一个空字符串调用 Hello 函数。此测试旨在确认您的错误处理是否有效。如果调用返回非空字符串或没有错误，则使用 t 参数的 Fatalf 方法将消息打印到控制台并结束执行。\n\n 3. 在 greetings 目录的命令行中，运行 go test 命令来执行测试。\n\ngo test 命令在测试文件（名称以_test.go 结尾）中执行测试函数（名称以 test 开头）。您可以添加-v 标志来获得详细的输出，其中列出了所有测试及其结果。\n\n测试应该通过。\n\n$ go test\nPASS\nok      example.com/greetings   0.364s\n\n$ go test -v\n=== RUN   TestHelloName\n--- PASS: TestHelloName (0.00s)\n=== RUN   TestHelloEmpty\n--- PASS: TestHelloEmpty (0.00s)\nPASS\nok      example.com/greetings   0.372s\n\n\n 4. 中断 greetings.Hello 函数用于查看未通过的测试。\n\nTestHelloName 测试函数检查您指定为 Hello 函数参数的名称的返回值。要查看失败的测试结果，请更改 greetings.Hello 函数，使其不再包含名称。\n\n在 greetings/greetings.go 中，粘贴以下代码来代替 Hello 函数。请注意，高亮显示的行会更改函数返回的值，就好像名称参数被意外删除了一样。\n\n// Hello returns a greeting for the named person.\nfunc Hello(name string) (string, error) {\n    // If no name was given, return an error with a message.\n    if name == "" {\n        return name, errors.New("empty name")\n    }\n    // Create a message using a random format.\n    // message := fmt.Sprintf(randomFormat(), name)\n    message := fmt.Sprint(randomFormat())\n    return message, nil\n}\n\n\n 5. 在 greetings 目录的命令行中，运行 go test 来执行测试。\n\n这一次，在没有-v 标志的情况下运行 go 测试。输出将只包括失败测试的结果，当您有很多测试时，这可能很有用。TestHelloName 测试应该失败——TestHelloEmpty 仍然通过。\n\n$ go test\n--- FAIL: TestHelloName (0.00s)\n    greetings_test.go:15: Hello("Gladys") = "Hail, %v! Well met!", <nil>, want match for `\\bGladys\\b`, nil\nFAIL\nexit status 1\nFAIL    example.com/greetings   0.182s\n\n\n在下一个（也是最后一个）主题中，您将看到如何编译和安装代码以在本地运行。\n\n\n# Go 应用程序的编译和安装\n\n在最后一个主题中，您将学习几个新的 go 命令。虽然 go run 命令是在频繁更改时编译和运行程序的有用快捷方式，但它不会生成二进制可执行文件。\n\n本主题介绍了用于生成代码的两个附加命令：\n\n * go-build 命令编译包及其依赖项，但不安装结果。\n * go install 命令编译并安装程序包。\n\n> 注意：本主题是从创建 Go 模块开始的多部分教程的一部分。\n\n 1. 在 hello 目录的命令行中，运行 go-build 命令将代码编译为可执行文件。\n\n go build\n\n\n 2. 在 hello 目录中的命令行中，运行新的 hello 可执行文件以确认代码是否有效。\n\n请注意，您的结果可能会有所不同，这取决于您在测试后是否更改了 greetings.go 代码。\n\n * Linux 或 Mac 系统下\n\n$ ./hello\nmap[Darrin:Great to see you, Darrin! Gladys:Hail, Gladys! Well met! Samantha:Hail, Samantha! Well met!]\n\n\n * Windows 系统下\n\n$ hello.exe\nmap[Darrin:Great to see you, Darrin! Gladys:Hail, Gladys! Well met! Samantha:Hail, Samantha! Well met!]\n\n\n您已将应用程序编译为可执行文件，以便运行它。但要当前运行它，您的提示需要位于可执行文件的目录中，或者指定可执行文件路径。\n\n接下来，您将安装可执行文件，这样您就可以在不指定其路径的情况下运行它。\n\n 3. 查找 Go 安装路径，Go 命令将在其中安装当前软件包。\n\n您可以通过运行 go list 命令来发现安装路径，如以下示例所示：\n\n$ go list -f \'{{.Target}}\'\n\n\n例如，命令的输出可能会说/home/gopher/bin/hello，这意味着二进制文件被安装到/home/gopaher/bin。在下一步中，您将需要此安装目录。\n\n 4. 将 Go 安装目录添加到系统的 shell 路径中。\n\n这样，您就可以运行程序的可执行文件，而无需指定可执行文件的位置。\n\n * Linux 或 Mac 系统\n\n$ export PATH=$PATH:/path/to/your/install/directory\n\n\n * Windows 系统\n\nset PATH=%PATH%;C:\\path\\to\\your\\install\\directory\n\n\n另一种选择是，如果您的 shell 路径中已经有一个类似$HOME/bin 的目录，并且您想在那里安装 Go 程序，则可以使用 Go-env 命令设置 GOBIN 变量来更改安装目标：\n\ngo env -w GOBIN=/path/to/your/bin\n\n\n或\n\n$ go env -w GOBIN=C:\\path\\to\\your\\bin\n\n\n 5. 更新完 shell 路径后，运行 go-install 命令编译并安装包\n\n$ go install\n\n\n 6. 只需键入应用程序的名称即可运行应用程序。为了让这变得有趣，打开一个新的命令提示符，并在其他目录中运行 hello 可执行文件名。\n\n$ hello\nmap[Darrin:Hail, Darrin! Well met! Gladys:Great to see you, Gladys! Samantha:Hail, Samantha! Well met!]\n\n\nGo 教程到此结束！',normalizedContent:'# 创建你的 go 模块\n\n这是教程的第一部分，介绍了 go 语言的一些基本功能。如果你刚开始使用go语言，一定要看一下教程：go 入门，它介绍了 go 命令、go 模块和非常简单的 go 代码。\n\n在本教程中，您将创建两个模块。第一种是打算由其他库或应用程序导入的库。第二个是将使用第一个的调用方应用程序。\n\n本教程的顺序包括七个简短的主题，每个主题都说明了语言的不同部分。\n\n 1. 创建一个模块——编写一个小模块，其中包含可以从另一个模块调用的函数。\n 2. 从另一个模块调用您的代码--导入并使用您的新模块。\n 3. 返回并处理错误--添加简单的错误处理。\n 4. 返回一个随机的 greetings——处理切片中的数据（go 的动态大小数组）。\n 5. 为多个人返回 greetings--将键/值对存储在映射中。\n 6. 添加测试--使用 go 内置的单元测试功能来测试代码。\n 7. 编译并安装应用程序--在本地编译并安装代码。\n\n> 注意: 有关其他课程, 参见 go 语言中文文档.\n\n\n# 学习准备\n\n * 一些编程经验。这里的代码非常简单，但了解函数、循环和数组会有所帮助。\n * 用于编辑代码的工具。您拥有的任何文本编辑器都可以正常工作。大多数文本编辑器都很好地支持 go。最受欢迎的是 vscode（免费）、goland（付费）和 vim（免费）。\n * 一个命令终端。go 在 linux 和 mac 上以及 windows 中的 powershell 或 cmd 上使用任何终端都能很好地工作。\n\n\n# 开发一个其他人也能使用的模块\n\n首先创建 go 模块。在一个模块中，您可以为一组离散且有用的函数收集一个或多个相关的包。例如，您可以创建一个包含包的模块，这些包具有进行财务分析的功能，以便其他编写财务应用程序的人可以使用您的工作。有关开发模块的更多信息，请参阅开发和发布模块。\n\ngo 代码被分组到包中，包被分组到模块中。您的模块指定运行代码所需的依赖项，包括 go 版本及其所需的一组其他模块。\n\n当您在模块中添加或改进功能时，您将发布模块的新版本。编写调用模块中函数的代码的开发人员可以导入模块的更新包，并在将其投入生产使用之前使用新版本进行测试。\n\n 1. 打开一个命令提示符并 cd 到您的主目录。 在 linux 或 mac 上：\n\ncd\n\n\n在 windows 上：\n\ncd %homepath%\n\n\n 2. 为 go 模块的源代码创建一个主目录。\n\n例如，在主目录中使用以下命令：\n\nmkdir greetings\ncd greetings\n\n\n 3. 使用 go-mod-init 命令初始化模块。\n\n运行 go-mod-init 命令，给它你的模块路径——在这里，使用 example.com/greetings。如果你发布了一个模块，这必须是 go 工具可以下载你的模块的路径。那将是您的代码存储库。\n\n$ go mod init example.com/greetings\ngo: creating new go.mod: module example.com/greetings\n\n\ngo-mod-init 命令创建一个 go.mod 文件来跟踪代码的依赖关系。到目前为止，该文件只包括模块的名称和代码支持的 go 版本。但当你添加依赖项时，go.mod 文件会列出你的代码所依赖的版本。这可以保持构建的可复制性，并让你直接控制要使用的模块版本。\n\n 4. 在文本编辑器中，创建一个用于编写代码的文件，并将其命名为 greetings.go。\n 5. 将以下代码粘贴到 greetings.go 文件中并保存该文件。\n\npackage greetings\n\nimport "fmt"\n\n// hello returns a greeting for the named person.\nfunc hello(name string) string {\n    // return a greeting that embeds the name in a message.\n    message := fmt.sprintf("hi, %v. welcome!", name)\n    return message\n}\n\n\n这是您的第一份模块代码。它会向任何需要问候的来访者返回 greetings。您将在下一步中编写调用此函数的代码。\n\n在此代码中，您：\n\n * 声明一个 greetings 包以容纳相关函数。\n * 实现 hello 函数以返回 greetings。\n * 此函数接受一个类型为字符串的名称参数。该函数还返回一个字符串。在 go 中，名称以大写字母开头的函数可以由不在同一个包中的函数调用。这在 go 中被称为导出名称。有关导出名称的详细信息，请参阅 go tour 中的导出名称。\n   \n * 声明一个消息变量来保存您的 greetings。 在 go 中，：=运算符是在一行中声明和初始化变量的快捷方式（go 使用右侧的值来确定变量的类型）。从长远来看，你可能会这样写：\n\nvar message string\nmessage = fmt.sprintf("hi, %v. welcome!", name)\n\n\n\n*使用fmt包的sprintf函数可以创建一条问候消息。第一个参数是一个格式字符串，sprintf将name参数的值替换为%v格式谓词。插入name参数的值将完成greetings文本。 * 将格式化的greetings文本返回给呼叫者。\n\n下一课，您将从另一个模块调用此函数。\n\n\n# 从其他模块中调用你的代码\n\n在上一节中，您创建了一个 grteeings 模块。在本节中，您将编写代码来调用刚刚编写的模块中的 hello 函数。您将编写可以作为应用程序执行的代码，并调用 grteeings 模块中的代码。\n\n> 注意：本主题是从创建 go 模块开始的多部分教程的一部分。\n\n 1. 为 go 模块的源代码创建一个 hello 目录。\n\n创建此目录后，您应该在层次结构的同一级别同时拥有 hello 和 greetings 目录，如下所示：\n\n<home>/\n |-- greetings/\n |-- hello/\n\n\n例如，如果命令提示符位于 greetings 目录中，则可以使用以下命令：\n\ncd ..\nmkdir hello\ncd hello\n\n\n 2. 为即将编写的代码启用依赖项跟踪。 要为代码启用依赖项跟踪，请运行 go-mod-init 命令，为其提供代码所在模块的名称。\n\n出于本教程的目的，请使用 example.com/hello 作为模块路径。\n\n$ go mod init example.com/hello\ngo: creating new go.mod: module example.com/hello\n\n\n 3. 在文本编辑器的 hello 目录中，创建一个用于编写代码的文件，并将其命名为 hello.go。\n 4. 编写代码调用 hello 函数，然后打印函数的返回值。 要做到这一点，请将以下代码粘贴到 hello.go 中。\n\npackage main\nimport (\n    "fmt"\n\n    "example.com/greetings"\n)\nfunc main() {\n    // get a greeting message and print it.\n    message := greetings.hello("gladys")\n    fmt.println(message)\n}\n\n\n在此代码中，您：\n\n * 声明一个主程序包。在 go 中，作为应用程序执行的代码必须在主包中。\n * 导入两个包：example.com/greetings 和 fmt 包。这使您的代码可以访问这些包中的函数。导入 example.com/greetings（包含在您之前创建的模块中的包）可以访问 hello 函数。您还可以导入 fmt，它具有处理输入和输出文本的功能（例如将文本打印到控制台）。\n * 通过调用问候软件包的 hello 功能来获得返回的 greetings。\n\n 5. 编辑 example.com/hello 模块以使用您本地的 example.com/hellos 模块。\n\n对于生产使用，您可以从其存储库中发布 example.com/helles 模块（带有反映其发布位置的模块路径），go 工具可以在那里找到它来下载。目前，由于您尚未发布该模块，您需要调整 example.com/hello 模块，以便它可以在本地文件系统中找到 example.com/hellos 代码。\n\n要做到这一点，请使用 go mod edit 命令编辑 example.com/hello 模块，将 go 工具从其模块路径（模块不在的地方）重定向到本地目录（模块所在的地方）。\n\n 1. 在 hello 目录中的命令提示符下，运行以下命令：\n\ngo mod edit -replace example.com/greetings=../greetings\n\n\n该命令指定 example.com/greetings 应替换为../greetings，用于查找依赖项。运行该命令后，hello 目录中的 go.mod 文件应包含一个 replace 指令：\n\nmodule example.com/hello\ngo 1.16\nreplace example.com/greetings => ../greetings\n\n\n 2. 在 hello 目录中的命令提示符下，运行 go mod 整洁命令来同步 example.com/hello 模块的依赖项，添加代码所需但尚未在模块中跟踪的依赖项。\n\ngo mod tidy\ngo: found example.com/greetings in example.com/greetings v0.0.0-00010101000000-000000000000\n\n\n命令完成后，example.com/hello 模块的 go.mod 文件应该如下所示：\n\nmodule example.com/hello\ngo 1.16\nreplace example.com/greetings => ../greetings\nrequire example.com/greetings v0.0.0-00010101000000-000000000000\n\n\n该命令在 greetings 目录中找到了本地代码，然后添加了一个 require 指令，指定 example.com/hello 需要 example.com/greetings。您在 hello.go 中导入 greetings 包时创建了此依赖项。\n\n模块路径后面的数字是一个伪版本号——一个生成的数字，用来代替语义版本号（模块还没有）。\n\n要引用已发布的模块，go.mod 文件通常会省略 replace 指令，并使用末尾带有标记版本号的 require 指令。\n\nrequire example.com/greetings v1.1.0\n\n\n有关版本号的更多信息，请参阅模块版本号。\n\n 6. 在 hello 目录中的命令提示符下，运行您的代码以确认它是否工作。\n\n$ go run .\nhi, gladys. welcome!\n\n\n恭喜！您已经编写了两个功能模块。\n\n在下一个主题中，您将添加一些错误处理。\n\n\n# 返回与错误处理\n\n处理错误是实体代码的一个基本特征。在本节中，您将添加一些代码，从 greetings 模块返回一个错误，然后在调用者中进行处理。\n\n> 注意：本主题是从创建 go 模块开始的多部分教程的一部分。\n\n 1. 在 greetings/greetings.go 中，添加下面突出显示的代码。\n\n如果你不知道该向谁打招呼，那么问候是没有意义的。如果名称为空，则向调用方返回一个错误。将以下代码复制到 greetings.go 中并保存该文件。\n\npackage greetings\n\nimport (\n    "errors"\n    "fmt"\n)\n\n// hello returns a greeting for the named person.\nfunc hello(name string) (string, error) {\n    // if no name was given, return an error with a message.\n    if name == "" {\n        return "", errors.new("empty name")\n    }\n\n    // if a name was received, return a value that embeds the name\n    // in a greeting message.\n    message := fmt.sprintf("hi, %v. welcome!", name)\n    return message, nil\n}\n\n\n在此代码中，您：\n\n * 更改函数，使其返回两个值：一个字符串和一个错误。您的调用者将检查第二个值以查看是否发生错误。（任何 go 函数都可以返回多个值。有关详细信息，请参阅effective go.。）\n * 导入 go 标准库错误包，以便您可以使用其 errors.new 函数。\n * 添加 if 语句以检查无效请求（名称应为空字符串），如果请求无效则返回错误。errors.new 函数返回一个错误，其中包含您的消息。\n * 在成功返回中添加 nil（表示没有错误）作为第二个值。这样，调用者就可以看到函数成功了。\n\n 2. 在 hello/hello.go 文件中，处理 hello 函数现在返回的错误以及非错误值。\n\n将以下代码粘贴到 hello.go 中。\n\npackage main\n\nimport (\n    "fmt"\n    "log"\n\n    "example.com/greetings"\n)\n\nfunc main() {\n    // set properties of the predefined logger, including\n    // the log entry prefix and a flag to disable printing\n    // the time, source file, and line number.\n    log.setprefix("greetings: ")\n    log.setflags(0)\n\n    // request a greeting message.\n    message, err := greetings.hello("")\n    // if an error was returned, print it to the console and\n    // exit the program.\n    if err != nil {\n        log.fatal(err)\n    }\n\n    // if no error was returned, print the returned message\n    // to the console.\n    fmt.println(message)\n}\n\n\n在此代码中，您：\n\n * 将 log 日志包配置为在其日志消息的开头打印命令名（“问候语：”），不带时间戳或源文件信息。\n * 将两个 hello 返回值（包括错误）分配给变量。\n * 将 hello 参数从 gladys 的名称更改为空字符串，这样您就可以尝试错误处理代码。\n * 查找非零错误值。在这种情况下继续下去是没有意义的。\n * 使用标准库的 log 包中的函数来输出错误信息。如果出现错误，则使用 log 日志包的 fatal 函数打印错误并停止程序。\n\n 3. 在 hello 目录的命令行中，运行 hello.go 以确认代码是否有效。\n\n现在您传入了一个空名称，您将得到一个错误。\n\n$ go run .\ngreetings: empty name\nexit status 1\n\n\n这是 go 中常见的错误处理：将错误作为值返回，以便调用方可以检查它。\n\n接下来，您将使用 go 切片来返回随机选择的问候语。\n\n\n# 返回随机问候语\n\n在本节中，您将更改代码，使其不再每次返回一个问候语，而是返回几个预定义的问候语消息中的一个。\n\n> 注意：本主题是从创建 go 模块开始的多部分教程的一部分。\n\n为此，您将使用 go 切片类型。切片就像一个数组，只是它的大小随着添加和删除项目而动态变化。切片（slice）是 go 语言最有用的类型之一。\n\n您将添加一个小片段来包含三条问候消息，然后让代码随机返回其中一条消息。有关切片（slice）的更多信息，请参阅 go 官方博客中的go 切片。\n\n在 greetings/greetings.go 中，更改代码，使其看起来如下所示。\n\npackage greetings\n\nimport (\n    "errors"\n    "fmt"\n    "math/rand"\n    "time"\n)\n\n// hello returns a greeting for the named person.\nfunc hello(name string) (string, error) {\n    // if no name was given, return an error with a message.\n    if name == "" {\n        return name, errors.new("empty name")\n    }\n    // create a message using a random format.\n    message := fmt.sprintf(randomformat(), name)\n    return message, nil\n}\n\n// init sets initial values for variables used in the function.\nfunc init() {\n    rand.seed(time.now().unixnano())\n}\n\n// randomformat returns one of a set of greeting messages. the returned\n// message is selected at random.\nfunc randomformat() string {\n    // a slice of message formats.\n    formats := []string{\n        "hi, %v. welcome!",\n        "great to see you, %v!",\n        "hail, %v! well met!",\n    }\n\n    // return a randomly selected message format by specifying\n    // a random index for the slice of formats.\n    return formats[rand.intn(len(formats))]\n}\n\n\n在此代码中，您：\n\n * 添加一个 randomformat 函数，该函数可为问候语返回随机选择的格式。请注意，randomformat 以小写字母开头，使其只能由自己包中的代码访问（换句话说，它不导出）。\n * 在 randomformat 中，用三种消息格式声明一个 formats 切片。在声明切片时，可以省略括号中的大小，如下所示：[]字符串。这告诉 go，片下面的数组大小可以动态更改。\n * 使用 math/rand 包生成一个随机数，用于从切片中选择项目。\n * 添加一个 init 函数，用当前时间为 rand 包设定种子。go 在初始化全局变量后，在程序启动时自动执行 init 函数。有关 init 函数的更多信息，请参阅effective go。\n * 在 hello 中，调用 randomformat 函数来获取要返回的消息的格式，然后将格式和名称值一起使用来创建消息。\n * 像以前一样返回消息（或错误）。\n\n 2. 在 hello/hello.go 中，更改代码，使其看起来如下所示。\n\n您只是将 gladys 的名字（或者其他名字，如果您愿意的话）作为参数添加到 hello.go 中的 hello 函数调用中。\n\npackage main\n\nimport (\n    "fmt"\n    "log"\n\n    "example.com/greetings"\n)\n\nfunc main() {\n    // set properties of the predefined logger, including\n    // the log entry prefix and a flag to disable printing\n    // the time, source file, and line number.\n    log.setprefix("greetings: ")\n    log.setflags(0)\n\n    // request a greeting message.\n    message, err := greetings.hello("gladys")\n    // if an error was returned, print it to the console and\n    // exit the program.\n    if err != nil {\n        log.fatal(err)\n    }\n\n    // if no error was returned, print the returned message\n    // to the console.\n    fmt.println(message)\n}\n\n\n 3. 在 hello 目录的命令行中，运行 hello.go 以确认代码是否有效。多次运行它，可以注意到问候语发生了变化。\n\n$ go run .\ngreat to see you, gladys!\n\n$ go run .\nhi, gladys. welcome!\n\n$ go run .\nhail, gladys! well met!\n\n\n接下来，您将使用一个 slice 切片来问候多个人。\n\n\n# 为多人返回问候语\n\n在您将对模块代码进行的最后一次更改中，您将添加在一个请求中获得多人问候的支持功能。换句话说，您将处理多值输入，然后将该输入中的值与多值输出配对。要做到这一点，您需要将一组名称传递给一个函数，该函数可以为每个名称返回一个问候语。\n\n> 注意：本主题是从创建 go 模块开始的多部分教程的一部分。\n\n但有一个问题。将 hello 函数的参数从单个名称更改为一组名称将更改函数的签名。如果您已经发布了 example.com/greetings 模块，并且用户已经编写了调用 hello 的代码，那么这种更改将破坏他们的程序。\n\n在这种情况下，更好的选择是用不同的名称编写一个新函数。新功能将采用多个参数。这保留了旧功能以实现向后兼容性。\n\n 1. 在 greetings/greetings.go 中，更改代码，使其看起来如下所示:\n\npackage greetings\n\nimport (\n    "errors"\n    "fmt"\n    "math/rand"\n    "time"\n)\n\n// hello returns a greeting for the named person.\nfunc hello(name string) (string, error) {\n    // if no name was given, return an error with a message.\n    if name == "" {\n        return name, errors.new("empty name")\n    }\n    // create a message using a random format.\n    message := fmt.sprintf(randomformat(), name)\n    return message, nil\n}\n\n// hellos returns a map that associates each of the named people\n// with a greeting message.\nfunc hellos(names []string) (map[string]string, error) {\n    // a map to associate names with messages.\n    messages := make(map[string]string)\n    // loop through the received slice of names, calling\n    // the hello function to get a message for each name.\n    for _, name := range names {\n        message, err := hello(name)\n        if err != nil {\n            return nil, err\n        }\n        // in the map, associate the retrieved message with\n        // the name.\n        messages[name] = message\n    }\n    return messages, nil\n}\n\n// init sets initial values for variables used in the function.\nfunc init() {\n    rand.seed(time.now().unixnano())\n}\n\n// randomformat returns one of a set of greeting messages. the returned\n// message is selected at random.\nfunc randomformat() string {\n    // a slice of message formats.\n    formats := []string{\n        "hi, %v. welcome!",\n        "great to see you, %v!",\n        "hail, %v! well met!",\n    }\n\n    // return one of the message formats selected at random.\n    return formats[rand.intn(len(formats))]\n}\n\n\n在此代码中，您：\n\n * 添加一个 hellos 函数，该函数的参数是一组名称，而不是一个单独的名称。此外，您还可以将其返回类型之一从 string 更改为 map，以便返回映射到问候语的名称。\n * 让新的 hellos 函数调用现有的 hello 函数。这有助于减少重复，同时保留两个功能。\n * 创建一个消息 map，将每个接收到的名称（作为关键字）与生成的消息（作为值）关联起来。在 go 中，您可以使用以下语法初始化映射：make（map[key-type]value-type）。您可以使用 hellos 函数将此映射返回给调用者。有关地图的更多信息，请参阅 go 博客上的go maps in action。\n * 循环查看函数接收到的名称，检查每个名称是否都有非空值，然后将消息与每个名称关联起来。在这个 for 循环中，range 返回两个值：循环中当前项的索引和项值的副本。您不需要索引，所以您使用 go blank 标识符（下划线）来忽略它。有关详细信息，请参阅 effective go 中的the blank identifier。\n\n 2. 在 hello/hello.go 调用代码中，传递一组名称，然后打印返回的名称/消息 map 的内容。\n\n在 hello.go 中，更改您的代码，使其看起来如下所示。\n\npackage main\n\nimport (\n    "fmt"\n    "log"\n\n    "example.com/greetings"\n)\n\nfunc main() {\n    // set properties of the predefined logger, including\n    // the log entry prefix and a flag to disable printing\n    // the time, source file, and line number.\n    log.setprefix("greetings: ")\n    log.setflags(0)\n\n    // a slice of names.\n    names := []string{"gladys", "samantha", "darrin"}\n\n    // request greeting messages for the names.\n    messages, err := greetings.hellos(names)\n    if err != nil {\n        log.fatal(err)\n    }\n    // if no error was returned, print the returned map of\n    // messages to the console.\n    fmt.println(messages)\n}\n\n\n通过这些更改，您：\n\n * 创建一个名称变量，作为包含三个名称的切片类型。\n * 将 names 变量作为参数传递给 hellos 函数。\n * 在命令行中，切换到包含 hello/hello.go 的目录，然后使用 go-run 确认代码是否有效。\n * 输出应该是将名称与消息关联起来的映射的字符串表示，如下所示：\n\n$ go run .\nmap[darrin:hail, darrin! well met! gladys:hi, gladys. welcome! samantha:hail, samantha! well met!]\n\n\n本主题介绍了用于表示名称/值对的映射。它还引入了通过为模块中的新功能或更改的功能实现新功能来保持向后兼容性的想法。有关向后兼容性的更多信息，请参阅保持模块兼容。\n\n接下来，您将使用内置的 go 功能为代码创建一个单元测试。\n\n\n# 创建单元测试\n\n现在您已经将代码放到了一个稳定的位置（顺便说一句，做得很好），添加一个测试。在开发过程中测试代码可能会暴露出在您进行更改时出现的错误。在本主题中，您将为 hello 函数添加一个测试。\n\n> 注意：本主题是从创建 go 模块开始的多部分教程的一部分。\n\ngo 内置的对单元测试的支持使得在进行测试时更容易。具体来说，使用命名约定、go 的测试包和 go 测试命令，您可以快速编写和执行测试。\n\n 1. 在 greetings 目录中，创建一个名为 greetings_test.go 的文件。\n\n以_test.go 结尾的文件名告诉 go-test 命令此文件包含测试函数。\n\n 2. 在 greetings_test.go 文件中，录入以下代码并保存文件：\n\npackage greetings\n\nimport (\n    "testing"\n    "regexp"\n)\n\n// testhelloname calls greetings.hello with a name, checking\n// for a valid return value.\nfunc testhelloname(t *testing.t) {\n    name := "gladys"\n    want := regexp.mustcompile(`\\b`+name+`\\b`)\n    msg, err := hello("gladys")\n    if !want.matchstring(msg) || err != nil {\n        t.fatalf(`hello("gladys") = %q, %v, want match for %#q, nil`, msg, err, want)\n    }\n}\n\n// testhelloempty calls greetings.hello with an empty string,\n// checking for an error.\nfunc testhelloempty(t *testing.t) {\n    msg, err := hello("")\n    if msg != "" || err == nil {\n        t.fatalf(`hello("") = %q, %v, want "", error`, msg, err)\n    }\n}\n\n\n在此代码中，您：\n\n * 在与您正在测试的代码相同的包中实现测试函数。\n * 创建两个测试函数来测试问候语。hello 函数。测试函数名称的形式为 testname，其中 name 表示特定测试的内容。此外，测试函数将指向测试包的 testing.t 类型的指针作为参数。您可以使用此参数的方法从测试中进行报告和日志记录。\n * 执行两项测试：\n   * testhelloname 调用 hello 函数，传递一个名称值，该函数应该能够使用该名称值返回有效的响应消息。如果调用返回错误或意外响应消息（其中不包括您传入的名称），则使用 t 参数的 fatalf 方法将消息打印到控制台并结束执行。\n   * testhelloempty 使用一个空字符串调用 hello 函数。此测试旨在确认您的错误处理是否有效。如果调用返回非空字符串或没有错误，则使用 t 参数的 fatalf 方法将消息打印到控制台并结束执行。\n\n 3. 在 greetings 目录的命令行中，运行 go test 命令来执行测试。\n\ngo test 命令在测试文件（名称以_test.go 结尾）中执行测试函数（名称以 test 开头）。您可以添加-v 标志来获得详细的输出，其中列出了所有测试及其结果。\n\n测试应该通过。\n\n$ go test\npass\nok      example.com/greetings   0.364s\n\n$ go test -v\n=== run   testhelloname\n--- pass: testhelloname (0.00s)\n=== run   testhelloempty\n--- pass: testhelloempty (0.00s)\npass\nok      example.com/greetings   0.372s\n\n\n 4. 中断 greetings.hello 函数用于查看未通过的测试。\n\ntesthelloname 测试函数检查您指定为 hello 函数参数的名称的返回值。要查看失败的测试结果，请更改 greetings.hello 函数，使其不再包含名称。\n\n在 greetings/greetings.go 中，粘贴以下代码来代替 hello 函数。请注意，高亮显示的行会更改函数返回的值，就好像名称参数被意外删除了一样。\n\n// hello returns a greeting for the named person.\nfunc hello(name string) (string, error) {\n    // if no name was given, return an error with a message.\n    if name == "" {\n        return name, errors.new("empty name")\n    }\n    // create a message using a random format.\n    // message := fmt.sprintf(randomformat(), name)\n    message := fmt.sprint(randomformat())\n    return message, nil\n}\n\n\n 5. 在 greetings 目录的命令行中，运行 go test 来执行测试。\n\n这一次，在没有-v 标志的情况下运行 go 测试。输出将只包括失败测试的结果，当您有很多测试时，这可能很有用。testhelloname 测试应该失败——testhelloempty 仍然通过。\n\n$ go test\n--- fail: testhelloname (0.00s)\n    greetings_test.go:15: hello("gladys") = "hail, %v! well met!", <nil>, want match for `\\bgladys\\b`, nil\nfail\nexit status 1\nfail    example.com/greetings   0.182s\n\n\n在下一个（也是最后一个）主题中，您将看到如何编译和安装代码以在本地运行。\n\n\n# go 应用程序的编译和安装\n\n在最后一个主题中，您将学习几个新的 go 命令。虽然 go run 命令是在频繁更改时编译和运行程序的有用快捷方式，但它不会生成二进制可执行文件。\n\n本主题介绍了用于生成代码的两个附加命令：\n\n * go-build 命令编译包及其依赖项，但不安装结果。\n * go install 命令编译并安装程序包。\n\n> 注意：本主题是从创建 go 模块开始的多部分教程的一部分。\n\n 1. 在 hello 目录的命令行中，运行 go-build 命令将代码编译为可执行文件。\n\n go build\n\n\n 2. 在 hello 目录中的命令行中，运行新的 hello 可执行文件以确认代码是否有效。\n\n请注意，您的结果可能会有所不同，这取决于您在测试后是否更改了 greetings.go 代码。\n\n * linux 或 mac 系统下\n\n$ ./hello\nmap[darrin:great to see you, darrin! gladys:hail, gladys! well met! samantha:hail, samantha! well met!]\n\n\n * windows 系统下\n\n$ hello.exe\nmap[darrin:great to see you, darrin! gladys:hail, gladys! well met! samantha:hail, samantha! well met!]\n\n\n您已将应用程序编译为可执行文件，以便运行它。但要当前运行它，您的提示需要位于可执行文件的目录中，或者指定可执行文件路径。\n\n接下来，您将安装可执行文件，这样您就可以在不指定其路径的情况下运行它。\n\n 3. 查找 go 安装路径，go 命令将在其中安装当前软件包。\n\n您可以通过运行 go list 命令来发现安装路径，如以下示例所示：\n\n$ go list -f \'{{.target}}\'\n\n\n例如，命令的输出可能会说/home/gopher/bin/hello，这意味着二进制文件被安装到/home/gopaher/bin。在下一步中，您将需要此安装目录。\n\n 4. 将 go 安装目录添加到系统的 shell 路径中。\n\n这样，您就可以运行程序的可执行文件，而无需指定可执行文件的位置。\n\n * linux 或 mac 系统\n\n$ export path=$path:/path/to/your/install/directory\n\n\n * windows 系统\n\nset path=%path%;c:\\path\\to\\your\\install\\directory\n\n\n另一种选择是，如果您的 shell 路径中已经有一个类似$home/bin 的目录，并且您想在那里安装 go 程序，则可以使用 go-env 命令设置 gobin 变量来更改安装目标：\n\ngo env -w gobin=/path/to/your/bin\n\n\n或\n\n$ go env -w gobin=c:\\path\\to\\your\\bin\n\n\n 5. 更新完 shell 路径后，运行 go-install 命令编译并安装包\n\n$ go install\n\n\n 6. 只需键入应用程序的名称即可运行应用程序。为了让这变得有趣，打开一个新的命令提示符，并在其他目录中运行 hello 可执行文件名。\n\n$ hello\nmap[darrin:hail, darrin! well met! gladys:great to see you, gladys! samantha:hail, samantha! well met!]\n\n\ngo 教程到此结束！',charsets:{cjk:!0}},{title:"教程：使用Go和Gin开发RESTful API",frontmatter:{title:"教程：使用Go和Gin开发RESTful API",date:"2023-04-12T09:31:34.000Z",permalink:"/pages/GoTour/004/"},regularPath:"/03.%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91/01.Go%E8%AF%AD%E8%A8%80%E6%96%87%E6%A1%A3%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91/05.%E4%BD%BF%E7%94%A8Go%E5%92%8CGin%E5%BC%80%E5%8F%91RESTful%20API.html",relativePath:"03.中文翻译/01.Go语言文档中文翻译/05.使用Go和Gin开发RESTful API.md",key:"v-43d05cd8",path:"/pages/GoTour/004/",headers:[{level:2,title:"课程准备",slug:"课程准备",normalizedTitle:"课程准备",charIndex:411},{level:2,title:"API 接口设计",slug:"api-接口设计",normalizedTitle:"api 接口设计",charIndex:710},{level:2,title:"为代码创建文件夹",slug:"为代码创建文件夹",normalizedTitle:"为代码创建文件夹",charIndex:1034},{level:2,title:"创建数据",slug:"创建数据",normalizedTitle:"创建数据",charIndex:321},{level:3,title:"编写代码",slug:"编写代码",normalizedTitle:"编写代码",charIndex:1569},{level:2,title:"编写处理程序以返回所有项目",slug:"编写处理程序以返回所有项目",normalizedTitle:"编写处理程序以返回所有项目",charIndex:2448},{level:3,title:"编写代码",slug:"编写代码-2",normalizedTitle:"编写代码",charIndex:1569},{level:3,title:"运行代码",slug:"运行代码",normalizedTitle:"运行代码",charIndex:3804},{level:2,title:"编写处理程序以添加新项",slug:"编写处理程序以添加新项",normalizedTitle:"编写处理程序以添加新项",charIndex:4774},{level:3,title:"编写代码",slug:"编写代码-3",normalizedTitle:"编写代码",charIndex:1569},{level:3,title:"运行代码",slug:"运行代码-2",normalizedTitle:"运行代码",charIndex:3804},{level:2,title:"编写处理程序以返回特定项",slug:"编写处理程序以返回特定项",normalizedTitle:"编写处理程序以返回特定项",charIndex:7506},{level:3,title:"编写代码",slug:"编写代码-4",normalizedTitle:"编写代码",charIndex:1569},{level:3,title:"运行代码",slug:"运行代码-3",normalizedTitle:"运行代码",charIndex:3804},{level:2,title:"结论",slug:"结论",normalizedTitle:"结论",charIndex:9237},{level:2,title:"建议的下一个主题",slug:"建议的下一个主题",normalizedTitle:"建议的下一个主题",charIndex:9287},{level:2,title:"已完成代码",slug:"已完成代码",normalizedTitle:"已完成代码",charIndex:9485}],headersStr:"课程准备 API 接口设计 为代码创建文件夹 创建数据 编写代码 编写处理程序以返回所有项目 编写代码 运行代码 编写处理程序以添加新项 编写代码 运行代码 编写处理程序以返回特定项 编写代码 运行代码 结论 建议的下一个主题 已完成代码",content:'本教程介绍了使用 Go 和 Gin Web Framework（Gin）编写 RESTful web 服务 API 的基本知识。\n\n如果您对 Go 及其工具有基本的熟悉，您将充分利用本教程。如果这是你第一次接触 Go 语言，请参阅教程：快速入门。\n\nGin 简化了许多与构建 web 应用程序（包括 web 服务）相关的编码任务。在本教程中，您将使用 Gin 来创建路由请求、检索请求详细信息，并为响应封送 JSON。\n\n在本教程中，您将构建一个具有两个端点的 RESTful API 服务器。您的示例项目将是一个关于老式爵士乐唱片的数据存储库。\n\n本教程包括以下部分：\n\n * 设计 API 接口。\n * 为您的代码创建一个文件夹。\n * 创建数据。\n * 编写一个处理程序以返回所有项。\n * 编写一个处理程序来添加一个新项。\n * 编写一个处理程序以返回特定项。\n\n> 注意：有关其他相关知识，请参见教程。\n\n\n# 课程准备\n\nGo 1.16 或更高版本的安装。有关安装说明，请参阅安装 Go。\n\n用于编辑代码的工具。您拥有的任何文本编辑器都可以正常工作。\n\n一种命令终端。Go 在 Linux 和 Mac 上以及 Windows 中的 PowerShell 或 cmd 上使用任何终端都能很好地工作。\n\ncUrl 工具。在 Linux 和 Mac 上，应该已经安装了。在 Windows 上，它包含在 Windows 10 Insider 版本 17063 及更高版本中。对于早期的 Windows 版本，您可能需要安装它。有关更多信息，请参阅Tar And Curl Come to Windows。\n\n\n# API 接口设计\n\n您将构建一个 API，该 API 可以访问一家出售老式黑胶唱片的商店。因此，您需要提供接口，客户端可以通过这些接口为用户获取和添加相册。\n\n在开发 API 时，通常从设计接口开始。如果接口易于理解，那么 API 的用户将获得更大的成功。\n\n以下是您将在本教程中创建的接口。\n\n 1. /albums\n    \n    1. GET–获取所有相册的列表，以 JSON 形式返回。\n    2. POST–从以 JSON 形式发送的请求数据中添加新相册。\n\n 2. /albums/{id}\n    \n    1. GET–通过相册 ID 获取相册，并以 JSON 形式返回相册数据。\n\n接下来，您将为代码创建一个文件夹。\n\n\n# 为代码创建文件夹\n\n首先，为您将要编写的代码创建一个项目。\n\n 1. 打开命令提示符并更改到主目录。\n\n在 Linux 或 Mac 上：\n\ncd\n\n\n在 Windows 上：\n\ncd %HOMEPATH%\n\n\n 2. 使用命令提示符，为代码创建一个名为 web-service-gin 的目录。\n\nmkdir web-service-gin\ncd web-service-gin\n\n\n创建一个可以在其中管理依赖关系的模块。\n\n运行 go-mod-init 命令，为其提供代码所在模块的路径。\n\n$ go mod init example.com/web-service-gin\ngo: creating new go.mod: module example.com/web-service-gin\n\n\n此命令创建一个 go.mod 文件，您添加的依赖项将列在该文件中进行跟踪。有关详细信息，请参阅管理依赖关系。\n\n接下来，您将设计用于处理数据的数据结构。\n\n\n# 创建数据\n\n为了使教程保持简单，您将把数据存储在内存中。更深层课程的 API 将与数据库进行交互。\n\n请注意，将数据存储在内存中意味着每次停止服务器时，相册集都会丢失，然后在启动服务器时重新创建。\n\n\n# 编写代码\n\n 1. 使用文本编辑器，在 web 服务目录中创建一个名为 main.go 的文件。您将在该文件中编写 Go 代码。\n\n 2. 在 main.go 文件的顶部，粘贴以下包声明。\n\npackage main\n\n\n独立程序（与库相对）始终位于程序包主目录中。\n\n 3. 在包声明下面，使用以下代码来定义 相册 的 struct 数据结构。您将使用它将相册数据存储在内存中。\n\nstruct 标记，如 json:“artist”，指定当结构的内容被序列化为 json 时，字段的名称应该是什么。如果没有它们，JSON 将使用结构的大写字段名——这种风格在 JSON 中并不常见。\n\n// album represents data about a record album.\ntype album struct {\n    ID     string  `json:"id"`\n    Title  string  `json:"title"`\n    Artist string  `json:"artist"`\n    Price  float64 `json:"price"`\n}\n\n\n 4. 在刚添加的结构声明下面，粘贴下面的相册结构片段，其中包含将用于启动的数据。\n\n// albums slice to seed record album data.\nvar albums = []album{\n    {ID: "1", Title: "Blue Train", Artist: "John Coltrane", Price: 56.99},\n    {ID: "2", Title: "Jeru", Artist: "Gerry Mulligan", Price: 17.99},\n    {ID: "3", Title: "Sarah Vaughan and Clifford Brown", Artist: "Sarah Vaughan", Price: 39.99},\n}\n\n\n接下来，您将编写代码来实现您的第一个接口。\n\n\n# 编写处理程序以返回所有项目\n\n当客户端在 GET/albums 上发出请求时，您希望以 JSON 的形式返回所有相册。\n\n为此，您将编写以下内容：\n\n * 准备响应的逻辑\n * 将请求路径映射到逻辑的代码\n\n> 请注意，这与它们在运行时的执行方式相反，但您要先添加依赖项，然后添加依赖于它们的代码。\n\n\n# 编写代码\n\n 1. 在上一节中添加的结构代码下面，粘贴以下代码以获得相册列表。\n\n这个 getAlbums 方法从相册结构的切片中创建 JSON，并将 JSON 写入响应中。\n\n// getAlbums responds with the list of all albums as JSON.\nfunc getAlbums(c *gin.Context) {\n    c.IndentedJSON(http.StatusOK, albums)\n}\n\n\n在此代码中，您：\n\n * 编写一个获取 gin.Context 参数的 getAlbums 函数。请注意，您可以给这个函数取任何名称——Gin 和 Go 都不需要特定的函数名称格式。\n * gin.Contex 是代码最重要的部分。它携带请求细节、验证和序列化 JSON 等等。（尽管名称相似，但这与 Go 的内置上下文包不同。）\n * 调用 Context.IndetedJSON 将结构序列化为 JSON 并将其添加到响应中。\n * 函数的第一个参数是要发送到客户端的 HTTP 状态代码。在这里，您从 net/http 包传递 StatusOK 常量，以指示 200 OK。\n   \n   > 请注意，您可以将 Context.IndetedJSON 替换为对 Context.JSON 的调用，以发送更紧凑的 JSON。在实践中，缩进形式在调试时更容易使用，并且大小差异通常很小。\n\n 2. 在 main.go 的顶部附近，就在相册切片声明的下方，粘贴下面的代码，将处理程序函数分配给端点路径。\n\n这将建立一个关联，getAlbums 在该关联中处理对/albums 端点路径的请求。\n\nfunc main() {\n    router := gin.Default()\n    router.GET("/albums", getAlbums)\n\n    router.Run("localhost:8080")\n}\n\n\n在此代码中，您：\n\n * 使用 Default 方法初始化 Gin 路由器。\n * 使用 GET 方式将 GET HTTP 方法和/相册路径与处理程序函数相关联。\n   \n   > 请注意，您正在传递 getAlbums 函数的名称。这与传递函数的结果不同，后者是通过传递 getAlbums（）来实现的（注意括号）。\n\n * 使用 Run 方法将路由器连接到 http.Server 并启动服务器。\n\n 3. 在 main.go 的顶部附近，就在包声明的下方，导入您需要支持刚刚编写的代码的包。\n\n第一行代码应该如下所示：\n\npackage main\n\nimport (\n    "net/http"\n\n    "github.com/gin-gonic/gin"\n)\n\n\n 4. 保存 main.go 文件\n\n\n# 运行代码\n\n 1. 开始将 Gin 模块作为依赖项进行跟踪。\n\n在命令行中，使用 go-get 添加 github.com/gin-gonic/gin 模块作为模块的依赖项。使用句点参数表示“获取当前目录中代码的依赖项”\n\n$ go get .\ngo get: added github.com/gin-gonic/gin v1.7.2\n\n\nGo 解析并下载了此依赖项，以满足您在上一步中添加的导入声明。\n\n 2. 在包含 main.go 的目录中的命令行中，运行代码。使用句点参数表示“在当前目录中运行代码”\n\ngo run .\n\n\n代码运行后，您就有了一个正在运行的 HTTP 服务器，可以向该服务器发送请求。\n\n 3. 在一个新的命令行窗口中，使用 curl 向正在运行的 web 服务发出请求。\n\ncurl http://localhost:8080/albums\n\n\n该命令应显示为服务原始设定的数据。\n\n[\n        {\n                "id": "1",\n                "title": "Blue Train",\n                "artist": "John Coltrane",\n                "price": 56.99\n        },\n        {\n                "id": "2",\n                "title": "Jeru",\n                "artist": "Gerry Mulligan",\n                "price": 17.99\n        },\n        {\n                "id": "3",\n                "title": "Sarah Vaughan and Clifford Brown",\n                "artist": "Sarah Vaughan",\n                "price": 39.99\n        }\n]\n\n\n您已经启动了一个 API！在下一节中，您将创建另一个端点，其中包含处理 POST 请求以添加项目的代码。\n\n\n# 编写处理程序以添加新项\n\n当客户端在/相册上发出 POST 请求时，您希望将请求正文中描述的相册添加到现有相册数据中。\n\n为此，您将编写以下内容：\n\n * 将新相册添加到现有列表的逻辑。\n * 将 POST 请求路由到您的逻辑的一段代码。\n\n\n# 编写代码\n\n 1. 添加代码以将相册数据添加到相册列表中。\n\n在 import 语句之后的某个位置，粘贴以下代码。（文件的末尾是编写这段代码的好地方，但 Go 并没有强制执行声明函数的顺序。）\n\n// postAlbums adds an album from JSON received in the request body.\nfunc postAlbums(c *gin.Context) {\n    var newAlbum album\n\n    // Call BindJSON to bind the received JSON to\n    // newAlbum.\n    if err := c.BindJSON(&newAlbum); err != nil {\n        return\n    }\n\n    // Add the new album to the slice.\n    albums = append(albums, newAlbum)\n    c.IndentedJSON(http.StatusCreated, newAlbum)\n}\n\n\n在此代码中，您：\n\n * 使用 Context.BindJSON 将请求正文绑定到 newAlbum。\n * 将从 JSON 初始化的相册结构附加到相册切片。\n * 在响应中添加一个 201 状态代码，以及表示您添加的相册的 JSON。\n\n 2. 更改主函数，使其包含 router.POST 函数，如下所示。\n\nfunc main() {\n    router := gin.Default()\n    router.GET("/albums", getAlbums)\n    router.POST("/albums", postAlbums)\n\n    router.Run("localhost:8080")\n}\n\n\n在此代码中，您：\n\n * 将/albums 路径上的 POST 方法与 postAlbums 函数相关联。\n * 使用 Gin，您可以将处理程序与 HTTP 方法和路径组合相关联。通过这种方式，您可以根据客户端使用的方法将发送到单个路径的请求单独路由。\n\n\n# 运行代码\n\n 1. 如果服务器仍在从最后一部分运行，请停止它。\n\n 2. 在包含 main.go 的目录中的命令行中，运行代码。\n    \n    $go run .\n    \n\n 3. 从另一个命令行窗口，使用 curl 向正在运行的 web 服务发出请求。\n\n    curl http://localhost:8080/albums \\\n    --include \\\n    --header "Content-Type: application/json" \\\n    --request "POST" \\\n    --data \'{"id": "4","title": "The Modern Sound of Betty Carter","artist": "Betty Carter","price": 49.99}\'\n\n\n该命令应该为添加的相册显示标题和 JSON。\n\n    HTTP/1.1 201 Created\n    Content-Type: application/json; charset=utf-8\n    Date: Wed, 02 Jun 2021 00:34:12 GMT\n    Content-Length: 116\n    {\n        "id": "4",\n        "title": "The Modern Sound of Betty Carter",\n        "artist": "Betty Carter",\n        "price": 49.99\n    }\n\n\n 4. 与上一节一样，使用 curl 检索相册的完整列表，您可以使用该列表来确认是否添加了新相册。\n\n    curl http://localhost:8080/albums \\\n    --header "Content-Type: application/json" \\\n    --request "GET"\n\n\n该命令应显示相册列表。\n\n    [\n            {\n                    "id": "1",\n                    "title": "Blue Train",\n                    "artist": "John Coltrane",\n                    "price": 56.99\n            },\n            {\n                    "id": "2",\n                    "title": "Jeru",\n                    "artist": "Gerry Mulligan",\n                    "price": 17.99\n            },\n            {\n                    "id": "3",\n                    "title": "Sarah Vaughan and Clifford Brown",\n                    "artist": "Sarah Vaughan",\n                    "price": 39.99\n            },\n            {\n                    "id": "4",\n                    "title": "The Modern Sound of Betty Carter",\n                    "artist": "Betty Carter",\n                    "price": 49.99\n            }\n    ]\n\n\n在下一节中，您将添加代码来处理特定项目的 GET。\n\n\n# 编写处理程序以返回特定项\n\n当客户端请求 GET/albums/[id]时，您希望返回 id 与 id 路径参数匹配的相册。\n\n为此，您将：\n\n * 添加逻辑以检索请求的相册。\n * 将路径映射到逻辑。\n\n\n# 编写代码\n\n在上一节中添加的 postAlbums 函数下面，粘贴以下代码以检索特定的相册。\n\n此 getAlbumByID 函数将提取请求路径中的 ID，然后找到匹配的相册。\n\n    // getAlbumByID locates the album whose ID value matches the id\n    // parameter sent by the client, then returns that album as a response.\n    func getAlbumByID(c *gin.Context) {\n        id := c.Param("id")\n\n        // Loop over the list of albums, looking for\n        // an album whose ID value matches the parameter.\n        for _, a := range albums {\n            if a.ID == id {\n                c.IndentedJSON(http.StatusOK, a)\n                return\n            }\n        }\n        c.IndentedJSON(http.StatusNotFound, gin.H{"message": "album not found"})\n    }\n\n\n在此代码中，您：\n\n * 使用 Context.Param 从 URL 中检索 id 路径参数。将此处理程序映射到路径时，将在路径中包含参数的占位符。\n\n * 循环遍历切片中的相册结构，查找 ID 字段值与 ID 参数值匹配的结构。如果找到了，则将该相册结构序列化为 JSON，并将其作为响应返回，并返回一个 200 OK 的 HTTP 代码。\n   \n   > 如上所述，真实世界的服务可能会使用数据库查询来执行此查找。\n\n * 如果找不到相册，则返回 HTTP.StatusNotFound 的 HTTP 404 错误。\n\n 2. 最后，更改 main，使其包含一个对 router.GET 的新调用，其中的路径现在是/albums/：id，如以下示例所示。\n\n    func main() {\n        router := gin.Default()\n        router.GET("/albums", getAlbums)\n        router.GET("/albums/:id", getAlbumByID)\n        router.POST("/albums", postAlbums)\n\n        router.Run("localhost:8080")\n    }\n\n\n在此代码中，您：\n\n * 将/albums/：id 路径与 getAlbumByID 函数相关联。在 Gin 中，路径中项目前面的冒号表示该项目是一个路径参数。\n\n\n# 运行代码\n\n如果服务器仍在从最后一部分运行，请停止它。\n\n在包含 main.go 的目录中的命令行中，运行代码以启动服务器。\n\n$go run .\n\n\n从另一个命令行窗口，使用 curl 向正在运行的 web 服务发出请求。\n\ncurl http://localhost:8080/albums/2\n\n\n该命令应该显示您使用其 ID 的相册的 JSON。如果没有找到相册，您将得到带有错误消息的 JSON。\n\n{\n        "id": "2",\n        "title": "Jeru",\n        "artist": "Gerry Mulligan",\n        "price": 17.99\n}\n\n\n\n# 结论\n\n祝贺您刚刚使用 Go 和 Gin 编写了一个简单的 RESTful web 服务。\n\n\n# 建议的下一个主题\n\n * 如果你是 Go 新手，你会在Effective Go和How to write Go code中找到有用的最佳实践。\n * Go Tour是对 Go 基础知识的一个很好的循序渐进的介绍。\n * 有关 Gin 的更多信息，请参阅Gin Web Framework package documentation文档或Gin Web Framework docs文档。\n\n\n# 已完成代码\n\n本节包含使用本教程构建的应用程序的代码。\n\npackage main\n\nimport (\n    "net/http"\n\n    "github.com/gin-gonic/gin"\n)\n\n// album represents data about a record album.\ntype album struct {\n    ID     string  `json:"id"`\n    Title  string  `json:"title"`\n    Artist string  `json:"artist"`\n    Price  float64 `json:"price"`\n}\n\n// albums slice to seed record album data.\nvar albums = []album{\n    {ID: "1", Title: "Blue Train", Artist: "John Coltrane", Price: 56.99},\n    {ID: "2", Title: "Jeru", Artist: "Gerry Mulligan", Price: 17.99},\n    {ID: "3", Title: "Sarah Vaughan and Clifford Brown", Artist: "Sarah Vaughan", Price: 39.99},\n}\n\nfunc main() {\n    router := gin.Default()\n    router.GET("/albums", getAlbums)\n    router.GET("/albums/:id", getAlbumByID)\n    router.POST("/albums", postAlbums)\n\n    router.Run("localhost:8080")\n}\n\n// getAlbums responds with the list of all albums as JSON.\nfunc getAlbums(c *gin.Context) {\n    c.IndentedJSON(http.StatusOK, albums)\n}\n\n// postAlbums adds an album from JSON received in the request body.\nfunc postAlbums(c *gin.Context) {\n    var newAlbum album\n\n    // Call BindJSON to bind the received JSON to\n    // newAlbum.\n    if err := c.BindJSON(&newAlbum); err != nil {\n        return\n    }\n\n    // Add the new album to the slice.\n    albums = append(albums, newAlbum)\n    c.IndentedJSON(http.StatusCreated, newAlbum)\n}\n\n// getAlbumByID locates the album whose ID value matches the id\n// parameter sent by the client, then returns that album as a response.\nfunc getAlbumByID(c *gin.Context) {\n    id := c.Param("id")\n\n    // Loop through the list of albums, looking for\n    // an album whose ID value matches the parameter.\n    for _, a := range albums {\n        if a.ID == id {\n            c.IndentedJSON(http.StatusOK, a)\n            return\n        }\n    }\n    c.IndentedJSON(http.StatusNotFound, gin.H{"message": "album not found"})\n}\n',normalizedContent:'本教程介绍了使用 go 和 gin web framework（gin）编写 restful web 服务 api 的基本知识。\n\n如果您对 go 及其工具有基本的熟悉，您将充分利用本教程。如果这是你第一次接触 go 语言，请参阅教程：快速入门。\n\ngin 简化了许多与构建 web 应用程序（包括 web 服务）相关的编码任务。在本教程中，您将使用 gin 来创建路由请求、检索请求详细信息，并为响应封送 json。\n\n在本教程中，您将构建一个具有两个端点的 restful api 服务器。您的示例项目将是一个关于老式爵士乐唱片的数据存储库。\n\n本教程包括以下部分：\n\n * 设计 api 接口。\n * 为您的代码创建一个文件夹。\n * 创建数据。\n * 编写一个处理程序以返回所有项。\n * 编写一个处理程序来添加一个新项。\n * 编写一个处理程序以返回特定项。\n\n> 注意：有关其他相关知识，请参见教程。\n\n\n# 课程准备\n\ngo 1.16 或更高版本的安装。有关安装说明，请参阅安装 go。\n\n用于编辑代码的工具。您拥有的任何文本编辑器都可以正常工作。\n\n一种命令终端。go 在 linux 和 mac 上以及 windows 中的 powershell 或 cmd 上使用任何终端都能很好地工作。\n\ncurl 工具。在 linux 和 mac 上，应该已经安装了。在 windows 上，它包含在 windows 10 insider 版本 17063 及更高版本中。对于早期的 windows 版本，您可能需要安装它。有关更多信息，请参阅tar and curl come to windows。\n\n\n# api 接口设计\n\n您将构建一个 api，该 api 可以访问一家出售老式黑胶唱片的商店。因此，您需要提供接口，客户端可以通过这些接口为用户获取和添加相册。\n\n在开发 api 时，通常从设计接口开始。如果接口易于理解，那么 api 的用户将获得更大的成功。\n\n以下是您将在本教程中创建的接口。\n\n 1. /albums\n    \n    1. get–获取所有相册的列表，以 json 形式返回。\n    2. post–从以 json 形式发送的请求数据中添加新相册。\n\n 2. /albums/{id}\n    \n    1. get–通过相册 id 获取相册，并以 json 形式返回相册数据。\n\n接下来，您将为代码创建一个文件夹。\n\n\n# 为代码创建文件夹\n\n首先，为您将要编写的代码创建一个项目。\n\n 1. 打开命令提示符并更改到主目录。\n\n在 linux 或 mac 上：\n\ncd\n\n\n在 windows 上：\n\ncd %homepath%\n\n\n 2. 使用命令提示符，为代码创建一个名为 web-service-gin 的目录。\n\nmkdir web-service-gin\ncd web-service-gin\n\n\n创建一个可以在其中管理依赖关系的模块。\n\n运行 go-mod-init 命令，为其提供代码所在模块的路径。\n\n$ go mod init example.com/web-service-gin\ngo: creating new go.mod: module example.com/web-service-gin\n\n\n此命令创建一个 go.mod 文件，您添加的依赖项将列在该文件中进行跟踪。有关详细信息，请参阅管理依赖关系。\n\n接下来，您将设计用于处理数据的数据结构。\n\n\n# 创建数据\n\n为了使教程保持简单，您将把数据存储在内存中。更深层课程的 api 将与数据库进行交互。\n\n请注意，将数据存储在内存中意味着每次停止服务器时，相册集都会丢失，然后在启动服务器时重新创建。\n\n\n# 编写代码\n\n 1. 使用文本编辑器，在 web 服务目录中创建一个名为 main.go 的文件。您将在该文件中编写 go 代码。\n\n 2. 在 main.go 文件的顶部，粘贴以下包声明。\n\npackage main\n\n\n独立程序（与库相对）始终位于程序包主目录中。\n\n 3. 在包声明下面，使用以下代码来定义 相册 的 struct 数据结构。您将使用它将相册数据存储在内存中。\n\nstruct 标记，如 json:“artist”，指定当结构的内容被序列化为 json 时，字段的名称应该是什么。如果没有它们，json 将使用结构的大写字段名——这种风格在 json 中并不常见。\n\n// album represents data about a record album.\ntype album struct {\n    id     string  `json:"id"`\n    title  string  `json:"title"`\n    artist string  `json:"artist"`\n    price  float64 `json:"price"`\n}\n\n\n 4. 在刚添加的结构声明下面，粘贴下面的相册结构片段，其中包含将用于启动的数据。\n\n// albums slice to seed record album data.\nvar albums = []album{\n    {id: "1", title: "blue train", artist: "john coltrane", price: 56.99},\n    {id: "2", title: "jeru", artist: "gerry mulligan", price: 17.99},\n    {id: "3", title: "sarah vaughan and clifford brown", artist: "sarah vaughan", price: 39.99},\n}\n\n\n接下来，您将编写代码来实现您的第一个接口。\n\n\n# 编写处理程序以返回所有项目\n\n当客户端在 get/albums 上发出请求时，您希望以 json 的形式返回所有相册。\n\n为此，您将编写以下内容：\n\n * 准备响应的逻辑\n * 将请求路径映射到逻辑的代码\n\n> 请注意，这与它们在运行时的执行方式相反，但您要先添加依赖项，然后添加依赖于它们的代码。\n\n\n# 编写代码\n\n 1. 在上一节中添加的结构代码下面，粘贴以下代码以获得相册列表。\n\n这个 getalbums 方法从相册结构的切片中创建 json，并将 json 写入响应中。\n\n// getalbums responds with the list of all albums as json.\nfunc getalbums(c *gin.context) {\n    c.indentedjson(http.statusok, albums)\n}\n\n\n在此代码中，您：\n\n * 编写一个获取 gin.context 参数的 getalbums 函数。请注意，您可以给这个函数取任何名称——gin 和 go 都不需要特定的函数名称格式。\n * gin.contex 是代码最重要的部分。它携带请求细节、验证和序列化 json 等等。（尽管名称相似，但这与 go 的内置上下文包不同。）\n * 调用 context.indetedjson 将结构序列化为 json 并将其添加到响应中。\n * 函数的第一个参数是要发送到客户端的 http 状态代码。在这里，您从 net/http 包传递 statusok 常量，以指示 200 ok。\n   \n   > 请注意，您可以将 context.indetedjson 替换为对 context.json 的调用，以发送更紧凑的 json。在实践中，缩进形式在调试时更容易使用，并且大小差异通常很小。\n\n 2. 在 main.go 的顶部附近，就在相册切片声明的下方，粘贴下面的代码，将处理程序函数分配给端点路径。\n\n这将建立一个关联，getalbums 在该关联中处理对/albums 端点路径的请求。\n\nfunc main() {\n    router := gin.default()\n    router.get("/albums", getalbums)\n\n    router.run("localhost:8080")\n}\n\n\n在此代码中，您：\n\n * 使用 default 方法初始化 gin 路由器。\n * 使用 get 方式将 get http 方法和/相册路径与处理程序函数相关联。\n   \n   > 请注意，您正在传递 getalbums 函数的名称。这与传递函数的结果不同，后者是通过传递 getalbums（）来实现的（注意括号）。\n\n * 使用 run 方法将路由器连接到 http.server 并启动服务器。\n\n 3. 在 main.go 的顶部附近，就在包声明的下方，导入您需要支持刚刚编写的代码的包。\n\n第一行代码应该如下所示：\n\npackage main\n\nimport (\n    "net/http"\n\n    "github.com/gin-gonic/gin"\n)\n\n\n 4. 保存 main.go 文件\n\n\n# 运行代码\n\n 1. 开始将 gin 模块作为依赖项进行跟踪。\n\n在命令行中，使用 go-get 添加 github.com/gin-gonic/gin 模块作为模块的依赖项。使用句点参数表示“获取当前目录中代码的依赖项”\n\n$ go get .\ngo get: added github.com/gin-gonic/gin v1.7.2\n\n\ngo 解析并下载了此依赖项，以满足您在上一步中添加的导入声明。\n\n 2. 在包含 main.go 的目录中的命令行中，运行代码。使用句点参数表示“在当前目录中运行代码”\n\ngo run .\n\n\n代码运行后，您就有了一个正在运行的 http 服务器，可以向该服务器发送请求。\n\n 3. 在一个新的命令行窗口中，使用 curl 向正在运行的 web 服务发出请求。\n\ncurl http://localhost:8080/albums\n\n\n该命令应显示为服务原始设定的数据。\n\n[\n        {\n                "id": "1",\n                "title": "blue train",\n                "artist": "john coltrane",\n                "price": 56.99\n        },\n        {\n                "id": "2",\n                "title": "jeru",\n                "artist": "gerry mulligan",\n                "price": 17.99\n        },\n        {\n                "id": "3",\n                "title": "sarah vaughan and clifford brown",\n                "artist": "sarah vaughan",\n                "price": 39.99\n        }\n]\n\n\n您已经启动了一个 api！在下一节中，您将创建另一个端点，其中包含处理 post 请求以添加项目的代码。\n\n\n# 编写处理程序以添加新项\n\n当客户端在/相册上发出 post 请求时，您希望将请求正文中描述的相册添加到现有相册数据中。\n\n为此，您将编写以下内容：\n\n * 将新相册添加到现有列表的逻辑。\n * 将 post 请求路由到您的逻辑的一段代码。\n\n\n# 编写代码\n\n 1. 添加代码以将相册数据添加到相册列表中。\n\n在 import 语句之后的某个位置，粘贴以下代码。（文件的末尾是编写这段代码的好地方，但 go 并没有强制执行声明函数的顺序。）\n\n// postalbums adds an album from json received in the request body.\nfunc postalbums(c *gin.context) {\n    var newalbum album\n\n    // call bindjson to bind the received json to\n    // newalbum.\n    if err := c.bindjson(&newalbum); err != nil {\n        return\n    }\n\n    // add the new album to the slice.\n    albums = append(albums, newalbum)\n    c.indentedjson(http.statuscreated, newalbum)\n}\n\n\n在此代码中，您：\n\n * 使用 context.bindjson 将请求正文绑定到 newalbum。\n * 将从 json 初始化的相册结构附加到相册切片。\n * 在响应中添加一个 201 状态代码，以及表示您添加的相册的 json。\n\n 2. 更改主函数，使其包含 router.post 函数，如下所示。\n\nfunc main() {\n    router := gin.default()\n    router.get("/albums", getalbums)\n    router.post("/albums", postalbums)\n\n    router.run("localhost:8080")\n}\n\n\n在此代码中，您：\n\n * 将/albums 路径上的 post 方法与 postalbums 函数相关联。\n * 使用 gin，您可以将处理程序与 http 方法和路径组合相关联。通过这种方式，您可以根据客户端使用的方法将发送到单个路径的请求单独路由。\n\n\n# 运行代码\n\n 1. 如果服务器仍在从最后一部分运行，请停止它。\n\n 2. 在包含 main.go 的目录中的命令行中，运行代码。\n    \n    $go run .\n    \n\n 3. 从另一个命令行窗口，使用 curl 向正在运行的 web 服务发出请求。\n\n    curl http://localhost:8080/albums \\\n    --include \\\n    --header "content-type: application/json" \\\n    --request "post" \\\n    --data \'{"id": "4","title": "the modern sound of betty carter","artist": "betty carter","price": 49.99}\'\n\n\n该命令应该为添加的相册显示标题和 json。\n\n    http/1.1 201 created\n    content-type: application/json; charset=utf-8\n    date: wed, 02 jun 2021 00:34:12 gmt\n    content-length: 116\n    {\n        "id": "4",\n        "title": "the modern sound of betty carter",\n        "artist": "betty carter",\n        "price": 49.99\n    }\n\n\n 4. 与上一节一样，使用 curl 检索相册的完整列表，您可以使用该列表来确认是否添加了新相册。\n\n    curl http://localhost:8080/albums \\\n    --header "content-type: application/json" \\\n    --request "get"\n\n\n该命令应显示相册列表。\n\n    [\n            {\n                    "id": "1",\n                    "title": "blue train",\n                    "artist": "john coltrane",\n                    "price": 56.99\n            },\n            {\n                    "id": "2",\n                    "title": "jeru",\n                    "artist": "gerry mulligan",\n                    "price": 17.99\n            },\n            {\n                    "id": "3",\n                    "title": "sarah vaughan and clifford brown",\n                    "artist": "sarah vaughan",\n                    "price": 39.99\n            },\n            {\n                    "id": "4",\n                    "title": "the modern sound of betty carter",\n                    "artist": "betty carter",\n                    "price": 49.99\n            }\n    ]\n\n\n在下一节中，您将添加代码来处理特定项目的 get。\n\n\n# 编写处理程序以返回特定项\n\n当客户端请求 get/albums/[id]时，您希望返回 id 与 id 路径参数匹配的相册。\n\n为此，您将：\n\n * 添加逻辑以检索请求的相册。\n * 将路径映射到逻辑。\n\n\n# 编写代码\n\n在上一节中添加的 postalbums 函数下面，粘贴以下代码以检索特定的相册。\n\n此 getalbumbyid 函数将提取请求路径中的 id，然后找到匹配的相册。\n\n    // getalbumbyid locates the album whose id value matches the id\n    // parameter sent by the client, then returns that album as a response.\n    func getalbumbyid(c *gin.context) {\n        id := c.param("id")\n\n        // loop over the list of albums, looking for\n        // an album whose id value matches the parameter.\n        for _, a := range albums {\n            if a.id == id {\n                c.indentedjson(http.statusok, a)\n                return\n            }\n        }\n        c.indentedjson(http.statusnotfound, gin.h{"message": "album not found"})\n    }\n\n\n在此代码中，您：\n\n * 使用 context.param 从 url 中检索 id 路径参数。将此处理程序映射到路径时，将在路径中包含参数的占位符。\n\n * 循环遍历切片中的相册结构，查找 id 字段值与 id 参数值匹配的结构。如果找到了，则将该相册结构序列化为 json，并将其作为响应返回，并返回一个 200 ok 的 http 代码。\n   \n   > 如上所述，真实世界的服务可能会使用数据库查询来执行此查找。\n\n * 如果找不到相册，则返回 http.statusnotfound 的 http 404 错误。\n\n 2. 最后，更改 main，使其包含一个对 router.get 的新调用，其中的路径现在是/albums/：id，如以下示例所示。\n\n    func main() {\n        router := gin.default()\n        router.get("/albums", getalbums)\n        router.get("/albums/:id", getalbumbyid)\n        router.post("/albums", postalbums)\n\n        router.run("localhost:8080")\n    }\n\n\n在此代码中，您：\n\n * 将/albums/：id 路径与 getalbumbyid 函数相关联。在 gin 中，路径中项目前面的冒号表示该项目是一个路径参数。\n\n\n# 运行代码\n\n如果服务器仍在从最后一部分运行，请停止它。\n\n在包含 main.go 的目录中的命令行中，运行代码以启动服务器。\n\n$go run .\n\n\n从另一个命令行窗口，使用 curl 向正在运行的 web 服务发出请求。\n\ncurl http://localhost:8080/albums/2\n\n\n该命令应该显示您使用其 id 的相册的 json。如果没有找到相册，您将得到带有错误消息的 json。\n\n{\n        "id": "2",\n        "title": "jeru",\n        "artist": "gerry mulligan",\n        "price": 17.99\n}\n\n\n\n# 结论\n\n祝贺您刚刚使用 go 和 gin 编写了一个简单的 restful web 服务。\n\n\n# 建议的下一个主题\n\n * 如果你是 go 新手，你会在effective go和how to write go code中找到有用的最佳实践。\n * go tour是对 go 基础知识的一个很好的循序渐进的介绍。\n * 有关 gin 的更多信息，请参阅gin web framework package documentation文档或gin web framework docs文档。\n\n\n# 已完成代码\n\n本节包含使用本教程构建的应用程序的代码。\n\npackage main\n\nimport (\n    "net/http"\n\n    "github.com/gin-gonic/gin"\n)\n\n// album represents data about a record album.\ntype album struct {\n    id     string  `json:"id"`\n    title  string  `json:"title"`\n    artist string  `json:"artist"`\n    price  float64 `json:"price"`\n}\n\n// albums slice to seed record album data.\nvar albums = []album{\n    {id: "1", title: "blue train", artist: "john coltrane", price: 56.99},\n    {id: "2", title: "jeru", artist: "gerry mulligan", price: 17.99},\n    {id: "3", title: "sarah vaughan and clifford brown", artist: "sarah vaughan", price: 39.99},\n}\n\nfunc main() {\n    router := gin.default()\n    router.get("/albums", getalbums)\n    router.get("/albums/:id", getalbumbyid)\n    router.post("/albums", postalbums)\n\n    router.run("localhost:8080")\n}\n\n// getalbums responds with the list of all albums as json.\nfunc getalbums(c *gin.context) {\n    c.indentedjson(http.statusok, albums)\n}\n\n// postalbums adds an album from json received in the request body.\nfunc postalbums(c *gin.context) {\n    var newalbum album\n\n    // call bindjson to bind the received json to\n    // newalbum.\n    if err := c.bindjson(&newalbum); err != nil {\n        return\n    }\n\n    // add the new album to the slice.\n    albums = append(albums, newalbum)\n    c.indentedjson(http.statuscreated, newalbum)\n}\n\n// getalbumbyid locates the album whose id value matches the id\n// parameter sent by the client, then returns that album as a response.\nfunc getalbumbyid(c *gin.context) {\n    id := c.param("id")\n\n    // loop through the list of albums, looking for\n    // an album whose id value matches the parameter.\n    for _, a := range albums {\n        if a.id == id {\n            c.indentedjson(http.statusok, a)\n            return\n        }\n    }\n    c.indentedjson(http.statusnotfound, gin.h{"message": "album not found"})\n}\n',charsets:{cjk:!0}},{title:"Go语言的下载和安装",frontmatter:{title:"Go语言的下载和安装",date:"2023-04-09T09:55:22.000Z",permalink:"/pages/GoTour/001/"},regularPath:"/03.%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91/01.Go%E8%AF%AD%E8%A8%80%E6%96%87%E6%A1%A3%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91/02.Go%E8%AF%AD%E8%A8%80%E7%9A%84%E4%B8%8B%E8%BD%BD%E5%92%8C%E5%AE%89%E8%A3%85.html",relativePath:"03.中文翻译/01.Go语言文档中文翻译/02.Go语言的下载和安装.md",key:"v-076a0add",path:"/pages/GoTour/001/",headers:[{level:2,title:"Go语言的下载与安装",slug:"go语言的下载与安装",normalizedTitle:"go语言的下载与安装",charIndex:2},{level:3,title:"Go的下载",slug:"go的下载",normalizedTitle:"go的下载",charIndex:156},{level:3,title:"Go的安装",slug:"go的安装",normalizedTitle:"go的安装",charIndex:342},{level:4,title:"Linux系统下的安装",slug:"linux系统下的安装",normalizedTitle:"linux系统下的安装",charIndex:351},{level:4,title:"Mac系统下的安装",slug:"mac系统下的安装",normalizedTitle:"mac系统下的安装",charIndex:865},{level:4,title:"windows系统下的安装",slug:"windows系统下的安装",normalizedTitle:"windows系统下的安装",charIndex:1063},{level:3,title:"执行代码",slug:"执行代码",normalizedTitle:"执行代码",charIndex:41}],headersStr:"Go语言的下载与安装 Go的下载 Go的安装 Linux系统下的安装 Mac系统下的安装 windows系统下的安装 执行代码",content:"# Go语言的下载与安装\n\n>  1. 下载。\n>  2. 去安装。\n>  3. 执行代码。\n\n按照此处描述的步骤快速下载并安装。\n\n有关安装的其他内容，您可能对以下内容感兴趣：\n\n * Go安装管理--如何安装多个版本并卸载。\n * 从源代码开始安装——如何检查源代码，在自己的机器上构建并运行它们。\n\n\n# Go的下载\n\n单击下面的按钮下载Go安装程序。\n\n * 下载Go for Linux\n * 下载Go for Mac(ARM64)\n * 下载Go for Mac(x86-64)\n * 下载Go for Window\n * 下载Go for Source\n\n> 注意：默认情况下，go命令使用谷歌运行的go模块镜像和go校验和数据库下载并验证模块。了解更多信息。\n\n\n# Go的安装\n\n# Linux系统下的安装\n\n 1. 将下载的压缩文件提取到/usr/local中，在/usr/local/Go中创建Go的树形目录。\n\n重要提示：此步骤将在提取之前删除/usr/local/go上以前的安装（如果有）。请在继续操作之前备份所有数据。\n\n比如，以root用户身份或通过sudo运行以下操作：\n\nrm-rf/usr/local/go&&tar-C/usr/local-xzf go1.14.3.linux-amd64.tar.gz\n2. 将/usr/local/go/bin添加到PATH环境变量中。 您可以通过将以下行添加到$HOME/.profile或/etc/profile（用于全系统安装）来完成此操作：\n\nexport PATH=$PATH:/usr/local/go/bin\n\n注意：对配置文件所做的更改可能要等到下次登录计算机时才能应用。要立即应用更改，只需直接运行shell命令，或者使用source$HOME/.profile等命令从概要文件中执行这些命令。\n3. 通过打开命令提示符并键入以下命令来验证您是否已安装Go：\n\n$go version\n4. 确认该命令打印出的已安装的Go版本。\n\n# Mac系统下的安装\n\n 1. 打开您下载的软件包文件，然后按照提示安装Go。\n\n该软件包将Go发行版安装到/usr/local/Go。该包应该将/usr/local/go/bin目录放在PATH环境变量中。您可能需要重新启动任何打开的终端会话才能使更改生效。\n2. 通过打开命令提示符并键入以下命令来验证您是否已安装Go：\n\n$go version\n3. 确认该命令打印已安装的Go版本。\n\n# windows系统下的安装\n\n 1. 打开您下载的MSI文件，然后按照提示安装Go。\n\n默认情况下，安装程序将安装Go to Program Files或Program Files（x86）。您可以根据需要更改位置。安装后，您需要关闭并重新打开任何打开的命令提示符，以便在命令提示符下反映安装程序对环境所做的更改。 2. 请验证您是否已安装Go。\n\n 1. 在Windows中，单击“开始”菜单。\n 2. 在菜单的搜索框中，键入cmd，然后按Enter键。\n 3. 在出现的“命令提示”窗口中，键入以下命令： $go version\n 4. 确认该命令打印已安装的Go版本。\n\n\n# 执行代码\n\n安装配置完毕！访问入门教程，编写一些简单的Go代码。大约需要10分钟完成。",normalizedContent:"# go语言的下载与安装\n\n>  1. 下载。\n>  2. 去安装。\n>  3. 执行代码。\n\n按照此处描述的步骤快速下载并安装。\n\n有关安装的其他内容，您可能对以下内容感兴趣：\n\n * go安装管理--如何安装多个版本并卸载。\n * 从源代码开始安装——如何检查源代码，在自己的机器上构建并运行它们。\n\n\n# go的下载\n\n单击下面的按钮下载go安装程序。\n\n * 下载go for linux\n * 下载go for mac(arm64)\n * 下载go for mac(x86-64)\n * 下载go for window\n * 下载go for source\n\n> 注意：默认情况下，go命令使用谷歌运行的go模块镜像和go校验和数据库下载并验证模块。了解更多信息。\n\n\n# go的安装\n\n# linux系统下的安装\n\n 1. 将下载的压缩文件提取到/usr/local中，在/usr/local/go中创建go的树形目录。\n\n重要提示：此步骤将在提取之前删除/usr/local/go上以前的安装（如果有）。请在继续操作之前备份所有数据。\n\n比如，以root用户身份或通过sudo运行以下操作：\n\nrm-rf/usr/local/go&&tar-c/usr/local-xzf go1.14.3.linux-amd64.tar.gz\n2. 将/usr/local/go/bin添加到path环境变量中。 您可以通过将以下行添加到$home/.profile或/etc/profile（用于全系统安装）来完成此操作：\n\nexport path=$path:/usr/local/go/bin\n\n注意：对配置文件所做的更改可能要等到下次登录计算机时才能应用。要立即应用更改，只需直接运行shell命令，或者使用source$home/.profile等命令从概要文件中执行这些命令。\n3. 通过打开命令提示符并键入以下命令来验证您是否已安装go：\n\n$go version\n4. 确认该命令打印出的已安装的go版本。\n\n# mac系统下的安装\n\n 1. 打开您下载的软件包文件，然后按照提示安装go。\n\n该软件包将go发行版安装到/usr/local/go。该包应该将/usr/local/go/bin目录放在path环境变量中。您可能需要重新启动任何打开的终端会话才能使更改生效。\n2. 通过打开命令提示符并键入以下命令来验证您是否已安装go：\n\n$go version\n3. 确认该命令打印已安装的go版本。\n\n# windows系统下的安装\n\n 1. 打开您下载的msi文件，然后按照提示安装go。\n\n默认情况下，安装程序将安装go to program files或program files（x86）。您可以根据需要更改位置。安装后，您需要关闭并重新打开任何打开的命令提示符，以便在命令提示符下反映安装程序对环境所做的更改。 2. 请验证您是否已安装go。\n\n 1. 在windows中，单击“开始”菜单。\n 2. 在菜单的搜索框中，键入cmd，然后按enter键。\n 3. 在出现的“命令提示”窗口中，键入以下命令： $go version\n 4. 确认该命令打印已安装的go版本。\n\n\n# 执行代码\n\n安装配置完毕！访问入门教程，编写一些简单的go代码。大约需要10分钟完成。",charsets:{cjk:!0}},{title:"使用Go开发Web应用程序",frontmatter:{title:"使用Go开发Web应用程序",date:"2023-04-16T09:58:36.000Z",permalink:"/pages/GoTour/005/"},regularPath:"/03.%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91/01.Go%E8%AF%AD%E8%A8%80%E6%96%87%E6%A1%A3%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91/06.%E4%BD%BF%E7%94%A8Go%E5%BC%80%E5%8F%91Web%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F.html",relativePath:"03.中文翻译/01.Go语言文档中文翻译/06.使用Go开发Web应用程序.md",key:"v-19eef250",path:"/pages/GoTour/005/",headers:[{level:4,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:4,title:"入门",slug:"入门",normalizedTitle:"入门",charIndex:179},{level:4,title:"数据结构",slug:"数据结构",normalizedTitle:"数据结构",charIndex:32},{level:4,title:"net/http软件包介绍（插叙）",slug:"net-http软件包介绍-插叙",normalizedTitle:"net/http软件包介绍（插叙）",charIndex:2952},{level:4,title:"使用net/http为wiki页面提供服务",slug:"使用net-http为wiki页面提供服务",normalizedTitle:"使用net/http为wiki页面提供服务",charIndex:3835},{level:4,title:"编辑页面",slug:"编辑页面",normalizedTitle:"编辑页面",charIndex:5767},{level:4,title:"html/template包",slug:"html-template包",normalizedTitle:"html/template包",charIndex:66},{level:4,title:"处理不存在的页面",slug:"处理不存在的页面",normalizedTitle:"处理不存在的页面",charIndex:10042},{level:4,title:"保存页面",slug:"保存页面",normalizedTitle:"保存页面",charIndex:1226},{level:4,title:"错误处理",slug:"错误处理",normalizedTitle:"错误处理",charIndex:11003},{level:4,title:"模板缓存",slug:"模板缓存",normalizedTitle:"模板缓存",charIndex:11992},{level:4,title:"验证",slug:"验证",normalizedTitle:"验证",charIndex:101},{level:4,title:"介绍函数文字和闭包",slug:"介绍函数文字和闭包",normalizedTitle:"介绍函数文字和闭包",charIndex:14526},{level:4,title:"试试看",slug:"试试看",normalizedTitle:"试试看",charIndex:16992},{level:4,title:"其他任务",slug:"其他任务",normalizedTitle:"其他任务",charIndex:19328}],headersStr:"简介 入门 数据结构 net/http软件包介绍（插叙） 使用net/http为wiki页面提供服务 编辑页面 html/template包 处理不存在的页面 保存页面 错误处理 模板缓存 验证 介绍函数文字和闭包 试试看 其他任务",content:'# 简介\n\n本教程涵盖以下内容：\n\n * 使用加载和保存方法创建数据结构\n * 使用net/http包构建web应用程序\n * 使用html/template包处理html模板\n * 使用regexp包验证用户输入\n * 使用闭包\n\n前置知识：\n\n * 编程经验\n * 了解基本的web技术（HTTP、HTML）\n * 一些UNIX/DOS命令行知识\n\n# 入门\n\n目前，您需要有一台FreeBSD、Linux、macOS或Windows机器才能运行Go。我们将使用$来表示命令提示符。\n\n安装Go（请参阅安装说明）。\n\n在GOPATH中为本教程创建一个新目录，并进入该目录：\n\n$mkdir gowiki\n$cd gowiki\n\n\n创建一个名为wiki.go的文件，在您喜欢的编辑器中打开它，然后添加以下行：\n\npackage main\n\nimport (\n "fmt"\n "io/ioutil"\n)\n\n\n我们从Go标准库导入fmt和ioutil包。稍后，当我们实现附加功能时，我们将向该导入声明添加更多的包。\n\n# 数据结构\n\n让我们从定义数据结构开始。wiki由一系列相互连接的页面组成，每个页面都有一个标题和一个正文（页面内容）。在这里，我们将Page定义为一个结构，其中有两个字段表示标题和正文。\n\ntype Page struct {\n    Title string\n    Body  []byte\n}\n\n\n类型 []byte 的意思是“一个字节切片”。（有关切片的更多信息，请参阅Slices: usage and internals。）Body元素是[]字节，而不是字符串，因为这是我们将使用的io库所期望的类型，如下所示。\n\nPage结构描述了页面数据将如何存储在内存中。但是持久存储呢？我们可以通过在Page上创建一个保存方法来解决这个问题.\n\nfunc (p *Page) save() error {\n    filename := p.Title + ".txt"\n    return ioutil.WriteFile(filename, p.Body, 0600)\n}\n\n\n此方法的签名写道：“这是一个名为save的方法，它以指向Page的指针p作为接收器。它不接受参数，并返回类型为error的值。”\n\n此方法将把页面的正文保存到一个文本文件中。为了简单起见，我们将使用标题作为文件名。\n\nsave方法返回一个错误值，因为这是WriteFile（一个向文件写入字节片的标准库函数）的返回类型。save方法返回错误值，以便在写入文件时出现任何错误时由应用程序进行处理。如果一切顺利，Page.save（）将返回nil（指针、接口和其他类型的零值）。\n\n作为WriteFile的第三个参数传递的八进制整数文本0600表示，创建该文件时应仅具有当前用户的读写权限。（有关详细信息，请参阅Unix手册页打开（2）。）\n\n除了保存页面外，我们还需要加载页面：\n\nfunc loadPage(title string) *Page {\n    filename := title + ".txt"\n    body, _ := ioutil.ReadFile(filename)\n    return &Page{Title: title, Body: body}\n}\n\n\n函数loadPage从title参数构造文件名，将文件内容读取到新的变量体中，并返回一个指针，指向用正确的title和body值构造的Page文本。\n\n函数可以返回多个值。标准库函数io.ReadFile返回[]字节和错误。在loadPage中，错误尚未得到处理；由下划线（_）符号表示的“空白标识符”用于丢弃错误返回值（本质上，不将值赋值）。\n\n但是如果ReadFile遇到错误会发生什么呢？例如，该文件可能不存在。我们不应该忽视这些错误。让我们修改函数以返回*Page和error。\n\nfunc loadPage(title string) (*Page, error) {\n    filename := title + ".txt"\n    body, err := ioutil.ReadFile(filename)\n    if err != nil {\n        return nil, err\n    }\n    return &Page{Title: title, Body: body}, nil\n}\n\n\n此函数的调用方现在可以检查第二个参数；如果为零，则它已成功加载页面。如果没有，那么这将是一个可以由调用者处理的错误（有关详细信息，请参阅语言规范）。\n\n在这一点上，我们有一个简单的数据结构和保存到文件和从文件加载的能力。让我们编写一个主要函数来测试我们所写的内容：\n\n编译并执行此代码后，将创建一个名为TestPage.txt的文件，其中包含p1的内容。然后，该文件将被读取到结构p2中，并将其Body元素打印到屏幕上。\n\n您可以这样编译和运行程序：\n\n$ go build wiki.go\n$ ./wiki\nThis is a sample Page.\n\n\n（如果您使用的是Windows，则必须键入不带“./”的“wiki”才能运行程序。）\n\nwiki.Go完整代码:\n\n// Copyright 2010 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// +build ignore\n\npackage main\n\nimport (\n "fmt"\n "io/ioutil"\n)\n\ntype Page struct {\n Title string\n Body  []byte\n}\n\nfunc (p *Page) save() error {\n filename := p.Title + ".txt"\n return ioutil.WriteFile(filename, p.Body, 0600)\n}\n\nfunc loadPage(title string) (*Page, error) {\n filename := title + ".txt"\n body, err := ioutil.ReadFile(filename)\n if err != nil {\n  return nil, err\n }\n return &Page{Title: title, Body: body}, nil\n}\n\nfunc main() {\n p1 := &Page{Title: "TestPage", Body: []byte("This is a sample Page.")}\n p1.save()\n p2, _ := loadPage("TestPage")\n fmt.Println(string(p2.Body))\n}\n\n\n# net/http软件包介绍（插叙）\n\n以下是一个简单web服务器的完整工作示例：\n\n// +build ignore\n\npackage main\n\nimport (\n    "fmt"\n    "log"\n    "net/http"\n)\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n    fmt.Fprintf(w, "Hi there, I love %s!", r.URL.Path[1:])\n}\n\nfunc main() {\n    http.HandleFunc("/", handler)\n    log.Fatal(http.ListenAndServe(":8080", nil))\n}\n\n\nmain函数以对http.HandleFunc的调用开始，该调用告诉http包使用处理程序处理对web根（“/”）的所有请求。\n\n然后，它调用http.ListenAndServe，指定它应该侦听任何接口上的端口8080（“：8080”）。（现在不要担心它的第二个参数nil。）这个函数将被阻塞，直到程序终止。\n\nListenAndServe总是返回一个错误，因为它只有在发生意外错误时才会返回。为了记录这个错误，我们用log.Fatal包装函数调用。\n\n函数处理程序的类型为http.HandlerFunc。它以http.ResponseWriter和http.Request作为参数。\n\nhttp.ResponseWriter值汇编http服务器的响应；通过写入它，我们将数据发送到HTTP客户端。\n\nhttp.Request是一种表示客户端http请求的数据结构。r.URL.Path是请求URL的路径组件。尾部[1:]的意思是“创建从第一个字符到最后的Path的子片段。”这将删除路径名称中的前导“/”。\n\n如果您运行此程序并访问URL：http://localhost:8080/monkeys 该程序将呈现一个页面，该页面包含：\n\n该程序将呈现一个页面，该页面包含：\n\n\n# 使用net/http为wiki页面提供服务\n\n要使用net/http包，必须导入该包：\n\nimport (\n "fmt"\n "io/ioutil"\n "log"\n "net/http"\n)\n\n\n让我们创建一个处理程序viewHandler，它将允许用户查看wiki页面。它将处理前缀为“/view/”的URL。\n\nfunc viewHandler(w http.ResponseWriter, r *http.Request) {\n    title := r.URL.Path[len("/view/"):]\n    p, _ := loadPage(title)\n    fmt.Fprintf(w, "<h1>%s</h1><div>%s</div>", p.Title, p.Body)\n}\n\n\n再次注意，使用_可以忽略loadPage中的错误返回值。这里这样做是为了简单，通常被认为是不好的做法。我们稍后会处理这个问题。\n\n首先，此函数从请求URL的路径组件r.URL.Path中提取页面标题。使用[len（“/view/”）：]对Path进行重新切片，以删除请求路径的前导“/view/”组件。这是因为路径总是以“/view/”开头，这不是页面标题的一部分。\n\n然后，该函数加载页面数据，用一个简单的HTML字符串格式化页面，并将其写入http.ResponseWriter w。\n\n为了使用这个处理程序，我们重写了主函数来初始化http，使用viewHandler来处理路径/view/下的任何请求。\n\nfunc main() {\n    http.HandleFunc("/view/", viewHandler)\n    log.Fatal(http.ListenAndServe(":8080", nil))\n}\n\n\n我们迄今为止编写的代码:\n\n// Copyright 2010 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// +build ignore\n\npackage main\n\nimport (\n "fmt"\n "io/ioutil"\n "log"\n "net/http"\n)\n\ntype Page struct {\n Title string\n Body  []byte\n}\n\nfunc (p *Page) save() error {\n filename := p.Title + ".txt"\n return ioutil.WriteFile(filename, p.Body, 0600)\n}\n\nfunc loadPage(title string) (*Page, error) {\n filename := title + ".txt"\n body, err := ioutil.ReadFile(filename)\n if err != nil {\n  return nil, err\n }\n return &Page{Title: title, Body: body}, nil\n}\n\nfunc viewHandler(w http.ResponseWriter, r *http.Request) {\n title := r.URL.Path[len("/view/"):]\n p, _ := loadPage(title)\n fmt.Fprintf(w, "<h1>%s</h1><div>%s</div>", p.Title, p.Body)\n}\n\nfunc main() {\n http.HandleFunc("/view/", viewHandler)\n log.Fatal(http.ListenAndServe(":8080", nil))\n}\n\n\n让我们创建一些页面数据（作为test.txt），编译我们的代码，并尝试提供wiki页面。\n\n在编辑器中打开test.txt文件，并在其中保存字符串“Hello world”（不带引号）。\n\ngo build wiki.go\n./wiki\n\n\n（如果您使用的是Windows，则必须键入不带“./”的“wiki”才能运行程序。）\n\n在运行此web服务器的情况下，访问http://localhost:8080/view/test应该显示一个标题为“test”的页面，其中包含单词“Hello world”。\n\n# 编辑页面\n\nwiki不是没有编辑页面功能的wiki。让我们创建两个新的处理程序：一个名为editHandler的处理程序用于显示“编辑页面”表单，另一个名的saveHandler用于保存通过表单输入的数据。\n\n首先，我们将它们添加到main（）中：\n\nfunc main() {\n    http.HandleFunc("/view/", viewHandler)\n    http.HandleFunc("/edit/", editHandler)\n    http.HandleFunc("/save/", saveHandler)\n    log.Fatal(http.ListenAndServe(":8080", nil))\n}\n\n\n函数editHandler加载页面（或者，如果不存在，创建一个空的page结构），并显示一个HTML表单。\n\nfunc editHandler(w http.ResponseWriter, r *http.Request) {\n    title := r.URL.Path[len("/edit/"):]\n    p, err := loadPage(title)\n    if err != nil {\n        p = &Page{Title: title}\n    }\n    fmt.Fprintf(w, "<h1>Editing %s</h1>"+\n        "<form action=\\"/save/%s\\" method=\\"POST\\">"+\n        "<textarea name=\\"body\\">%s</textarea><br>"+\n        "<input type=\\"submit\\" value=\\"Save\\">"+\n        "</form>",\n        p.Title, p.Title, p.Body)\n}\n\n\n这个函数可以很好地工作，但所有硬编码的HTML都很难看。当然，还有更好的方法。\n\n# html/template包\n\nhtml/template包是Go标准库的一部分。我们可以使用html/template将html保存在一个单独的文件中，这样我们就可以在不修改底层Go代码的情况下更改编辑页面的布局。\n\n首先，我们必须将html/template添加到导入列表中。我们也不会再使用fmt了，所以我们必须删除它。\n\nimport (\n "html/template"\n "io/ioutil"\n "net/http"\n)\n\n\n让我们创建一个包含HTML表单的模板文件。打开一个名为edit.HTML的新文件，并添加以下行：\n\n<h1>Editing {{.Title}}</h1>\n\n<form action="/save/{{.Title}}" method="POST">\n<div><textarea name="body" rows="20" cols="80">{{printf "%s" .Body}}</textarea></div>\n<div><input type="submit" value="Save"></div>\n</form>\n\n\n修改editHandler以使用模板，而不是硬编码的HTML：\n\nfunc editHandler(w http.ResponseWriter, r *http.Request) {\n    title := r.URL.Path[len("/edit/"):]\n    p, err := loadPage(title)\n    if err != nil {\n        p = &Page{Title: title}\n    }\n    t, _ := template.ParseFiles("edit.html")\n    t.Execute(w, p)\n}\n\n\n函数template.ParseFiles将读取edit.html的内容并返回一个*template.template。\n\n方法t.Execute执行模板，将生成的HTML写入http.ResponseWriter。.Title和.Body虚线标识符指的是p.Title和p.Body。\n\n模板指令用双大括号括起来。printf“%s”.Body指令是一个函数调用，它将.Body输出为字符串，而不是字节流，这与对fmt.printf的调用相同。html/template包有助于确保模板操作只生成安全且外观正确的html。例如，它会自动转义任何大于号（>）的符号，将其替换为&gt；，以确保用户数据不会损坏表单HTML。\n\n既然我们现在正在使用模板，那么让我们为我们的viewHandler创建一个名为view.html的模板：\n\n<h1>{{.Title}}</h1>\n\n<p>[<a href="/edit/{{.Title}}">edit</a>]</p>\n\n<div>{{printf "%s" .Body}}</div>\n\n\n相应地修改viewHandler：\n\nfunc viewHandler(w http.ResponseWriter, r *http.Request) {\n    title := r.URL.Path[len("/view/"):]\n    p, _ := loadPage(title)\n    t, _ := template.ParseFiles("view.html")\n    t.Execute(w, p)\n}\n\n\n请注意，我们在两个处理程序中使用了几乎完全相同的模板代码。让我们通过将模板代码移动到它自己的函数来消除这种重复：\n\nfunc renderTemplate(w http.ResponseWriter, tmpl string, p *Page) {\n    t, _ := template.ParseFiles(tmpl + ".html")\n    t.Execute(w, p)\n}\n\n\n并修改处理程序以使用该函数：\n\nfunc viewHandler(w http.ResponseWriter, r *http.Request) {\n    title := r.URL.Path[len("/view/"):]\n    p, _ := loadPage(title)\n    renderTemplate(w, "view", p)\n}\n\n\nfunc editHandler(w http.ResponseWriter, r *http.Request) {\n    title := r.URL.Path[len("/edit/"):]\n    p, err := loadPage(title)\n    if err != nil {\n        p = &Page{Title: title}\n    }\n    renderTemplate(w, "edit", p)\n}\n\n\n如果我们在main中注释掉未实现的保存处理程序的注册，我们可以再次构建和测试我们的程序。 看我们迄今为止编写的代码。\n\n// Copyright 2010 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// +build ignore\n\npackage main\n\nimport (\n "html/template"\n "io/ioutil"\n "log"\n "net/http"\n)\n\ntype Page struct {\n Title string\n Body  []byte\n}\n\nfunc (p *Page) save() error {\n filename := p.Title + ".txt"\n return ioutil.WriteFile(filename, p.Body, 0600)\n}\n\nfunc loadPage(title string) (*Page, error) {\n filename := title + ".txt"\n body, err := ioutil.ReadFile(filename)\n if err != nil {\n  return nil, err\n }\n return &Page{Title: title, Body: body}, nil\n}\n\nfunc renderTemplate(w http.ResponseWriter, tmpl string, p *Page) {\n t, _ := template.ParseFiles(tmpl + ".html")\n t.Execute(w, p)\n}\n\nfunc viewHandler(w http.ResponseWriter, r *http.Request) {\n title := r.URL.Path[len("/view/"):]\n p, _ := loadPage(title)\n renderTemplate(w, "view", p)\n}\n\nfunc editHandler(w http.ResponseWriter, r *http.Request) {\n title := r.URL.Path[len("/edit/"):]\n p, err := loadPage(title)\n if err != nil {\n  p = &Page{Title: title}\n }\n renderTemplate(w, "edit", p)\n}\n\nfunc main() {\n http.HandleFunc("/view/", viewHandler)\n http.HandleFunc("/edit/", editHandler)\n //http.HandleFunc("/save/", saveHandler)\n log.Fatal(http.ListenAndServe(":8080", nil))\n}\n\n\n# 处理不存在的页面\n\n如果您访问/view/APageThatDesntExist会怎样？您将看到一个包含HTML的页面。这是因为它忽略了loadPage的错误返回值，并继续尝试在没有数据的情况下填写模板。相反，如果请求的页面不存在，它应该将客户端重定向到编辑页面，以便创建内容：\n\nfunc viewHandler(w http.ResponseWriter, r *http.Request) {\n    title := r.URL.Path[len("/view/"):]\n    p, err := loadPage(title)\n    if err != nil {\n        http.Redirect(w, r, "/edit/"+title, http.StatusFound)\n        return\n    }\n    renderTemplate(w, "view", p)\n}\n\n\nhttp.RRedirect函数将http.StatusFind（302）的http状态代码和Location标头添加到http响应中。\n\n# 保存页面\n\n函数saveHandler将处理位于编辑页面上的表单的提交。在main中取消注释相关行之后，让我们实现处理程序：\n\nfunc saveHandler(w http.ResponseWriter, r *http.Request) {\n    title := r.URL.Path[len("/save/"):]\n    body := r.FormValue("body")\n    p := &Page{Title: title, Body: []byte(body)}\n    p.save()\n    http.Redirect(w, r, "/view/"+title, http.StatusFound)\n}\n\n\n页面标题（在URL中提供）和表单的唯一字段Body存储在一个新页面中。然后调用save（）方法将数据写入文件，并将客户端重定向到/view/page。\n\nFormValue返回的值的类型为字符串。我们必须将该值转换为 []byte ，然后才能将其放入Page结构中。我们使用 []byte（body）来执行转换。\n\n# 错误处理\n\n在我们的程序中，有几个地方的错误被忽略了。这是一种糟糕的做法，尤其是因为当错误发生时，程序会有意外的行为。更好的解决方案是处理错误并向用户返回错误消息。这样，如果出现问题，服务器将按照我们想要的方式运行，并可以通知用户。\n\n首先，让我们处理renderTemplate中的错误：\n\nfunc renderTemplate(w http.ResponseWriter, tmpl string, p *Page) {\n    t, err := template.ParseFiles(tmpl + ".html")\n    if err != nil {\n        http.Error(w, err.Error(), http.StatusInternalServerError)\n        return\n    }\n    err = t.Execute(w, p)\n    if err != nil {\n        http.Error(w, err.Error(), http.StatusInternalServerError)\n    }\n}\n\n\nhttp.Error函数发送指定的http响应代码（在本例中为“内部服务器错误”）和错误消息。把它放在一个单独的功能中的决定已经取得了成效。\n\n现在让我们修复saveHandler：\n\nfunc saveHandler(w http.ResponseWriter, r *http.Request) {\n    title := r.URL.Path[len("/save/"):]\n    body := r.FormValue("body")\n    p := &Page{Title: title, Body: []byte(body)}\n    err := p.save()\n    if err != nil {\n        http.Error(w, err.Error(), http.StatusInternalServerError)\n        return\n    }\n    http.Redirect(w, r, "/view/"+title, http.StatusFound)\n}\n\n\n在p.save（）过程中发生的任何错误都将报告给用户。\n\n# 模板缓存\n\n这段代码效率低下：每次渲染页面时，renderTemplate都会调用ParseFiles。更好的方法是在程序初始化时调用ParseFiles一次，将所有模板解析为一个*Template。然后我们可以使用ExecuteTemplate方法来渲染特定的模板。\n\n首先，我们创建一个名为templates的全局变量，并使用ParseFiles对其进行初始化。\n\nvar templates = template.Must(template.ParseFiles("edit.html", "view.html"))\n\n\n函数template.Must是一个方便的包装器，当传递非nil错误值时会死机，否则会原封不动地返回*template。恐慌在这里是恰当的；如果模板无法加载，那么唯一明智的做法就是退出程序。\n\nParseFiles函数采用任意数量的字符串参数来标识模板文件，并将这些文件解析为以基本文件名命名的模板。如果我们要在程序中添加更多的模板，我们会将它们的名称添加到ParseFiles调用的参数中。\n\n然后，我们修改renderTemplate函数以调用templates.ExecuteTemplate方法，该方法具有相应模板的名称：\n\nfunc renderTemplate(w http.ResponseWriter, tmpl string, p *Page) {\n    err := templates.ExecuteTemplate(w, tmpl+".html", p)\n    if err != nil {\n        http.Error(w, err.Error(), http.StatusInternalServerError)\n    }\n}\n\n\n请注意，模板名称是模板文件名，因此我们必须将“.html”附加到tmpl参数。\n\n# 验证\n\n正如您可能已经观察到的，这个程序有一个严重的安全缺陷：用户可以在服务器上提供要读/写的任意路径。为了缓解这种情况，我们可以编写一个函数，用正则表达式验证标题。\n\n首先，将“regexp”添加到导入列表中。然后，我们可以创建一个全局变量来存储验证表达式：\n\nvar validPath = regexp.MustCompile("^/(edit|save|view)/([a-zA-Z0-9]+)$")\n\n\n函数regexp.MustCompile将解析和编译正则表达式，并返回regexp.regexp。MustCompile与compile的不同之处在于，如果表达式编译失败，它将死机，而compile将返回一个错误作为第二个参数。\n\n现在，让我们编写一个函数，使用validPath表达式验证路径并提取页面标题：\n\nfunc getTitle(w http.ResponseWriter, r *http.Request) (string, error) {\n    m := validPath.FindStringSubmatch(r.URL.Path)\n    if m == nil {\n        http.NotFound(w, r)\n        return "", errors.New("invalid Page Title")\n    }\n    return m[2], nil // The title is the second subexpression.\n}\n\n\n如果标题是有效的，那么它将与一个nil错误值一起返回。如果标题无效，函数将向HTTP连接写入一个“404未找到”错误，并向处理程序返回一个错误。要创建新的错误，我们必须导入错误包。\n\n让我们在每个处理程序中调用getTitle：\n\nfunc viewHandler(w http.ResponseWriter, r *http.Request) {\n    title, err := getTitle(w, r)\n    if err != nil {\n        return\n    }\n    p, err := loadPage(title)\n    if err != nil {\n        http.Redirect(w, r, "/edit/"+title, http.StatusFound)\n        return\n    }\n    renderTemplate(w, "view", p)\n}\n\n\nfunc editHandler(w http.ResponseWriter, r *http.Request) {\n    title, err := getTitle(w, r)\n    if err != nil {\n        return\n    }\n    p, err := loadPage(title)\n    if err != nil {\n        p = &Page{Title: title}\n    }\n    renderTemplate(w, "edit", p)\n}\n\n\nfunc saveHandler(w http.ResponseWriter, r *http.Request) {\n    title, err := getTitle(w, r)\n    if err != nil {\n        return\n    }\n    body := r.FormValue("body")\n    p := &Page{Title: title, Body: []byte(body)}\n    err = p.save()\n    if err != nil {\n        http.Error(w, err.Error(), http.StatusInternalServerError)\n        return\n    }\n    http.Redirect(w, r, "/view/"+title, http.StatusFound)\n}\n\n\n# 介绍函数文字和闭包\n\n在每个处理程序中捕捉错误条件会引入大量重复的代码。如果我们可以将每个处理程序封装在一个函数中进行验证和错误检查，会怎么样？Go的函数文字提供了一种强大的功能抽象方法，可以在这里为我们提供帮助。\n\n首先，我们重写每个处理程序的函数定义，以接受一个标题字符串：\n\nfunc viewHandler(w http.ResponseWriter, r *http.Request, title string)\nfunc editHandler(w http.ResponseWriter, r *http.Request, title string)\nfunc saveHandler(w http.ResponseWriter, r *http.Request, title string)\n\n\n现在，让我们定义一个包装函数，它接受上面类型的函数，并返回http.HandlerFunc类型的函数（适合传递给函数http.HandleFunc）：\n\nfunc makeHandler(fn func (http.ResponseWriter, *http.Request, string)) http.HandlerFunc {\n return func(w http.ResponseWriter, r *http.Request) {\n  // Here we will extract the page title from the Request,\n  // and call the provided handler \'fn\'\n }\n}\n\n\n返回的函数被称为闭包，因为它包含了在其外部定义的值。在这种情况下，变量fn（makeHandler的单个参数）被闭包包围。变量fn将是我们的保存、编辑或视图处理程序之一。\n\n现在我们可以从getTitle中获取代码并在这里使用它（经过一些小的修改）：\n\nfunc makeHandler(fn func(http.ResponseWriter, *http.Request, string)) http.HandlerFunc {\n    return func(w http.ResponseWriter, r *http.Request) {\n        m := validPath.FindStringSubmatch(r.URL.Path)\n        if m == nil {\n            http.NotFound(w, r)\n            return\n        }\n        fn(w, r, m[2])\n    }\n}\n\n\nmakeHandler返回的闭包是一个使用http.ResponseWriter和http.Request（换句话说，http.HandlerFunc）的函数。闭包从请求路径中提取标题，并使用validPath regexp进行验证。如果标题无效，将使用http.NotFound函数向ResponseWriter写入一个错误。如果标题有效，则将调用包含的处理程序函数fn，并将ResponseWriter、Request和title作为参数。\n\n现在，我们可以在使用http包注册处理程序函数之前，将处理程序函数主要包装为makeHandler：\n\nfunc main() {\n    http.HandleFunc("/view/", makeHandler(viewHandler))\n    http.HandleFunc("/edit/", makeHandler(editHandler))\n    http.HandleFunc("/save/", makeHandler(saveHandler))\n\n    log.Fatal(http.ListenAndServe(":8080", nil))\n}\n\n\n最后，我们从处理程序函数中删除了对getTitle的调用，使它们更加简单：\n\nfunc viewHandler(w http.ResponseWriter, r *http.Request, title string) {\n    p, err := loadPage(title)\n    if err != nil {\n        http.Redirect(w, r, "/edit/"+title, http.StatusFound)\n        return\n    }\n    renderTemplate(w, "view", p)\n}\n\n\nfunc editHandler(w http.ResponseWriter, r *http.Request, title string) {\n    p, err := loadPage(title)\n    if err != nil {\n        p = &Page{Title: title}\n    }\n    renderTemplate(w, "edit", p)\n}\n\n\nfunc saveHandler(w http.ResponseWriter, r *http.Request, title string) {\n    body := r.FormValue("body")\n    p := &Page{Title: title, Body: []byte(body)}\n    err := p.save()\n    if err != nil {\n        http.Error(w, err.Error(), http.StatusInternalServerError)\n        return\n    }\n    http.Redirect(w, r, "/view/"+title, http.StatusFound)\n}\n\n\n# 试试看\n\n查看最终代码列表:\n\n// Copyright 2010 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// +build ignore\n\npackage main\n\nimport (\n "html/template"\n "io/ioutil"\n "log"\n "net/http"\n "regexp"\n)\n\ntype Page struct {\n Title string\n Body  []byte\n}\n\nfunc (p *Page) save() error {\n filename := p.Title + ".txt"\n return ioutil.WriteFile(filename, p.Body, 0600)\n}\n\nfunc loadPage(title string) (*Page, error) {\n filename := title + ".txt"\n body, err := ioutil.ReadFile(filename)\n if err != nil {\n  return nil, err\n }\n return &Page{Title: title, Body: body}, nil\n}\n\nfunc viewHandler(w http.ResponseWriter, r *http.Request, title string) {\n p, err := loadPage(title)\n if err != nil {\n  http.Redirect(w, r, "/edit/"+title, http.StatusFound)\n  return\n }\n renderTemplate(w, "view", p)\n}\n\nfunc editHandler(w http.ResponseWriter, r *http.Request, title string) {\n p, err := loadPage(title)\n if err != nil {\n  p = &Page{Title: title}\n }\n renderTemplate(w, "edit", p)\n}\n\nfunc saveHandler(w http.ResponseWriter, r *http.Request, title string) {\n body := r.FormValue("body")\n p := &Page{Title: title, Body: []byte(body)}\n err := p.save()\n if err != nil {\n  http.Error(w, err.Error(), http.StatusInternalServerError)\n  return\n }\n http.Redirect(w, r, "/view/"+title, http.StatusFound)\n}\n\nvar templates = template.Must(template.ParseFiles("edit.html", "view.html"))\n\nfunc renderTemplate(w http.ResponseWriter, tmpl string, p *Page) {\n err := templates.ExecuteTemplate(w, tmpl+".html", p)\n if err != nil {\n  http.Error(w, err.Error(), http.StatusInternalServerError)\n }\n}\n\nvar validPath = regexp.MustCompile("^/(edit|save|view)/([a-zA-Z0-9]+)$")\n\nfunc makeHandler(fn func(http.ResponseWriter, *http.Request, string)) http.HandlerFunc {\n return func(w http.ResponseWriter, r *http.Request) {\n  m := validPath.FindStringSubmatch(r.URL.Path)\n  if m == nil {\n   http.NotFound(w, r)\n   return\n  }\n  fn(w, r, m[2])\n }\n}\n\nfunc main() {\n http.HandleFunc("/view/", makeHandler(viewHandler))\n http.HandleFunc("/edit/", makeHandler(editHandler))\n http.HandleFunc("/save/", makeHandler(saveHandler))\n\n log.Fatal(http.ListenAndServe(":8080", nil))\n}\n\n\n重新编译代码，然后运行应用程序：\n\ngo build wiki.go\n./wiki\n\n\n浏览 http://localhost:8080/view/ANewPage 应该会向您显示页面编辑表单。然后您应该能够输入一些文本，单击“保存”，然后被重定向到新创建的页面。>\n\n# 其他任务\n\n以下是一些你可能想自己解决的简单任务：\n\n * 将模板存储在tmpl/中，将页面数据存储在data/中。\n * 添加一个处理程序，使网站根重定向到/viewFrontPage。\n * 通过使页面模板成为有效的HTML并添加一些CSS规则来扩充页面模板。\n * 通过将[PageName]的实例转换为 <a href=“/view/PageName”>页面名称</a>。（提示：您可以使用regexp.ReplaceAllFunc来执行此操作）',normalizedContent:'# 简介\n\n本教程涵盖以下内容：\n\n * 使用加载和保存方法创建数据结构\n * 使用net/http包构建web应用程序\n * 使用html/template包处理html模板\n * 使用regexp包验证用户输入\n * 使用闭包\n\n前置知识：\n\n * 编程经验\n * 了解基本的web技术（http、html）\n * 一些unix/dos命令行知识\n\n# 入门\n\n目前，您需要有一台freebsd、linux、macos或windows机器才能运行go。我们将使用$来表示命令提示符。\n\n安装go（请参阅安装说明）。\n\n在gopath中为本教程创建一个新目录，并进入该目录：\n\n$mkdir gowiki\n$cd gowiki\n\n\n创建一个名为wiki.go的文件，在您喜欢的编辑器中打开它，然后添加以下行：\n\npackage main\n\nimport (\n "fmt"\n "io/ioutil"\n)\n\n\n我们从go标准库导入fmt和ioutil包。稍后，当我们实现附加功能时，我们将向该导入声明添加更多的包。\n\n# 数据结构\n\n让我们从定义数据结构开始。wiki由一系列相互连接的页面组成，每个页面都有一个标题和一个正文（页面内容）。在这里，我们将page定义为一个结构，其中有两个字段表示标题和正文。\n\ntype page struct {\n    title string\n    body  []byte\n}\n\n\n类型 []byte 的意思是“一个字节切片”。（有关切片的更多信息，请参阅slices: usage and internals。）body元素是[]字节，而不是字符串，因为这是我们将使用的io库所期望的类型，如下所示。\n\npage结构描述了页面数据将如何存储在内存中。但是持久存储呢？我们可以通过在page上创建一个保存方法来解决这个问题.\n\nfunc (p *page) save() error {\n    filename := p.title + ".txt"\n    return ioutil.writefile(filename, p.body, 0600)\n}\n\n\n此方法的签名写道：“这是一个名为save的方法，它以指向page的指针p作为接收器。它不接受参数，并返回类型为error的值。”\n\n此方法将把页面的正文保存到一个文本文件中。为了简单起见，我们将使用标题作为文件名。\n\nsave方法返回一个错误值，因为这是writefile（一个向文件写入字节片的标准库函数）的返回类型。save方法返回错误值，以便在写入文件时出现任何错误时由应用程序进行处理。如果一切顺利，page.save（）将返回nil（指针、接口和其他类型的零值）。\n\n作为writefile的第三个参数传递的八进制整数文本0600表示，创建该文件时应仅具有当前用户的读写权限。（有关详细信息，请参阅unix手册页打开（2）。）\n\n除了保存页面外，我们还需要加载页面：\n\nfunc loadpage(title string) *page {\n    filename := title + ".txt"\n    body, _ := ioutil.readfile(filename)\n    return &page{title: title, body: body}\n}\n\n\n函数loadpage从title参数构造文件名，将文件内容读取到新的变量体中，并返回一个指针，指向用正确的title和body值构造的page文本。\n\n函数可以返回多个值。标准库函数io.readfile返回[]字节和错误。在loadpage中，错误尚未得到处理；由下划线（_）符号表示的“空白标识符”用于丢弃错误返回值（本质上，不将值赋值）。\n\n但是如果readfile遇到错误会发生什么呢？例如，该文件可能不存在。我们不应该忽视这些错误。让我们修改函数以返回*page和error。\n\nfunc loadpage(title string) (*page, error) {\n    filename := title + ".txt"\n    body, err := ioutil.readfile(filename)\n    if err != nil {\n        return nil, err\n    }\n    return &page{title: title, body: body}, nil\n}\n\n\n此函数的调用方现在可以检查第二个参数；如果为零，则它已成功加载页面。如果没有，那么这将是一个可以由调用者处理的错误（有关详细信息，请参阅语言规范）。\n\n在这一点上，我们有一个简单的数据结构和保存到文件和从文件加载的能力。让我们编写一个主要函数来测试我们所写的内容：\n\n编译并执行此代码后，将创建一个名为testpage.txt的文件，其中包含p1的内容。然后，该文件将被读取到结构p2中，并将其body元素打印到屏幕上。\n\n您可以这样编译和运行程序：\n\n$ go build wiki.go\n$ ./wiki\nthis is a sample page.\n\n\n（如果您使用的是windows，则必须键入不带“./”的“wiki”才能运行程序。）\n\nwiki.go完整代码:\n\n// copyright 2010 the go authors. all rights reserved.\n// use of this source code is governed by a bsd-style\n// license that can be found in the license file.\n\n// +build ignore\n\npackage main\n\nimport (\n "fmt"\n "io/ioutil"\n)\n\ntype page struct {\n title string\n body  []byte\n}\n\nfunc (p *page) save() error {\n filename := p.title + ".txt"\n return ioutil.writefile(filename, p.body, 0600)\n}\n\nfunc loadpage(title string) (*page, error) {\n filename := title + ".txt"\n body, err := ioutil.readfile(filename)\n if err != nil {\n  return nil, err\n }\n return &page{title: title, body: body}, nil\n}\n\nfunc main() {\n p1 := &page{title: "testpage", body: []byte("this is a sample page.")}\n p1.save()\n p2, _ := loadpage("testpage")\n fmt.println(string(p2.body))\n}\n\n\n# net/http软件包介绍（插叙）\n\n以下是一个简单web服务器的完整工作示例：\n\n// +build ignore\n\npackage main\n\nimport (\n    "fmt"\n    "log"\n    "net/http"\n)\n\nfunc handler(w http.responsewriter, r *http.request) {\n    fmt.fprintf(w, "hi there, i love %s!", r.url.path[1:])\n}\n\nfunc main() {\n    http.handlefunc("/", handler)\n    log.fatal(http.listenandserve(":8080", nil))\n}\n\n\nmain函数以对http.handlefunc的调用开始，该调用告诉http包使用处理程序处理对web根（“/”）的所有请求。\n\n然后，它调用http.listenandserve，指定它应该侦听任何接口上的端口8080（“：8080”）。（现在不要担心它的第二个参数nil。）这个函数将被阻塞，直到程序终止。\n\nlistenandserve总是返回一个错误，因为它只有在发生意外错误时才会返回。为了记录这个错误，我们用log.fatal包装函数调用。\n\n函数处理程序的类型为http.handlerfunc。它以http.responsewriter和http.request作为参数。\n\nhttp.responsewriter值汇编http服务器的响应；通过写入它，我们将数据发送到http客户端。\n\nhttp.request是一种表示客户端http请求的数据结构。r.url.path是请求url的路径组件。尾部[1:]的意思是“创建从第一个字符到最后的path的子片段。”这将删除路径名称中的前导“/”。\n\n如果您运行此程序并访问url：http://localhost:8080/monkeys 该程序将呈现一个页面，该页面包含：\n\n该程序将呈现一个页面，该页面包含：\n\n\n# 使用net/http为wiki页面提供服务\n\n要使用net/http包，必须导入该包：\n\nimport (\n "fmt"\n "io/ioutil"\n "log"\n "net/http"\n)\n\n\n让我们创建一个处理程序viewhandler，它将允许用户查看wiki页面。它将处理前缀为“/view/”的url。\n\nfunc viewhandler(w http.responsewriter, r *http.request) {\n    title := r.url.path[len("/view/"):]\n    p, _ := loadpage(title)\n    fmt.fprintf(w, "<h1>%s</h1><div>%s</div>", p.title, p.body)\n}\n\n\n再次注意，使用_可以忽略loadpage中的错误返回值。这里这样做是为了简单，通常被认为是不好的做法。我们稍后会处理这个问题。\n\n首先，此函数从请求url的路径组件r.url.path中提取页面标题。使用[len（“/view/”）：]对path进行重新切片，以删除请求路径的前导“/view/”组件。这是因为路径总是以“/view/”开头，这不是页面标题的一部分。\n\n然后，该函数加载页面数据，用一个简单的html字符串格式化页面，并将其写入http.responsewriter w。\n\n为了使用这个处理程序，我们重写了主函数来初始化http，使用viewhandler来处理路径/view/下的任何请求。\n\nfunc main() {\n    http.handlefunc("/view/", viewhandler)\n    log.fatal(http.listenandserve(":8080", nil))\n}\n\n\n我们迄今为止编写的代码:\n\n// copyright 2010 the go authors. all rights reserved.\n// use of this source code is governed by a bsd-style\n// license that can be found in the license file.\n\n// +build ignore\n\npackage main\n\nimport (\n "fmt"\n "io/ioutil"\n "log"\n "net/http"\n)\n\ntype page struct {\n title string\n body  []byte\n}\n\nfunc (p *page) save() error {\n filename := p.title + ".txt"\n return ioutil.writefile(filename, p.body, 0600)\n}\n\nfunc loadpage(title string) (*page, error) {\n filename := title + ".txt"\n body, err := ioutil.readfile(filename)\n if err != nil {\n  return nil, err\n }\n return &page{title: title, body: body}, nil\n}\n\nfunc viewhandler(w http.responsewriter, r *http.request) {\n title := r.url.path[len("/view/"):]\n p, _ := loadpage(title)\n fmt.fprintf(w, "<h1>%s</h1><div>%s</div>", p.title, p.body)\n}\n\nfunc main() {\n http.handlefunc("/view/", viewhandler)\n log.fatal(http.listenandserve(":8080", nil))\n}\n\n\n让我们创建一些页面数据（作为test.txt），编译我们的代码，并尝试提供wiki页面。\n\n在编辑器中打开test.txt文件，并在其中保存字符串“hello world”（不带引号）。\n\ngo build wiki.go\n./wiki\n\n\n（如果您使用的是windows，则必须键入不带“./”的“wiki”才能运行程序。）\n\n在运行此web服务器的情况下，访问http://localhost:8080/view/test应该显示一个标题为“test”的页面，其中包含单词“hello world”。\n\n# 编辑页面\n\nwiki不是没有编辑页面功能的wiki。让我们创建两个新的处理程序：一个名为edithandler的处理程序用于显示“编辑页面”表单，另一个名的savehandler用于保存通过表单输入的数据。\n\n首先，我们将它们添加到main（）中：\n\nfunc main() {\n    http.handlefunc("/view/", viewhandler)\n    http.handlefunc("/edit/", edithandler)\n    http.handlefunc("/save/", savehandler)\n    log.fatal(http.listenandserve(":8080", nil))\n}\n\n\n函数edithandler加载页面（或者，如果不存在，创建一个空的page结构），并显示一个html表单。\n\nfunc edithandler(w http.responsewriter, r *http.request) {\n    title := r.url.path[len("/edit/"):]\n    p, err := loadpage(title)\n    if err != nil {\n        p = &page{title: title}\n    }\n    fmt.fprintf(w, "<h1>editing %s</h1>"+\n        "<form action=\\"/save/%s\\" method=\\"post\\">"+\n        "<textarea name=\\"body\\">%s</textarea><br>"+\n        "<input type=\\"submit\\" value=\\"save\\">"+\n        "</form>",\n        p.title, p.title, p.body)\n}\n\n\n这个函数可以很好地工作，但所有硬编码的html都很难看。当然，还有更好的方法。\n\n# html/template包\n\nhtml/template包是go标准库的一部分。我们可以使用html/template将html保存在一个单独的文件中，这样我们就可以在不修改底层go代码的情况下更改编辑页面的布局。\n\n首先，我们必须将html/template添加到导入列表中。我们也不会再使用fmt了，所以我们必须删除它。\n\nimport (\n "html/template"\n "io/ioutil"\n "net/http"\n)\n\n\n让我们创建一个包含html表单的模板文件。打开一个名为edit.html的新文件，并添加以下行：\n\n<h1>editing {{.title}}</h1>\n\n<form action="/save/{{.title}}" method="post">\n<div><textarea name="body" rows="20" cols="80">{{printf "%s" .body}}</textarea></div>\n<div><input type="submit" value="save"></div>\n</form>\n\n\n修改edithandler以使用模板，而不是硬编码的html：\n\nfunc edithandler(w http.responsewriter, r *http.request) {\n    title := r.url.path[len("/edit/"):]\n    p, err := loadpage(title)\n    if err != nil {\n        p = &page{title: title}\n    }\n    t, _ := template.parsefiles("edit.html")\n    t.execute(w, p)\n}\n\n\n函数template.parsefiles将读取edit.html的内容并返回一个*template.template。\n\n方法t.execute执行模板，将生成的html写入http.responsewriter。.title和.body虚线标识符指的是p.title和p.body。\n\n模板指令用双大括号括起来。printf“%s”.body指令是一个函数调用，它将.body输出为字符串，而不是字节流，这与对fmt.printf的调用相同。html/template包有助于确保模板操作只生成安全且外观正确的html。例如，它会自动转义任何大于号（>）的符号，将其替换为&gt；，以确保用户数据不会损坏表单html。\n\n既然我们现在正在使用模板，那么让我们为我们的viewhandler创建一个名为view.html的模板：\n\n<h1>{{.title}}</h1>\n\n<p>[<a href="/edit/{{.title}}">edit</a>]</p>\n\n<div>{{printf "%s" .body}}</div>\n\n\n相应地修改viewhandler：\n\nfunc viewhandler(w http.responsewriter, r *http.request) {\n    title := r.url.path[len("/view/"):]\n    p, _ := loadpage(title)\n    t, _ := template.parsefiles("view.html")\n    t.execute(w, p)\n}\n\n\n请注意，我们在两个处理程序中使用了几乎完全相同的模板代码。让我们通过将模板代码移动到它自己的函数来消除这种重复：\n\nfunc rendertemplate(w http.responsewriter, tmpl string, p *page) {\n    t, _ := template.parsefiles(tmpl + ".html")\n    t.execute(w, p)\n}\n\n\n并修改处理程序以使用该函数：\n\nfunc viewhandler(w http.responsewriter, r *http.request) {\n    title := r.url.path[len("/view/"):]\n    p, _ := loadpage(title)\n    rendertemplate(w, "view", p)\n}\n\n\nfunc edithandler(w http.responsewriter, r *http.request) {\n    title := r.url.path[len("/edit/"):]\n    p, err := loadpage(title)\n    if err != nil {\n        p = &page{title: title}\n    }\n    rendertemplate(w, "edit", p)\n}\n\n\n如果我们在main中注释掉未实现的保存处理程序的注册，我们可以再次构建和测试我们的程序。 看我们迄今为止编写的代码。\n\n// copyright 2010 the go authors. all rights reserved.\n// use of this source code is governed by a bsd-style\n// license that can be found in the license file.\n\n// +build ignore\n\npackage main\n\nimport (\n "html/template"\n "io/ioutil"\n "log"\n "net/http"\n)\n\ntype page struct {\n title string\n body  []byte\n}\n\nfunc (p *page) save() error {\n filename := p.title + ".txt"\n return ioutil.writefile(filename, p.body, 0600)\n}\n\nfunc loadpage(title string) (*page, error) {\n filename := title + ".txt"\n body, err := ioutil.readfile(filename)\n if err != nil {\n  return nil, err\n }\n return &page{title: title, body: body}, nil\n}\n\nfunc rendertemplate(w http.responsewriter, tmpl string, p *page) {\n t, _ := template.parsefiles(tmpl + ".html")\n t.execute(w, p)\n}\n\nfunc viewhandler(w http.responsewriter, r *http.request) {\n title := r.url.path[len("/view/"):]\n p, _ := loadpage(title)\n rendertemplate(w, "view", p)\n}\n\nfunc edithandler(w http.responsewriter, r *http.request) {\n title := r.url.path[len("/edit/"):]\n p, err := loadpage(title)\n if err != nil {\n  p = &page{title: title}\n }\n rendertemplate(w, "edit", p)\n}\n\nfunc main() {\n http.handlefunc("/view/", viewhandler)\n http.handlefunc("/edit/", edithandler)\n //http.handlefunc("/save/", savehandler)\n log.fatal(http.listenandserve(":8080", nil))\n}\n\n\n# 处理不存在的页面\n\n如果您访问/view/apagethatdesntexist会怎样？您将看到一个包含html的页面。这是因为它忽略了loadpage的错误返回值，并继续尝试在没有数据的情况下填写模板。相反，如果请求的页面不存在，它应该将客户端重定向到编辑页面，以便创建内容：\n\nfunc viewhandler(w http.responsewriter, r *http.request) {\n    title := r.url.path[len("/view/"):]\n    p, err := loadpage(title)\n    if err != nil {\n        http.redirect(w, r, "/edit/"+title, http.statusfound)\n        return\n    }\n    rendertemplate(w, "view", p)\n}\n\n\nhttp.rredirect函数将http.statusfind（302）的http状态代码和location标头添加到http响应中。\n\n# 保存页面\n\n函数savehandler将处理位于编辑页面上的表单的提交。在main中取消注释相关行之后，让我们实现处理程序：\n\nfunc savehandler(w http.responsewriter, r *http.request) {\n    title := r.url.path[len("/save/"):]\n    body := r.formvalue("body")\n    p := &page{title: title, body: []byte(body)}\n    p.save()\n    http.redirect(w, r, "/view/"+title, http.statusfound)\n}\n\n\n页面标题（在url中提供）和表单的唯一字段body存储在一个新页面中。然后调用save（）方法将数据写入文件，并将客户端重定向到/view/page。\n\nformvalue返回的值的类型为字符串。我们必须将该值转换为 []byte ，然后才能将其放入page结构中。我们使用 []byte（body）来执行转换。\n\n# 错误处理\n\n在我们的程序中，有几个地方的错误被忽略了。这是一种糟糕的做法，尤其是因为当错误发生时，程序会有意外的行为。更好的解决方案是处理错误并向用户返回错误消息。这样，如果出现问题，服务器将按照我们想要的方式运行，并可以通知用户。\n\n首先，让我们处理rendertemplate中的错误：\n\nfunc rendertemplate(w http.responsewriter, tmpl string, p *page) {\n    t, err := template.parsefiles(tmpl + ".html")\n    if err != nil {\n        http.error(w, err.error(), http.statusinternalservererror)\n        return\n    }\n    err = t.execute(w, p)\n    if err != nil {\n        http.error(w, err.error(), http.statusinternalservererror)\n    }\n}\n\n\nhttp.error函数发送指定的http响应代码（在本例中为“内部服务器错误”）和错误消息。把它放在一个单独的功能中的决定已经取得了成效。\n\n现在让我们修复savehandler：\n\nfunc savehandler(w http.responsewriter, r *http.request) {\n    title := r.url.path[len("/save/"):]\n    body := r.formvalue("body")\n    p := &page{title: title, body: []byte(body)}\n    err := p.save()\n    if err != nil {\n        http.error(w, err.error(), http.statusinternalservererror)\n        return\n    }\n    http.redirect(w, r, "/view/"+title, http.statusfound)\n}\n\n\n在p.save（）过程中发生的任何错误都将报告给用户。\n\n# 模板缓存\n\n这段代码效率低下：每次渲染页面时，rendertemplate都会调用parsefiles。更好的方法是在程序初始化时调用parsefiles一次，将所有模板解析为一个*template。然后我们可以使用executetemplate方法来渲染特定的模板。\n\n首先，我们创建一个名为templates的全局变量，并使用parsefiles对其进行初始化。\n\nvar templates = template.must(template.parsefiles("edit.html", "view.html"))\n\n\n函数template.must是一个方便的包装器，当传递非nil错误值时会死机，否则会原封不动地返回*template。恐慌在这里是恰当的；如果模板无法加载，那么唯一明智的做法就是退出程序。\n\nparsefiles函数采用任意数量的字符串参数来标识模板文件，并将这些文件解析为以基本文件名命名的模板。如果我们要在程序中添加更多的模板，我们会将它们的名称添加到parsefiles调用的参数中。\n\n然后，我们修改rendertemplate函数以调用templates.executetemplate方法，该方法具有相应模板的名称：\n\nfunc rendertemplate(w http.responsewriter, tmpl string, p *page) {\n    err := templates.executetemplate(w, tmpl+".html", p)\n    if err != nil {\n        http.error(w, err.error(), http.statusinternalservererror)\n    }\n}\n\n\n请注意，模板名称是模板文件名，因此我们必须将“.html”附加到tmpl参数。\n\n# 验证\n\n正如您可能已经观察到的，这个程序有一个严重的安全缺陷：用户可以在服务器上提供要读/写的任意路径。为了缓解这种情况，我们可以编写一个函数，用正则表达式验证标题。\n\n首先，将“regexp”添加到导入列表中。然后，我们可以创建一个全局变量来存储验证表达式：\n\nvar validpath = regexp.mustcompile("^/(edit|save|view)/([a-za-z0-9]+)$")\n\n\n函数regexp.mustcompile将解析和编译正则表达式，并返回regexp.regexp。mustcompile与compile的不同之处在于，如果表达式编译失败，它将死机，而compile将返回一个错误作为第二个参数。\n\n现在，让我们编写一个函数，使用validpath表达式验证路径并提取页面标题：\n\nfunc gettitle(w http.responsewriter, r *http.request) (string, error) {\n    m := validpath.findstringsubmatch(r.url.path)\n    if m == nil {\n        http.notfound(w, r)\n        return "", errors.new("invalid page title")\n    }\n    return m[2], nil // the title is the second subexpression.\n}\n\n\n如果标题是有效的，那么它将与一个nil错误值一起返回。如果标题无效，函数将向http连接写入一个“404未找到”错误，并向处理程序返回一个错误。要创建新的错误，我们必须导入错误包。\n\n让我们在每个处理程序中调用gettitle：\n\nfunc viewhandler(w http.responsewriter, r *http.request) {\n    title, err := gettitle(w, r)\n    if err != nil {\n        return\n    }\n    p, err := loadpage(title)\n    if err != nil {\n        http.redirect(w, r, "/edit/"+title, http.statusfound)\n        return\n    }\n    rendertemplate(w, "view", p)\n}\n\n\nfunc edithandler(w http.responsewriter, r *http.request) {\n    title, err := gettitle(w, r)\n    if err != nil {\n        return\n    }\n    p, err := loadpage(title)\n    if err != nil {\n        p = &page{title: title}\n    }\n    rendertemplate(w, "edit", p)\n}\n\n\nfunc savehandler(w http.responsewriter, r *http.request) {\n    title, err := gettitle(w, r)\n    if err != nil {\n        return\n    }\n    body := r.formvalue("body")\n    p := &page{title: title, body: []byte(body)}\n    err = p.save()\n    if err != nil {\n        http.error(w, err.error(), http.statusinternalservererror)\n        return\n    }\n    http.redirect(w, r, "/view/"+title, http.statusfound)\n}\n\n\n# 介绍函数文字和闭包\n\n在每个处理程序中捕捉错误条件会引入大量重复的代码。如果我们可以将每个处理程序封装在一个函数中进行验证和错误检查，会怎么样？go的函数文字提供了一种强大的功能抽象方法，可以在这里为我们提供帮助。\n\n首先，我们重写每个处理程序的函数定义，以接受一个标题字符串：\n\nfunc viewhandler(w http.responsewriter, r *http.request, title string)\nfunc edithandler(w http.responsewriter, r *http.request, title string)\nfunc savehandler(w http.responsewriter, r *http.request, title string)\n\n\n现在，让我们定义一个包装函数，它接受上面类型的函数，并返回http.handlerfunc类型的函数（适合传递给函数http.handlefunc）：\n\nfunc makehandler(fn func (http.responsewriter, *http.request, string)) http.handlerfunc {\n return func(w http.responsewriter, r *http.request) {\n  // here we will extract the page title from the request,\n  // and call the provided handler \'fn\'\n }\n}\n\n\n返回的函数被称为闭包，因为它包含了在其外部定义的值。在这种情况下，变量fn（makehandler的单个参数）被闭包包围。变量fn将是我们的保存、编辑或视图处理程序之一。\n\n现在我们可以从gettitle中获取代码并在这里使用它（经过一些小的修改）：\n\nfunc makehandler(fn func(http.responsewriter, *http.request, string)) http.handlerfunc {\n    return func(w http.responsewriter, r *http.request) {\n        m := validpath.findstringsubmatch(r.url.path)\n        if m == nil {\n            http.notfound(w, r)\n            return\n        }\n        fn(w, r, m[2])\n    }\n}\n\n\nmakehandler返回的闭包是一个使用http.responsewriter和http.request（换句话说，http.handlerfunc）的函数。闭包从请求路径中提取标题，并使用validpath regexp进行验证。如果标题无效，将使用http.notfound函数向responsewriter写入一个错误。如果标题有效，则将调用包含的处理程序函数fn，并将responsewriter、request和title作为参数。\n\n现在，我们可以在使用http包注册处理程序函数之前，将处理程序函数主要包装为makehandler：\n\nfunc main() {\n    http.handlefunc("/view/", makehandler(viewhandler))\n    http.handlefunc("/edit/", makehandler(edithandler))\n    http.handlefunc("/save/", makehandler(savehandler))\n\n    log.fatal(http.listenandserve(":8080", nil))\n}\n\n\n最后，我们从处理程序函数中删除了对gettitle的调用，使它们更加简单：\n\nfunc viewhandler(w http.responsewriter, r *http.request, title string) {\n    p, err := loadpage(title)\n    if err != nil {\n        http.redirect(w, r, "/edit/"+title, http.statusfound)\n        return\n    }\n    rendertemplate(w, "view", p)\n}\n\n\nfunc edithandler(w http.responsewriter, r *http.request, title string) {\n    p, err := loadpage(title)\n    if err != nil {\n        p = &page{title: title}\n    }\n    rendertemplate(w, "edit", p)\n}\n\n\nfunc savehandler(w http.responsewriter, r *http.request, title string) {\n    body := r.formvalue("body")\n    p := &page{title: title, body: []byte(body)}\n    err := p.save()\n    if err != nil {\n        http.error(w, err.error(), http.statusinternalservererror)\n        return\n    }\n    http.redirect(w, r, "/view/"+title, http.statusfound)\n}\n\n\n# 试试看\n\n查看最终代码列表:\n\n// copyright 2010 the go authors. all rights reserved.\n// use of this source code is governed by a bsd-style\n// license that can be found in the license file.\n\n// +build ignore\n\npackage main\n\nimport (\n "html/template"\n "io/ioutil"\n "log"\n "net/http"\n "regexp"\n)\n\ntype page struct {\n title string\n body  []byte\n}\n\nfunc (p *page) save() error {\n filename := p.title + ".txt"\n return ioutil.writefile(filename, p.body, 0600)\n}\n\nfunc loadpage(title string) (*page, error) {\n filename := title + ".txt"\n body, err := ioutil.readfile(filename)\n if err != nil {\n  return nil, err\n }\n return &page{title: title, body: body}, nil\n}\n\nfunc viewhandler(w http.responsewriter, r *http.request, title string) {\n p, err := loadpage(title)\n if err != nil {\n  http.redirect(w, r, "/edit/"+title, http.statusfound)\n  return\n }\n rendertemplate(w, "view", p)\n}\n\nfunc edithandler(w http.responsewriter, r *http.request, title string) {\n p, err := loadpage(title)\n if err != nil {\n  p = &page{title: title}\n }\n rendertemplate(w, "edit", p)\n}\n\nfunc savehandler(w http.responsewriter, r *http.request, title string) {\n body := r.formvalue("body")\n p := &page{title: title, body: []byte(body)}\n err := p.save()\n if err != nil {\n  http.error(w, err.error(), http.statusinternalservererror)\n  return\n }\n http.redirect(w, r, "/view/"+title, http.statusfound)\n}\n\nvar templates = template.must(template.parsefiles("edit.html", "view.html"))\n\nfunc rendertemplate(w http.responsewriter, tmpl string, p *page) {\n err := templates.executetemplate(w, tmpl+".html", p)\n if err != nil {\n  http.error(w, err.error(), http.statusinternalservererror)\n }\n}\n\nvar validpath = regexp.mustcompile("^/(edit|save|view)/([a-za-z0-9]+)$")\n\nfunc makehandler(fn func(http.responsewriter, *http.request, string)) http.handlerfunc {\n return func(w http.responsewriter, r *http.request) {\n  m := validpath.findstringsubmatch(r.url.path)\n  if m == nil {\n   http.notfound(w, r)\n   return\n  }\n  fn(w, r, m[2])\n }\n}\n\nfunc main() {\n http.handlefunc("/view/", makehandler(viewhandler))\n http.handlefunc("/edit/", makehandler(edithandler))\n http.handlefunc("/save/", makehandler(savehandler))\n\n log.fatal(http.listenandserve(":8080", nil))\n}\n\n\n重新编译代码，然后运行应用程序：\n\ngo build wiki.go\n./wiki\n\n\n浏览 http://localhost:8080/view/anewpage 应该会向您显示页面编辑表单。然后您应该能够输入一些文本，单击“保存”，然后被重定向到新创建的页面。>\n\n# 其他任务\n\n以下是一些你可能想自己解决的简单任务：\n\n * 将模板存储在tmpl/中，将页面数据存储在data/中。\n * 添加一个处理程序，使网站根重定向到/viewfrontpage。\n * 通过使页面模板成为有效的html并添加一些css规则来扩充页面模板。\n * 通过将[pagename]的实例转换为 <a href=“/view/pagename”>页面名称</a>。（提示：您可以使用regexp.replaceallfunc来执行此操作）',charsets:{cjk:!0}},{title:"UI自动化课程简介",frontmatter:{title:"UI自动化课程简介",date:"2023-04-13T08:49:38.000Z",permalink:"/pages/Microsoft/UIAutomation/000/"},regularPath:"/03.%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91/03.%E5%BE%AE%E8%BD%AFUIAutomation%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91.md/01.UI%E8%87%AA%E5%8A%A8%E5%8C%96%E8%AF%BE%E7%A8%8B%E7%AE%80%E4%BB%8B.html",relativePath:"03.中文翻译/03.微软UIAutomation文档翻译.md/01.UI自动化课程简介.md",key:"v-a34e4bf2",path:"/pages/Microsoft/UIAutomation/000/",headers:[{level:3,title:"适用场景",slug:"适用场景",normalizedTitle:"适用场景",charIndex:169},{level:3,title:"开发人员受众",slug:"开发人员受众",normalizedTitle:"开发人员受众",charIndex:289},{level:3,title:"运行时要求",slug:"运行时要求",normalizedTitle:"运行时要求",charIndex:448},{level:3,title:"支持底层操作系统",slug:"支持底层操作系统",normalizedTitle:"支持底层操作系统",charIndex:766},{level:3,title:"本课程主要内容",slug:"本课程主要内容",normalizedTitle:"本课程主要内容",charIndex:1677}],headersStr:"适用场景 开发人员受众 运行时要求 支持底层操作系统 本课程主要内容",content:"Microsoft UI Automation（UI自动化）是一个辅助功能框架，使Windows应用程序能够提供和使用有关用户界面（UI）的编程信息。它提供对桌面上大多数UI元素的编程访问。它使屏幕阅读器等辅助技术产品能够向最终用户提供有关UI的信息，并通过标准输入以外的方式操作UI。UI自动化还允许自动化测试脚本与UI交互。\n\n\n# 适用场景\n\n通过使用UI Automation和遵循无障碍设计实践，开发人员可以让许多视力、听力或运动障碍的人更容易访问在Windows上运行的应用程序。此外，UI Automation专门设计用于为自动化测试场景提供强大的功能。\n\n\n# 开发人员受众\n\nUI Automation是为有经验的C/C++开发人员设计的。一般来说，开发人员需要对组件对象模型（COM）对象和接口、Unicode和Windows API编程有一定程度的了解。\n\n有关托管代码的UI自动化的信息，请参阅MSDN的.NET Framework开发人员指南部分中的辅助功能。\n\n\n# 运行时要求\n\n以下操作系统支持UI Automation： Windows XP、Windows Server 2003、Windows Server 2003R2、Windows Vista、Windows 7、Windows 10、Windows Server 2008、Windows Server 2008R2、Windows Server 2012、Windows Server 2012R2、Windows Server2016和Windows Server 2019。\n\n> Notes: Windows XP和Windows Server 2003也需要Microsoft.NET Framework 3.0。\n\n\n# 支持底层操作系统\n\nWindows Vista平台更新是一组运行时库，使开发人员能够将应用程序定位到Windows 7和下层操作系统。Windows Server 2008平台更新是一组运行时库，使开发人员能够将应用程序定位到Windows Server 2008 R2和以前版本的Windows Server。Windows Vista平台更新和Windows Server 2008平台更新将通过Windows Update提供给所有Windows Vista和Windows Server 08客户。需要Windows Vista平台更新或Windows Server 2008平台更新的第三方应用程序可以让Windows Update检测是否已安装；如果不是，Windows Update将在后台下载并安装它。\n\n适用于Windows Vista的平台更新和适用于Windows Server 2008的平台更新都支持以下操作系统上的整个Windows Automation API 3.0功能集。\n\n * Windows XP (English)\n * Windows XP Home SP3 x86\n * Windows XP Professional SP3 x86\n * Windows Server 2003 (English)\n * Windows Server 2003 SP2 (x86 and x64)\n * Windows Vista (English)\n * Starter SP2 (x86 and x64)\n * Home Premium SP2 (x86 and x64)\n * Business SP2 (x86 and x64)\n * Enterprise SP2 (x86 and x64)\n * Ultimate SP2 (x86 and x64)\n * Windows Server 2008 (English)\n * Windows Server 2008 SP2 (x86 and x64)\n\n有关这两个更新的详细信息，请参阅Windows Vista平台更新。\n\n\n# 本课程主要内容\n\n * UI自动化基础\n * UI Automation Provider程序员指南\n * UI Automation Client程序员指南\n * 参考\n * 样品\n * 附录",normalizedContent:"microsoft ui automation（ui自动化）是一个辅助功能框架，使windows应用程序能够提供和使用有关用户界面（ui）的编程信息。它提供对桌面上大多数ui元素的编程访问。它使屏幕阅读器等辅助技术产品能够向最终用户提供有关ui的信息，并通过标准输入以外的方式操作ui。ui自动化还允许自动化测试脚本与ui交互。\n\n\n# 适用场景\n\n通过使用ui automation和遵循无障碍设计实践，开发人员可以让许多视力、听力或运动障碍的人更容易访问在windows上运行的应用程序。此外，ui automation专门设计用于为自动化测试场景提供强大的功能。\n\n\n# 开发人员受众\n\nui automation是为有经验的c/c++开发人员设计的。一般来说，开发人员需要对组件对象模型（com）对象和接口、unicode和windows api编程有一定程度的了解。\n\n有关托管代码的ui自动化的信息，请参阅msdn的.net framework开发人员指南部分中的辅助功能。\n\n\n# 运行时要求\n\n以下操作系统支持ui automation： windows xp、windows server 2003、windows server 2003r2、windows vista、windows 7、windows 10、windows server 2008、windows server 2008r2、windows server 2012、windows server 2012r2、windows server2016和windows server 2019。\n\n> notes: windows xp和windows server 2003也需要microsoft.net framework 3.0。\n\n\n# 支持底层操作系统\n\nwindows vista平台更新是一组运行时库，使开发人员能够将应用程序定位到windows 7和下层操作系统。windows server 2008平台更新是一组运行时库，使开发人员能够将应用程序定位到windows server 2008 r2和以前版本的windows server。windows vista平台更新和windows server 2008平台更新将通过windows update提供给所有windows vista和windows server 08客户。需要windows vista平台更新或windows server 2008平台更新的第三方应用程序可以让windows update检测是否已安装；如果不是，windows update将在后台下载并安装它。\n\n适用于windows vista的平台更新和适用于windows server 2008的平台更新都支持以下操作系统上的整个windows automation api 3.0功能集。\n\n * windows xp (english)\n * windows xp home sp3 x86\n * windows xp professional sp3 x86\n * windows server 2003 (english)\n * windows server 2003 sp2 (x86 and x64)\n * windows vista (english)\n * starter sp2 (x86 and x64)\n * home premium sp2 (x86 and x64)\n * business sp2 (x86 and x64)\n * enterprise sp2 (x86 and x64)\n * ultimate sp2 (x86 and x64)\n * windows server 2008 (english)\n * windows server 2008 sp2 (x86 and x64)\n\n有关这两个更新的详细信息，请参阅windows vista平台更新。\n\n\n# 本课程主要内容\n\n * ui自动化基础\n * ui automation provider程序员指南\n * ui automation client程序员指南\n * 参考\n * 样品\n * 附录",charsets:{cjk:!0}},{title:"01.Windows11下PyAutoGui的安装和使用",frontmatter:{title:"01.Windows11下PyAutoGui的安装和使用",date:"2023-04-11 15:18；20",permalink:"/pages/python/PyAutoGui/001/"},regularPath:"/03.%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91/02.Python-PyAutoGui%E6%96%87%E6%A1%A3%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91/01.Windows%E4%B8%8BPyAutoGui%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8.html",relativePath:"03.中文翻译/02.Python-PyAutoGui文档中文翻译/01.Windows下PyAutoGui的安装和使用.md",key:"v-643850aa",path:"/pages/python/PyAutoGui/001/",headers:[{level:2,title:"安装PyAutoGUI库",slug:"安装pyautogui库",normalizedTitle:"安装pyautogui库",charIndex:2},{level:3,title:"系统环境",slug:"系统环境",normalizedTitle:"系统环境",charIndex:243},{level:3,title:"使用Pip安装PyAutoGUI",slug:"使用pip安装pyautogui",normalizedTitle:"使用pip安装pyautogui",charIndex:288},{level:3,title:"虚拟环境中引入pyAutoGUI",slug:"虚拟环境中引入pyautogui",normalizedTitle:"虚拟环境中引入pyautogui",charIndex:738},{level:2,title:"PyAutoGui的使用实例",slug:"pyautogui的使用实例",normalizedTitle:"pyautogui的使用实例",charIndex:785},{level:3,title:"常规函数",slug:"常规函数",normalizedTitle:"常规函数",charIndex:804},{level:3,title:"故障保护(Fail-Safes)",slug:"故障保护-fail-safes",normalizedTitle:"故障保护(fail-safes)",charIndex:942},{level:3,title:"鼠标控制",slug:"鼠标控制",normalizedTitle:"鼠标控制",charIndex:1120},{level:3,title:"键盘控制",slug:"键盘控制",normalizedTitle:"键盘控制",charIndex:2169},{level:3,title:"消息框的控制",slug:"消息框的控制",normalizedTitle:"消息框的控制",charIndex:2646},{level:3,title:"屏幕截图功能",slug:"屏幕截图功能",normalizedTitle:"屏幕截图功能",charIndex:2955}],headersStr:"安装PyAutoGUI库 系统环境 使用Pip安装PyAutoGUI 虚拟环境中引入pyAutoGUI PyAutoGui的使用实例 常规函数 故障保护(Fail-Safes) 鼠标控制 键盘控制 消息框的控制 屏幕截图功能",content:"# 安装PyAutoGUI库\n\nRPA(Robotic Process Automation)，即机器人流程自动化。 RPA技术用于将工作中可重复的部分流程化，让机器替我们完成这一工作。 PyAutoGUl使我们可以使用Python脚本来控制鼠标和键盘来自动与其他应用程序交互，我们可以用这个库来记录我们的键鼠操作，使得计算机像人一样去使用相应应用程序，将人从大量的重复性工作中解放出来。 以下将在自己家用的Window11家用中文版笔记本上，安装并试用PuAutoGUI库。\n\n\n# 系统环境\n\n操作系统：Windows11 家庭中文版 Python：3.11.2\n\n\n# 使用Pip安装PyAutoGUI\n\n先创建虚拟环境：\n\n virtualenv -p python3.11 PyRPA\n\n\n而后进入虚拟环境目录下的Scripts文件夹，激活虚拟环境\n\ncd PyRPA\ncd Scripts\n.\\activate\n\n\n> 备注：家用版Windows在激活虚拟环境 .\\activate 时可能出现【在此系统中禁止执行脚本】的错误。这是由于系统现有执行策略可能是Restricted(默认设置)的原因。Restricted 策略不允许任何脚本运行。 要了解现有系统执行策略，可执行命令：\n\nget-executionpolicy\n\n\n> 要在本地计算机上运行您编写的未签名脚本和来自其他用户的签名脚本,可执行命令:\n\nset-executionpolicy remotesigned\n\n\n> 将执行策略更改为 remotesigned\n\n激活虚拟环境后，在环境中安装PyAutoGui：\n\npip install pyautogui\n\n\n查看是否已安装成功:\n\n\n# 虚拟环境中引入pyAutoGUI\n\npython\nimport pyautogui\n\n\n\n# PyAutoGui的使用实例\n\n\n# 常规函数\n\npyautogui.position()  # 当前鼠标所在的x、y坐标\npyautogui.size()  # 当前屏幕宽高\npyautogui.onScreen(x, y)  # 如果x\\y指定的点落在屏幕内则返回True.使用时x、y需要赋值\n\n\n\n\n\n# 故障保护(Fail-Safes)\n\n在每次PyAutoGUI调用后设置2.5秒的暂停：\n\npyautogui.PAUSE = 2.5\n\n\n当故障保护(Fail-Safes)模式为True时，将鼠标移到左上角将引发pyautogui.FailSafeException，该异常可能会中止程序：\n\npyautogui.FAILSAFE = True\n\n\n\n# 鼠标控制\n\nXY坐标的原点为0，0，位于屏幕的左上角。X向右增加，Y向下增加。\n\npyautogui.moveTo(x, y, duration=num_seconds)  # 鼠标在num_second内移动至 X、Y 所指定的坐标点\npyautogui.moveRel(xOffset, yOffset, duration=num_seconds)  # 鼠标在num_second内从当前坐标点依据 xOffset, yOffset 所指定的跨度进行相对移动\n\n\n如果持续时间 duration 参数为0或未指定，则移动是立即的。\n\n> 注意：在Mac上拖动不能立即进行。\n\npyautogui.dragTo(x,y,duration=num_seconds)#将鼠标拖动到XY\npyautogui.dragRel(xOffset,yOffset,duration=num_seconds)#相对于鼠标当前位置拖动鼠标\n\n\n调用click()只需在鼠标当前位置用左键单击鼠标一次，但关键字参数可以改变这一点：\n\npyautogui.click(x=moveToX,y=moveToY,clicks=num_of_clicks,interval=secs_between_clicks,button='left')\n\n\nbutton关键字参数可以是“left”、“middle”或“right”。\n\n所有的点击都可以用click()完成，但这些函数的存在是为了可读性。关键字参数是可选的：\n\npyautogui.rightClick(x=moveTox,y=moveToy)\npyautogui.middleClick(x=moveTox,y=moveToy)\npyautogui.doubleClick(x=moveTox,y=moveToy)\npyautogui.tripleClick(x=moveTox,y=moveToy)\n\n\namount_to_scroll参数为正数将向上滚动，为负数将向下滚动：\n\npyautogui.scroll(amount_to_scroll,x=moveTox,y=moveToy)\n\n\n鼠标按键向下和向上事件可以分别调用：\n\npyautogui.mouseDown(x=moveTox,y=moveToy,button='left')\npyautogui.mouseUp(x=moveTox,y=moveToy,button='left')\n\n\n\n# 键盘控制\n\n在函数调用时，按键指向键盘光标所在的位置。\n\npyautogui.typewrite('Hello world!\\n', interval=secs_between_keys) #用于输入文本，换行符为Enter\n\n\n还可以传递按键名称列表：\n\npyautogui.typetype([a','b','c','left','backspace','enter','f1'],interval=secs_between_keys)\n\n\n键盘按键名称的完整列表位于pyautogui.KEYBOARD_KEYS中。\n\n像Ctrl-S或Ctrl-Shift-1这样的键盘热键可以通过将键名列表传递给热键()来完成：\n\npyautogui.hotkey('ctrl', 'c')  # ctrl-c复制\npyautogui.hotkey('ctrl', 'v')  # ctrl-v粘贴\n\n\n单个按键按下和放开事件可以分别调用：\n\npyautogui.keyDown(key_name)\npyautogui.keyUp(key_name)\n\n\n\n# 消息框的控制\n\n如果您需要暂停程序，直到用户单击“确定”，或者想向用户显示一些信息，那么消息框函数的名称与JavaScript类似：\n\npyautogui.alert('This displays some text with an OK button.')\npyautogui.confirm('This displays text and has an OK and Cancel button.')\npyautogui.prompt('This lets the user type in a string and press OK.')\n\n\n如果用户单击“取消”，prompt（）函数将返回None。\n\n\n# 屏幕截图功能\n\nPyAutoGUI使用Pillow/PIL用于其图像相关数据处理。\n\n在Linux上，您必须运行sudo apt-get-install scrum才能使用屏幕截图功能。\n\npyautogui.screenshot()  # 返回一个 Pillow/PIL 图像对象\npyautogui.screenshot('foo.png')  # 返回一个 Pillow/PIL 图像对象, 并保存到指定文件\n\n\n如果你想要截图部分屏幕区域，你可以用locateOnScreen()方法在屏幕上获取。\n\npyautogui.locateOnScreen('looksLikeThis.png')  # 按照 (left, top, width, height) = (863, 417, 70, 13) 的格式获取屏幕区域图像\n\n\nlocateAllOnScreen（）函数将为其在屏幕上找到的所有窗体区域返回生成器：\n\n>>> for i in pyautogui.locateAllOnScreen('looksLikeThis.png')\n...\n...\n(863, 117, 70, 13)\n(623, 137, 70, 13)\n(853, 577, 70, 13)\n(883, 617, 70, 13)\n(973, 657, 70, 13)\n(933, 877, 70, 13)\n\n\nlist(pyautogui.locateAllOnScreen('looksLikeThis.png'))\n[(863, 117, 70, 13), (623, 137, 70, 13), (853, 577, 70, 13), (883, 617, 70, 13), (973, 657, 70, 13), (933, 877, 70, 13)]\n\n\nlocateCenterOnScreen（）函数只返回图像在屏幕上的中间位置的XY坐标：\n\npyautogui.locateCenterOnScreen('looksLikeThis.png')  # returns center x and y\n(898, 423)\n\n\n如果在屏幕上找不到图像，这些函数将返回None。\n\n> 注意：定位功能很慢，可能需要整整一两秒钟的时间。",normalizedContent:"# 安装pyautogui库\n\nrpa(robotic process automation)，即机器人流程自动化。 rpa技术用于将工作中可重复的部分流程化，让机器替我们完成这一工作。 pyautogul使我们可以使用python脚本来控制鼠标和键盘来自动与其他应用程序交互，我们可以用这个库来记录我们的键鼠操作，使得计算机像人一样去使用相应应用程序，将人从大量的重复性工作中解放出来。 以下将在自己家用的window11家用中文版笔记本上，安装并试用puautogui库。\n\n\n# 系统环境\n\n操作系统：windows11 家庭中文版 python：3.11.2\n\n\n# 使用pip安装pyautogui\n\n先创建虚拟环境：\n\n virtualenv -p python3.11 pyrpa\n\n\n而后进入虚拟环境目录下的scripts文件夹，激活虚拟环境\n\ncd pyrpa\ncd scripts\n.\\activate\n\n\n> 备注：家用版windows在激活虚拟环境 .\\activate 时可能出现【在此系统中禁止执行脚本】的错误。这是由于系统现有执行策略可能是restricted(默认设置)的原因。restricted 策略不允许任何脚本运行。 要了解现有系统执行策略，可执行命令：\n\nget-executionpolicy\n\n\n> 要在本地计算机上运行您编写的未签名脚本和来自其他用户的签名脚本,可执行命令:\n\nset-executionpolicy remotesigned\n\n\n> 将执行策略更改为 remotesigned\n\n激活虚拟环境后，在环境中安装pyautogui：\n\npip install pyautogui\n\n\n查看是否已安装成功:\n\n\n# 虚拟环境中引入pyautogui\n\npython\nimport pyautogui\n\n\n\n# pyautogui的使用实例\n\n\n# 常规函数\n\npyautogui.position()  # 当前鼠标所在的x、y坐标\npyautogui.size()  # 当前屏幕宽高\npyautogui.onscreen(x, y)  # 如果x\\y指定的点落在屏幕内则返回true.使用时x、y需要赋值\n\n\n\n\n\n# 故障保护(fail-safes)\n\n在每次pyautogui调用后设置2.5秒的暂停：\n\npyautogui.pause = 2.5\n\n\n当故障保护(fail-safes)模式为true时，将鼠标移到左上角将引发pyautogui.failsafeexception，该异常可能会中止程序：\n\npyautogui.failsafe = true\n\n\n\n# 鼠标控制\n\nxy坐标的原点为0，0，位于屏幕的左上角。x向右增加，y向下增加。\n\npyautogui.moveto(x, y, duration=num_seconds)  # 鼠标在num_second内移动至 x、y 所指定的坐标点\npyautogui.moverel(xoffset, yoffset, duration=num_seconds)  # 鼠标在num_second内从当前坐标点依据 xoffset, yoffset 所指定的跨度进行相对移动\n\n\n如果持续时间 duration 参数为0或未指定，则移动是立即的。\n\n> 注意：在mac上拖动不能立即进行。\n\npyautogui.dragto(x,y,duration=num_seconds)#将鼠标拖动到xy\npyautogui.dragrel(xoffset,yoffset,duration=num_seconds)#相对于鼠标当前位置拖动鼠标\n\n\n调用click()只需在鼠标当前位置用左键单击鼠标一次，但关键字参数可以改变这一点：\n\npyautogui.click(x=movetox,y=movetoy,clicks=num_of_clicks,interval=secs_between_clicks,button='left')\n\n\nbutton关键字参数可以是“left”、“middle”或“right”。\n\n所有的点击都可以用click()完成，但这些函数的存在是为了可读性。关键字参数是可选的：\n\npyautogui.rightclick(x=movetox,y=movetoy)\npyautogui.middleclick(x=movetox,y=movetoy)\npyautogui.doubleclick(x=movetox,y=movetoy)\npyautogui.tripleclick(x=movetox,y=movetoy)\n\n\namount_to_scroll参数为正数将向上滚动，为负数将向下滚动：\n\npyautogui.scroll(amount_to_scroll,x=movetox,y=movetoy)\n\n\n鼠标按键向下和向上事件可以分别调用：\n\npyautogui.mousedown(x=movetox,y=movetoy,button='left')\npyautogui.mouseup(x=movetox,y=movetoy,button='left')\n\n\n\n# 键盘控制\n\n在函数调用时，按键指向键盘光标所在的位置。\n\npyautogui.typewrite('hello world!\\n', interval=secs_between_keys) #用于输入文本，换行符为enter\n\n\n还可以传递按键名称列表：\n\npyautogui.typetype([a','b','c','left','backspace','enter','f1'],interval=secs_between_keys)\n\n\n键盘按键名称的完整列表位于pyautogui.keyboard_keys中。\n\n像ctrl-s或ctrl-shift-1这样的键盘热键可以通过将键名列表传递给热键()来完成：\n\npyautogui.hotkey('ctrl', 'c')  # ctrl-c复制\npyautogui.hotkey('ctrl', 'v')  # ctrl-v粘贴\n\n\n单个按键按下和放开事件可以分别调用：\n\npyautogui.keydown(key_name)\npyautogui.keyup(key_name)\n\n\n\n# 消息框的控制\n\n如果您需要暂停程序，直到用户单击“确定”，或者想向用户显示一些信息，那么消息框函数的名称与javascript类似：\n\npyautogui.alert('this displays some text with an ok button.')\npyautogui.confirm('this displays text and has an ok and cancel button.')\npyautogui.prompt('this lets the user type in a string and press ok.')\n\n\n如果用户单击“取消”，prompt（）函数将返回none。\n\n\n# 屏幕截图功能\n\npyautogui使用pillow/pil用于其图像相关数据处理。\n\n在linux上，您必须运行sudo apt-get-install scrum才能使用屏幕截图功能。\n\npyautogui.screenshot()  # 返回一个 pillow/pil 图像对象\npyautogui.screenshot('foo.png')  # 返回一个 pillow/pil 图像对象, 并保存到指定文件\n\n\n如果你想要截图部分屏幕区域，你可以用locateonscreen()方法在屏幕上获取。\n\npyautogui.locateonscreen('lookslikethis.png')  # 按照 (left, top, width, height) = (863, 417, 70, 13) 的格式获取屏幕区域图像\n\n\nlocateallonscreen（）函数将为其在屏幕上找到的所有窗体区域返回生成器：\n\n>>> for i in pyautogui.locateallonscreen('lookslikethis.png')\n...\n...\n(863, 117, 70, 13)\n(623, 137, 70, 13)\n(853, 577, 70, 13)\n(883, 617, 70, 13)\n(973, 657, 70, 13)\n(933, 877, 70, 13)\n\n\nlist(pyautogui.locateallonscreen('lookslikethis.png'))\n[(863, 117, 70, 13), (623, 137, 70, 13), (853, 577, 70, 13), (883, 617, 70, 13), (973, 657, 70, 13), (933, 877, 70, 13)]\n\n\nlocatecenteronscreen（）函数只返回图像在屏幕上的中间位置的xy坐标：\n\npyautogui.locatecenteronscreen('lookslikethis.png')  # returns center x and y\n(898, 423)\n\n\n如果在屏幕上找不到图像，这些函数将返回none。\n\n> 注意：定位功能很慢，可能需要整整一两秒钟的时间。",charsets:{cjk:!0}},{title:"课程·安装",frontmatter:{title:"课程·安装",date:"2023-05-03T10:18:24.000Z",permalink:"/pages/720440/"},regularPath:"/03.%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91/04.openpyxl%E6%96%87%E6%A1%A3%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91.md/001.%E8%AF%BE%E7%A8%8B%C2%B7%E5%AE%89%E8%A3%85.html",relativePath:"03.中文翻译/04.openpyxl文档中文翻译.md/001.课程·安装.md",key:"v-0597a28a",path:"/pages/720440/",headers:[{level:2,title:"安装",slug:"安装",normalizedTitle:"安装",charIndex:9},{level:2,title:"Create a workbook",slug:"create-a-workbook",normalizedTitle:"create a workbook",charIndex:629},{level:2,title:"Playing with data",slug:"playing-with-data",normalizedTitle:"playing with data",charIndex:2562},{level:2,title:"Data storage",slug:"data-storage",normalizedTitle:"data storage",charIndex:6158},{level:2,title:"Loading from a file",slug:"loading-from-a-file",normalizedTitle:"loading from a file",charIndex:8342},{level:2,title:"Errors loading workbooks",slug:"errors-loading-workbooks",normalizedTitle:"errors loading workbooks",charIndex:9150}],headersStr:"安装 Create a workbook Playing with data Data storage Loading from a file Errors loading workbooks",content:"# 教程\n\n\n# 安装\n\n使用pip安装openpyxl。建议在Python虚拟环境中执行此操作\n\n没有系统包:\n\npip install openpyxl\n\n\n.. note::\n\n支持流行的“lxml”_库，如果已安装。这在创建大文件时特别有用。\n\n.. _lxml: http://lxml.de\n\n.. warning::\n\n为了能够将图像（jpeg、png、bmp…）包含到openpyxl文件中， 您还需要安装的\"pillow\"库\n\n    pip install pillow\n\n\n或浏览器打开 https://pypi.python.org/pypi/Pillow/，选择最新版本下载安装。\n\nWorking with a checkout +++++++++++++++++++++++\n\nSometimes you might want to work with the checkout of a particular version. This may be the case if bugs have been fixed but a release has not yet been made.\n\n.. parsed-literal:: $ pip install -e hg+https://foss.heptapod.net/openpyxl/openpyxl/@\\ |version|\\ #egg=openpyxl\n\n\n# Create a workbook\n\nThere is no need to create a file on the filesystem to get started with openpyxl. Just import the :class:Workbook class and start work::\n\n>>> from openpyxl import Workbook\n>>> wb = Workbook()\n\n\nA workbook is always created with at least one worksheet. You can get it by using the :obj:Workbook.active property::\n\n>>> ws = wb.active\n\n\n.. note::\n\nThis is set to 0 by default. Unless you modify its value, you will always\nget the first worksheet by using this method.\n\n\nYou can create new worksheets using the :meth:Workbook.create_sheet method::\n\n>>> ws1 = wb.create_sheet(\"Mysheet\") # insert at the end (default)\n# or\n>>> ws2 = wb.create_sheet(\"Mysheet\", 0) # insert at first position\n# or\n>>> ws3 = wb.create_sheet(\"Mysheet\", -1) # insert at the penultimate position\n\n\nSheets are given a name automatically when they are created. They are numbered in sequence (Sheet, Sheet1, Sheet2, ...). You can change this name at any time with the :obj:Worksheet.title property::\n\nws.title = \"New Title\"\n\n\nOnce you gave a worksheet a name, you can get it as a key of the workbook::\n\n>>> ws3 = wb[\"New Title\"]\n\n\nYou can review the names of all worksheets of the workbook with the :obj:Workbook.sheetname attribute ::\n\n>>> print(wb.sheetnames)\n['Sheet2', 'New Title', 'Sheet1']\n\n\nYou can loop through worksheets ::\n\n>>> for sheet in wb:\n...     print(sheet.title)\n\n\nYou can create copies of worksheets within a single workbook:\n\n:meth:Workbook.copy_worksheet method::\n\n>>> source = wb.active\n>>> target = wb.copy_worksheet(source)\n\n\n.. note::\n\nOnly cells (including values, styles, hyperlinks and comments) and\ncertain worksheet attributes (including dimensions, format and\nproperties) are copied. All other workbook / worksheet attributes\nare not copied - e.g. Images, Charts.\n\nYou also **cannot** copy worksheets between workbooks. You cannot copy\na worksheet if the workbook is open in `read-only` or `write-only`\nmode.\n\n\n\n# Playing with data\n\nAccessing one cell ++++++++++++++++++\n\nNow we know how to get a worksheet, we can start modifying cells content. Cells can be accessed directly as keys of the worksheet::\n\n>>> c = ws['A4']\n\n\nThis will return the cell at A4, or create one if it does not exist yet. Values can be directly assigned::\n\n>>> ws['A4'] = 4\n\n\nThere is also the :meth:Worksheet.cell method.\n\nThis provides access to cells using row and column notation::\n\n>>> d = ws.cell(row=4, column=2, value=10)\n\n\n.. note::\n\nWhen a worksheet is created in memory, it contains no `cells`. They are\ncreated when first accessed.\n\n\n.. warning::\n\nBecause of this feature, scrolling through cells instead of accessing them\ndirectly will create them all in memory, even if you don't assign them a value.\n\nSomething like ::\n\n    >>> for x in range(1,101):\n    ...        for y in range(1,101):\n    ...            ws.cell(row=x, column=y)\n\nwill create 100x100 cells in memory, for nothing.\n\n\nAccessing many cells ++++++++++++++++++++\n\nRanges of cells can be accessed using slicing::\n\n>>> cell_range = ws['A1':'C2']\n\n\nRanges of rows or columns can be obtained similarly::\n\n>>> colC = ws['C']\n>>> col_range = ws['C:D']\n>>> row10 = ws[10]\n>>> row_range = ws[5:10]\n\n\nYou can also use the :meth:Worksheet.iter_rows method::\n\n>>> for row in ws.iter_rows(min_row=1, max_col=3, max_row=2):\n...    for cell in row:\n...        print(cell)\n<Cell Sheet1.A1>\n<Cell Sheet1.B1>\n<Cell Sheet1.C1>\n<Cell Sheet1.A2>\n<Cell Sheet1.B2>\n<Cell Sheet1.C2>\n\n\nLikewise the :meth:Worksheet.iter_cols method will return columns::\n\n>>> for col in ws.iter_cols(min_row=1, max_col=3, max_row=2):\n...     for cell in col:\n...         print(cell)\n<Cell Sheet1.A1>\n<Cell Sheet1.A2>\n<Cell Sheet1.B1>\n<Cell Sheet1.B2>\n<Cell Sheet1.C1>\n<Cell Sheet1.C2>\n\n\n.. note::\n\nFor performance reasons the :obj:Worksheet.iter_cols() method is not available in read-only mode.\n\nIf you need to iterate through all the rows or columns of a file, you can instead use the :obj:Worksheet.rows property::\n\n>>> ws = wb.active\n>>> ws['C9'] = 'hello world'\n>>> tuple(ws.rows)\n((<Cell Sheet.A1>, <Cell Sheet.B1>, <Cell Sheet.C1>),\n(<Cell Sheet.A2>, <Cell Sheet.B2>, <Cell Sheet.C2>),\n(<Cell Sheet.A3>, <Cell Sheet.B3>, <Cell Sheet.C3>),\n(<Cell Sheet.A4>, <Cell Sheet.B4>, <Cell Sheet.C4>),\n(<Cell Sheet.A5>, <Cell Sheet.B5>, <Cell Sheet.C5>),\n(<Cell Sheet.A6>, <Cell Sheet.B6>, <Cell Sheet.C6>),\n(<Cell Sheet.A7>, <Cell Sheet.B7>, <Cell Sheet.C7>),\n(<Cell Sheet.A8>, <Cell Sheet.B8>, <Cell Sheet.C8>),\n(<Cell Sheet.A9>, <Cell Sheet.B9>, <Cell Sheet.C9>))\n\n\nor the :obj:Worksheet.columns property::\n\n>>> tuple(ws.columns)\n((<Cell Sheet.A1>,\n<Cell Sheet.A2>,\n<Cell Sheet.A3>,\n<Cell Sheet.A4>,\n<Cell Sheet.A5>,\n<Cell Sheet.A6>,\n...\n<Cell Sheet.B7>,\n<Cell Sheet.B8>,\n<Cell Sheet.B9>),\n(<Cell Sheet.C1>,\n<Cell Sheet.C2>,\n<Cell Sheet.C3>,\n<Cell Sheet.C4>,\n<Cell Sheet.C5>,\n<Cell Sheet.C6>,\n<Cell Sheet.C7>,\n<Cell Sheet.C8>,\n<Cell Sheet.C9>))\n\n\n.. note::\n\nFor performance reasons the :obj:Worksheet.columns property is not available in read-only mode.\n\nValues only +++++++++++\n\nIf you just want the values from a worksheet you can use the :obj:Worksheet.values property. This iterates over all the rows in a worksheet but returns just the cell values::\n\nfor row in ws.values:\n   for value in row:\n     print(value)\n\n\nBoth :meth:Worksheet.iter_rows and :meth:Worksheet.iter_cols can take the :code:values_only parameter to return just the cell's value::\n\n> > > for row in ws.iter_rows(min_row=1, max_col=3, max_row=2, values_only=True): ... print(row)\n\n(None, None, None) (None, None, None)\n\n\n# Data storage\n\nOnce we have a :class:Cell, we can assign it a value::\n\n>>> c.value = 'hello, world'\n>>> print(c.value)\n'hello, world'\n\n>>> d.value = 3.14\n>>> print(d.value)\n3.14\n\n\nSaving to a file ++++++++++++++++\n\nThe simplest and safest way to save a workbook is by using the :func:Workbook.save method of the :class:Workbook object::\n\n>>> wb = Workbook()\n>>> wb.save('balances.xlsx')\n\n\n.. warning::\n\nThis operation will overwrite existing files without warning.\n\n.. note::\n\nThe filename extension is not forced to be xlsx or xlsm, although you might have\nsome trouble opening it directly with another application if you don't\nuse an official extension.\n\nAs OOXML files are basically ZIP files, you can also  open it with your\nfavourite ZIP archive manager.\n\n\nIf required, you can specify the attribute wb.template=True, to save a workbook as a template::\n\n>>> wb = load_workbook('document.xlsx')\n>>> wb.template = True\n>>> wb.save('document_template.xltx')\n\n\nSaving as a stream ++++++++++++++++++\n\nIf you want to save the file to a stream, e.g. when using a web application such as Pyramid, Flask or Django then you can simply provide a :func:NamedTemporaryFile::\n\n>>> from tempfile import NamedTemporaryFile\n>>> from openpyxl import Workbook\n>>> wb = Workbook()\n>>> with NamedTemporaryFile() as tmp:\n        wb.save(tmp.name)\n        tmp.seek(0)\n        stream = tmp.read()\n\n\n.. warning::\n\nYou should monitor the data attributes and document extensions\nfor saving documents in the document templates and vice versa,\notherwise the result table engine can not open the document.\n\n\n.. note::\n\nThe following will fail::\n\n>>> wb = load_workbook('document.xlsx')\n>>> # Need to save with the extension *.xlsx\n>>> wb.save('new_document.xlsm')\n>>> # MS Excel can't open the document\n>>>\n>>> # or\n>>>\n>>> # Need specify attribute keep_vba=True\n>>> wb = load_workbook('document.xlsm')\n>>> wb.save('new_document.xlsm')\n>>> # MS Excel will not open the document\n>>>\n>>> # or\n>>>\n>>> wb = load_workbook('document.xltm', keep_vba=True)\n>>> # If we need a template document, then we must specify extension as *.xltm.\n>>> wb.save('new_document.xlsm')\n>>> # MS Excel will not open the document\n\n\n\n# Loading from a file\n\nYou can use the :func:openpyxl.load_workbook to open an existing workbook::\n\n>>> from openpyxl import load_workbook\n>>> wb = load_workbook(filename = 'empty_book.xlsx')\n>>> sheet_ranges = wb['range names']\n>>> print(sheet_ranges['D18'].value)\n3\n\n\n.. note ::\n\nThere are several flags that can be used in load_workbook.\n\n- `data_only` controls whether cells with formulae have either the\n  formula (default) or the value stored the last time Excel read the sheet.\n\n- `keep_vba` controls whether any Visual Basic elements are preserved or\n  not (default). If they are preserved they are still not editable.\n\n\n.. warning ::\n\nopenpyxl does currently not read all possible items in an Excel file so\nshapes will be lost from existing files if they are opened and saved with\nthe same name.\n\n\n\n# Errors loading workbooks\n\nSometimes openpyxl will fail to open a workbook. This is usually because there is something wrong with the file. If this is the case then openpyxl will try and provide some more information. Openpyxl follows the OOXML specification closely and will reject files that do not because they are invalid. When this happens you can use the exception from openpyxl to inform the developers of whichever application or library produced the file. As the OOXML specification is publicly available it is important that developers follow it.\n\nYou can find the spec by searching for ECMA-376, most of the implementation specifics are in Part 4.\n\nThis ends the tutorial for now, you can proceed to the :doc:usage section",normalizedContent:"# 教程\n\n\n# 安装\n\n使用pip安装openpyxl。建议在python虚拟环境中执行此操作\n\n没有系统包:\n\npip install openpyxl\n\n\n.. note::\n\n支持流行的“lxml”_库，如果已安装。这在创建大文件时特别有用。\n\n.. _lxml: http://lxml.de\n\n.. warning::\n\n为了能够将图像（jpeg、png、bmp…）包含到openpyxl文件中， 您还需要安装的\"pillow\"库\n\n    pip install pillow\n\n\n或浏览器打开 https://pypi.python.org/pypi/pillow/，选择最新版本下载安装。\n\nworking with a checkout +++++++++++++++++++++++\n\nsometimes you might want to work with the checkout of a particular version. this may be the case if bugs have been fixed but a release has not yet been made.\n\n.. parsed-literal:: $ pip install -e hg+https://foss.heptapod.net/openpyxl/openpyxl/@\\ |version|\\ #egg=openpyxl\n\n\n# create a workbook\n\nthere is no need to create a file on the filesystem to get started with openpyxl. just import the :class:workbook class and start work::\n\n>>> from openpyxl import workbook\n>>> wb = workbook()\n\n\na workbook is always created with at least one worksheet. you can get it by using the :obj:workbook.active property::\n\n>>> ws = wb.active\n\n\n.. note::\n\nthis is set to 0 by default. unless you modify its value, you will always\nget the first worksheet by using this method.\n\n\nyou can create new worksheets using the :meth:workbook.create_sheet method::\n\n>>> ws1 = wb.create_sheet(\"mysheet\") # insert at the end (default)\n# or\n>>> ws2 = wb.create_sheet(\"mysheet\", 0) # insert at first position\n# or\n>>> ws3 = wb.create_sheet(\"mysheet\", -1) # insert at the penultimate position\n\n\nsheets are given a name automatically when they are created. they are numbered in sequence (sheet, sheet1, sheet2, ...). you can change this name at any time with the :obj:worksheet.title property::\n\nws.title = \"new title\"\n\n\nonce you gave a worksheet a name, you can get it as a key of the workbook::\n\n>>> ws3 = wb[\"new title\"]\n\n\nyou can review the names of all worksheets of the workbook with the :obj:workbook.sheetname attribute ::\n\n>>> print(wb.sheetnames)\n['sheet2', 'new title', 'sheet1']\n\n\nyou can loop through worksheets ::\n\n>>> for sheet in wb:\n...     print(sheet.title)\n\n\nyou can create copies of worksheets within a single workbook:\n\n:meth:workbook.copy_worksheet method::\n\n>>> source = wb.active\n>>> target = wb.copy_worksheet(source)\n\n\n.. note::\n\nonly cells (including values, styles, hyperlinks and comments) and\ncertain worksheet attributes (including dimensions, format and\nproperties) are copied. all other workbook / worksheet attributes\nare not copied - e.g. images, charts.\n\nyou also **cannot** copy worksheets between workbooks. you cannot copy\na worksheet if the workbook is open in `read-only` or `write-only`\nmode.\n\n\n\n# playing with data\n\naccessing one cell ++++++++++++++++++\n\nnow we know how to get a worksheet, we can start modifying cells content. cells can be accessed directly as keys of the worksheet::\n\n>>> c = ws['a4']\n\n\nthis will return the cell at a4, or create one if it does not exist yet. values can be directly assigned::\n\n>>> ws['a4'] = 4\n\n\nthere is also the :meth:worksheet.cell method.\n\nthis provides access to cells using row and column notation::\n\n>>> d = ws.cell(row=4, column=2, value=10)\n\n\n.. note::\n\nwhen a worksheet is created in memory, it contains no `cells`. they are\ncreated when first accessed.\n\n\n.. warning::\n\nbecause of this feature, scrolling through cells instead of accessing them\ndirectly will create them all in memory, even if you don't assign them a value.\n\nsomething like ::\n\n    >>> for x in range(1,101):\n    ...        for y in range(1,101):\n    ...            ws.cell(row=x, column=y)\n\nwill create 100x100 cells in memory, for nothing.\n\n\naccessing many cells ++++++++++++++++++++\n\nranges of cells can be accessed using slicing::\n\n>>> cell_range = ws['a1':'c2']\n\n\nranges of rows or columns can be obtained similarly::\n\n>>> colc = ws['c']\n>>> col_range = ws['c:d']\n>>> row10 = ws[10]\n>>> row_range = ws[5:10]\n\n\nyou can also use the :meth:worksheet.iter_rows method::\n\n>>> for row in ws.iter_rows(min_row=1, max_col=3, max_row=2):\n...    for cell in row:\n...        print(cell)\n<cell sheet1.a1>\n<cell sheet1.b1>\n<cell sheet1.c1>\n<cell sheet1.a2>\n<cell sheet1.b2>\n<cell sheet1.c2>\n\n\nlikewise the :meth:worksheet.iter_cols method will return columns::\n\n>>> for col in ws.iter_cols(min_row=1, max_col=3, max_row=2):\n...     for cell in col:\n...         print(cell)\n<cell sheet1.a1>\n<cell sheet1.a2>\n<cell sheet1.b1>\n<cell sheet1.b2>\n<cell sheet1.c1>\n<cell sheet1.c2>\n\n\n.. note::\n\nfor performance reasons the :obj:worksheet.iter_cols() method is not available in read-only mode.\n\nif you need to iterate through all the rows or columns of a file, you can instead use the :obj:worksheet.rows property::\n\n>>> ws = wb.active\n>>> ws['c9'] = 'hello world'\n>>> tuple(ws.rows)\n((<cell sheet.a1>, <cell sheet.b1>, <cell sheet.c1>),\n(<cell sheet.a2>, <cell sheet.b2>, <cell sheet.c2>),\n(<cell sheet.a3>, <cell sheet.b3>, <cell sheet.c3>),\n(<cell sheet.a4>, <cell sheet.b4>, <cell sheet.c4>),\n(<cell sheet.a5>, <cell sheet.b5>, <cell sheet.c5>),\n(<cell sheet.a6>, <cell sheet.b6>, <cell sheet.c6>),\n(<cell sheet.a7>, <cell sheet.b7>, <cell sheet.c7>),\n(<cell sheet.a8>, <cell sheet.b8>, <cell sheet.c8>),\n(<cell sheet.a9>, <cell sheet.b9>, <cell sheet.c9>))\n\n\nor the :obj:worksheet.columns property::\n\n>>> tuple(ws.columns)\n((<cell sheet.a1>,\n<cell sheet.a2>,\n<cell sheet.a3>,\n<cell sheet.a4>,\n<cell sheet.a5>,\n<cell sheet.a6>,\n...\n<cell sheet.b7>,\n<cell sheet.b8>,\n<cell sheet.b9>),\n(<cell sheet.c1>,\n<cell sheet.c2>,\n<cell sheet.c3>,\n<cell sheet.c4>,\n<cell sheet.c5>,\n<cell sheet.c6>,\n<cell sheet.c7>,\n<cell sheet.c8>,\n<cell sheet.c9>))\n\n\n.. note::\n\nfor performance reasons the :obj:worksheet.columns property is not available in read-only mode.\n\nvalues only +++++++++++\n\nif you just want the values from a worksheet you can use the :obj:worksheet.values property. this iterates over all the rows in a worksheet but returns just the cell values::\n\nfor row in ws.values:\n   for value in row:\n     print(value)\n\n\nboth :meth:worksheet.iter_rows and :meth:worksheet.iter_cols can take the :code:values_only parameter to return just the cell's value::\n\n> > > for row in ws.iter_rows(min_row=1, max_col=3, max_row=2, values_only=true): ... print(row)\n\n(none, none, none) (none, none, none)\n\n\n# data storage\n\nonce we have a :class:cell, we can assign it a value::\n\n>>> c.value = 'hello, world'\n>>> print(c.value)\n'hello, world'\n\n>>> d.value = 3.14\n>>> print(d.value)\n3.14\n\n\nsaving to a file ++++++++++++++++\n\nthe simplest and safest way to save a workbook is by using the :func:workbook.save method of the :class:workbook object::\n\n>>> wb = workbook()\n>>> wb.save('balances.xlsx')\n\n\n.. warning::\n\nthis operation will overwrite existing files without warning.\n\n.. note::\n\nthe filename extension is not forced to be xlsx or xlsm, although you might have\nsome trouble opening it directly with another application if you don't\nuse an official extension.\n\nas ooxml files are basically zip files, you can also  open it with your\nfavourite zip archive manager.\n\n\nif required, you can specify the attribute wb.template=true, to save a workbook as a template::\n\n>>> wb = load_workbook('document.xlsx')\n>>> wb.template = true\n>>> wb.save('document_template.xltx')\n\n\nsaving as a stream ++++++++++++++++++\n\nif you want to save the file to a stream, e.g. when using a web application such as pyramid, flask or django then you can simply provide a :func:namedtemporaryfile::\n\n>>> from tempfile import namedtemporaryfile\n>>> from openpyxl import workbook\n>>> wb = workbook()\n>>> with namedtemporaryfile() as tmp:\n        wb.save(tmp.name)\n        tmp.seek(0)\n        stream = tmp.read()\n\n\n.. warning::\n\nyou should monitor the data attributes and document extensions\nfor saving documents in the document templates and vice versa,\notherwise the result table engine can not open the document.\n\n\n.. note::\n\nthe following will fail::\n\n>>> wb = load_workbook('document.xlsx')\n>>> # need to save with the extension *.xlsx\n>>> wb.save('new_document.xlsm')\n>>> # ms excel can't open the document\n>>>\n>>> # or\n>>>\n>>> # need specify attribute keep_vba=true\n>>> wb = load_workbook('document.xlsm')\n>>> wb.save('new_document.xlsm')\n>>> # ms excel will not open the document\n>>>\n>>> # or\n>>>\n>>> wb = load_workbook('document.xltm', keep_vba=true)\n>>> # if we need a template document, then we must specify extension as *.xltm.\n>>> wb.save('new_document.xlsm')\n>>> # ms excel will not open the document\n\n\n\n# loading from a file\n\nyou can use the :func:openpyxl.load_workbook to open an existing workbook::\n\n>>> from openpyxl import load_workbook\n>>> wb = load_workbook(filename = 'empty_book.xlsx')\n>>> sheet_ranges = wb['range names']\n>>> print(sheet_ranges['d18'].value)\n3\n\n\n.. note ::\n\nthere are several flags that can be used in load_workbook.\n\n- `data_only` controls whether cells with formulae have either the\n  formula (default) or the value stored the last time excel read the sheet.\n\n- `keep_vba` controls whether any visual basic elements are preserved or\n  not (default). if they are preserved they are still not editable.\n\n\n.. warning ::\n\nopenpyxl does currently not read all possible items in an excel file so\nshapes will be lost from existing files if they are opened and saved with\nthe same name.\n\n\n\n# errors loading workbooks\n\nsometimes openpyxl will fail to open a workbook. this is usually because there is something wrong with the file. if this is the case then openpyxl will try and provide some more information. openpyxl follows the ooxml specification closely and will reject files that do not because they are invalid. when this happens you can use the exception from openpyxl to inform the developers of whichever application or library produced the file. as the ooxml specification is publicly available it is important that developers follow it.\n\nyou can find the spec by searching for ecma-376, most of the implementation specifics are in part 4.\n\nthis ends the tutorial for now, you can proceed to the :doc:usage section",charsets:{cjk:!0}},{title:"openpyxl文档中文翻译",frontmatter:{title:"openpyxl文档中文翻译",date:"2023-04-26T16:55:38.000Z",permalink:"/pages/Python/openpyxlDoc/000/"},regularPath:"/03.%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91/04.openpyxl%E6%96%87%E6%A1%A3%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91.md/000.%E5%AF%BC%E8%A8%80.html",relativePath:"03.中文翻译/04.openpyxl文档中文翻译.md/000.导言.md",key:"v-72817f84",path:"/pages/Python/openpyxlDoc/000/",headers:[{level:3,title:"openpyxl -一个读/写Excel 2010 xlsx/xlsm文件的Python库",slug:"openpyxl-一个读-写excel-2010-xlsx-xlsm文件的python库",normalizedTitle:"openpyxl -一个读/写excel 2010 xlsx/xlsm文件的python库",charIndex:2},{level:4,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:230},{level:4,title:"安全",slug:"安全",normalizedTitle:"安全",charIndex:392},{level:4,title:"文档",slug:"文档",normalizedTitle:"文档",charIndex:760},{level:4,title:"支持",slug:"支持",normalizedTitle:"支持",charIndex:892},{level:4,title:"如何提供支持",slug:"如何提供支持",normalizedTitle:"如何提供支持",charIndex:1176}],headersStr:"openpyxl -一个读/写Excel 2010 xlsx/xlsm文件的Python库 介绍 安全 文档 支持 如何提供支持",content:"# openpyxl -一个读/写Excel 2010 xlsx/xlsm文件的Python库\n\n> 作者: 埃里克·加索尼，查理·克拉克\n> 源代码: https://foss.heptapod.net/openpyxl/openpyxl\n> 问题: https://foss.heptapod.net/openpyxl/openpyxl/-/issues\n> 生成: 2023年3月11日\n> 许可: 麻省理工学院/外籍人士\n> 版本: 3.1.2\n\n# 介绍\n\nopenpyxl是一个Python库，用于读取/写入Excel 2010 xlsx/xlsm/xltx/xltm文件。\n\n它的出现是因为缺乏现有的Python库来读取/写入原生的 Office Open XML格式。\n\n所有的荣誉都归于PHPExcel团队，因为openpyxl最初是基于PHPExcel的。\n\n# 安全\n\n默认情况下，openpyxl不防范二次爆破或十亿大笑xml攻击。要防止这些攻击，请安装defusedxml。\n\n邮件列表 用户列表可在http://groups.google.com/group/openpyxl-users上找到\n\n示例代码:\n\nfrom openpyxl import Workbook\nwb = Workbook()\n\n# 激活excel工作簿\nws = wb.active\n\n# 数据可以直接分配给单元格\nws['A1'] = 42\n\n# 行可以追加\nws.append([1, 2, 3])\n\n# Python 类型可以自动转换\nimport datetime\nws['A2'] = datetime.datetime.now()\n\n# 保存文件\nwb.save(\"sample.xlsx\")\n\n\n# 文档\n\n文档在:https://openpyxl.readthedocs.io 找到\n\n * 安装方法\n * 代码示例\n * 捐款说明 发行说明见:https://openpyxl.readthedocs.io/en/stable/changes.html\n\n# 支持\n\n这是一个开源项目，由志愿者在业余时间维护。这很可能意味着缺少您想要的特定特性或功能。但事情不会一直这样下去。您可以自己参与项目开发，也可以与开发人员签订特定功能的合同。\n\nopenpyxl的专业支持来自Clark Consulting & Research和Adimian。欢迎对该项目进行捐款，以支持进一步的发展和维护。\n\nBug报告和特性请求可以使用问题跟踪器提交。请提供您看到的任何错误的完整追溯，如果可能的话，请提供示例文件。如果出于保密原因，您无法将文件公开，那么请与开发人员联系。\n\n该存储库由Octobus和Clever Cloud提供。\n\n# 如何提供支持\n\n对我们的任何帮助将使我们非常感激，您只要按照这些步骤:\n\n 1. 请加入群组并创建分支(https://foss.heptapod.net/openpyxl/openpyxl/)，并遵循合并请求开始指南。对于每一个独立的特性，不要试图同时解决所有的问题，这对那些审查和合并你的更改的人来说更容易;-)\n 2. 黑客攻击\n 3. 不要忘记为您的更改添加单元测试!(是的，即使是一行代码，没有测试的更改将不被接受。)如果你缺乏专业知识或灵感，在源码中有很多例子。\n 4. 如果你添加了一个全新的功能，或者只是改进了一些东西，你可以为此感到自豪，所以把你自己添加到AUTHORS文件中:-)\n 5. 让人们知道你刚刚实现的卓越的功能，同时更新文档!\n 6. 完成后，只需发出拉取请求(单击存储库上的大“拉取请求”按钮)并等待代码被审查，如果您遵循了所有这些步骤，则合并到主存储库中。\n\n有关更多信息，请参阅开发\n\n其他帮助方式 即使你不会写代码(或者写得不好)，也有几种方法可以贡献:\n\n在bug跟踪器上对bug进行分类:关闭那些已经关闭的、不相关的、不能复制的…… 更新几乎所有领域的文档:已经添加了许多大型功能(目前主要是关于图表和图像)，但没有任何文档，很难用它做任何事情 建议修复不同版本Python的兼容性:我们支持3.6、3.7、3.8和3.9。 API文档 关键类 openpyxl.workbook.workbook.Workbook openpyxl.worksheet.worksheet.Worksheet openpyxl.cell.cell.Cell 索引和表 指数 模块指数 搜索页面",normalizedContent:"# openpyxl -一个读/写excel 2010 xlsx/xlsm文件的python库\n\n> 作者: 埃里克·加索尼，查理·克拉克\n> 源代码: https://foss.heptapod.net/openpyxl/openpyxl\n> 问题: https://foss.heptapod.net/openpyxl/openpyxl/-/issues\n> 生成: 2023年3月11日\n> 许可: 麻省理工学院/外籍人士\n> 版本: 3.1.2\n\n# 介绍\n\nopenpyxl是一个python库，用于读取/写入excel 2010 xlsx/xlsm/xltx/xltm文件。\n\n它的出现是因为缺乏现有的python库来读取/写入原生的 office open xml格式。\n\n所有的荣誉都归于phpexcel团队，因为openpyxl最初是基于phpexcel的。\n\n# 安全\n\n默认情况下，openpyxl不防范二次爆破或十亿大笑xml攻击。要防止这些攻击，请安装defusedxml。\n\n邮件列表 用户列表可在http://groups.google.com/group/openpyxl-users上找到\n\n示例代码:\n\nfrom openpyxl import workbook\nwb = workbook()\n\n# 激活excel工作簿\nws = wb.active\n\n# 数据可以直接分配给单元格\nws['a1'] = 42\n\n# 行可以追加\nws.append([1, 2, 3])\n\n# python 类型可以自动转换\nimport datetime\nws['a2'] = datetime.datetime.now()\n\n# 保存文件\nwb.save(\"sample.xlsx\")\n\n\n# 文档\n\n文档在:https://openpyxl.readthedocs.io 找到\n\n * 安装方法\n * 代码示例\n * 捐款说明 发行说明见:https://openpyxl.readthedocs.io/en/stable/changes.html\n\n# 支持\n\n这是一个开源项目，由志愿者在业余时间维护。这很可能意味着缺少您想要的特定特性或功能。但事情不会一直这样下去。您可以自己参与项目开发，也可以与开发人员签订特定功能的合同。\n\nopenpyxl的专业支持来自clark consulting & research和adimian。欢迎对该项目进行捐款，以支持进一步的发展和维护。\n\nbug报告和特性请求可以使用问题跟踪器提交。请提供您看到的任何错误的完整追溯，如果可能的话，请提供示例文件。如果出于保密原因，您无法将文件公开，那么请与开发人员联系。\n\n该存储库由octobus和clever cloud提供。\n\n# 如何提供支持\n\n对我们的任何帮助将使我们非常感激，您只要按照这些步骤:\n\n 1. 请加入群组并创建分支(https://foss.heptapod.net/openpyxl/openpyxl/)，并遵循合并请求开始指南。对于每一个独立的特性，不要试图同时解决所有的问题，这对那些审查和合并你的更改的人来说更容易;-)\n 2. 黑客攻击\n 3. 不要忘记为您的更改添加单元测试!(是的，即使是一行代码，没有测试的更改将不被接受。)如果你缺乏专业知识或灵感，在源码中有很多例子。\n 4. 如果你添加了一个全新的功能，或者只是改进了一些东西，你可以为此感到自豪，所以把你自己添加到authors文件中:-)\n 5. 让人们知道你刚刚实现的卓越的功能，同时更新文档!\n 6. 完成后，只需发出拉取请求(单击存储库上的大“拉取请求”按钮)并等待代码被审查，如果您遵循了所有这些步骤，则合并到主存储库中。\n\n有关更多信息，请参阅开发\n\n其他帮助方式 即使你不会写代码(或者写得不好)，也有几种方法可以贡献:\n\n在bug跟踪器上对bug进行分类:关闭那些已经关闭的、不相关的、不能复制的…… 更新几乎所有领域的文档:已经添加了许多大型功能(目前主要是关于图表和图像)，但没有任何文档，很难用它做任何事情 建议修复不同版本python的兼容性:我们支持3.6、3.7、3.8和3.9。 api文档 关键类 openpyxl.workbook.workbook.workbook openpyxl.worksheet.worksheet.worksheet openpyxl.cell.cell.cell 索引和表 指数 模块指数 搜索页面",charsets:{cjk:!0}},{title:"2021-04-05 失业第0天",frontmatter:{title:"2021-04-05 失业第0天",date:"2023-04-05T18:22:34.000Z",permalink:"/pages/unemploymentLog/Day000/"},regularPath:"/05.%E8%81%8C%E5%9C%BA%E9%9A%8F%E7%AC%94/01.%E5%A4%B1%E4%B8%9A%E7%AC%94%E8%AE%B0/01.2023-04-05.html",relativePath:"05.职场随笔/01.失业笔记/01.2023-04-05.md",key:"v-5c4a9caa",path:"/pages/unemploymentLog/Day000/",headers:[{level:2,title:"今日概览",slug:"今日概览",normalizedTitle:"今日概览",charIndex:2},{level:2,title:"任务清单",slug:"任务清单",normalizedTitle:"任务清单",charIndex:499}],headersStr:"今日概览 任务清单",content:"# 今日概览\n\n今天是清明节。\n\n上周项目结束团队离场，后续的项目还没有接上。稀里糊涂就睡了两天。 今天正好清明节，整理下心情，规划一下后续的失业生活该如何进行。\n\n人生总有波折，疫情之后更多。但无论如何，生活总要继续。\n单位会发基本工资————一点点了，但好在会维持你的社保不断。但如果始终不能协调好后续的开发项目，那么自己动手找工作也就是难免的事情了。\n这段时间，稀里糊涂睡过去总是不好的。\n\n所以先列一个后续每天要做的事情的清单。\n大体来说：\n\n * 发送简历联系单位是不可少的，同时一直想做的个人技术博客也可以做起来。\n * 目前对于Java、Dotnet都还有自信，但Dotnet有阵子时间不做了，很多新出现的东西有必要捡一下；Java一直想要精研一下Spring源码和ES，也要动起来。\n * 前端还算可以，但是比较新的东西里边，VUE比较熟悉，React有必要研究一下。框架中ant Design比较熟悉，其他也要了解一下。\n * Go是一直想学的东西。但迄今为止没有动手做过什么。\n * Github和Gitee上，也好久没动手做过什么了。 算一下，该做的事情还是挺多的。\n\n\n# 任务清单\n\n * 昨日完成的最重要三件事：\n\n>  1. 无\n>  2. 无\n>  3. 无\n\n * 今天最重要的三件事：\n\n>  1. Github上的个人博客要整理一下\n>  2. 大体规划一下后续的计划\n>  3. 学习、处理博客、找工作、规划自己要自己做的一些东西。",normalizedContent:"# 今日概览\n\n今天是清明节。\n\n上周项目结束团队离场，后续的项目还没有接上。稀里糊涂就睡了两天。 今天正好清明节，整理下心情，规划一下后续的失业生活该如何进行。\n\n人生总有波折，疫情之后更多。但无论如何，生活总要继续。\n单位会发基本工资————一点点了，但好在会维持你的社保不断。但如果始终不能协调好后续的开发项目，那么自己动手找工作也就是难免的事情了。\n这段时间，稀里糊涂睡过去总是不好的。\n\n所以先列一个后续每天要做的事情的清单。\n大体来说：\n\n * 发送简历联系单位是不可少的，同时一直想做的个人技术博客也可以做起来。\n * 目前对于java、dotnet都还有自信，但dotnet有阵子时间不做了，很多新出现的东西有必要捡一下；java一直想要精研一下spring源码和es，也要动起来。\n * 前端还算可以，但是比较新的东西里边，vue比较熟悉，react有必要研究一下。框架中ant design比较熟悉，其他也要了解一下。\n * go是一直想学的东西。但迄今为止没有动手做过什么。\n * github和gitee上，也好久没动手做过什么了。 算一下，该做的事情还是挺多的。\n\n\n# 任务清单\n\n * 昨日完成的最重要三件事：\n\n>  1. 无\n>  2. 无\n>  3. 无\n\n * 今天最重要的三件事：\n\n>  1. github上的个人博客要整理一下\n>  2. 大体规划一下后续的计划\n>  3. 学习、处理博客、找工作、规划自己要自己做的一些东西。",charsets:{cjk:!0}},{title:"2021-04-07 失业第1周·第2天",frontmatter:{title:"2021-04-07 失业第1周·第2天",date:"2023-04-07T18:50:14.000Z",permalink:"/pages/unemploymentLog/Day002/"},regularPath:"/05.%E8%81%8C%E5%9C%BA%E9%9A%8F%E7%AC%94/01.%E5%A4%B1%E4%B8%9A%E7%AC%94%E8%AE%B0/03.2023-04-07.html",relativePath:"05.职场随笔/01.失业笔记/03.2023-04-07.md",key:"v-01b176ac",path:"/pages/unemploymentLog/Day002/",headers:[{level:2,title:"今日随笔",slug:"今日随笔",normalizedTitle:"今日随笔",charIndex:2},{level:2,title:"任务清单",slug:"任务清单",normalizedTitle:"任务清单",charIndex:422}],headersStr:"今日随笔 任务清单",content:"# 今日随笔\n\n今天周五。\n\n昨天初步联系的单位反馈不佳。不出所料，目前很多职位仅仅是挂着而已，始终没有回复甚至留言查看的记录。\n\n * 就有回复的几个来说，主要是年龄和待遇问题。这个无解，只有找更急需或者更适合的企业。\n * Vuepresss表现比hexo令人满意。\n * 初步成型了技术博客，先放在qingshansima.github.io。\n * 求职期间的学习计划1：go，自己设计练手项目，完整走一遍哪怕只有一个的微服务+前端的项目开发。\n * 求职期间的学习计划2：dotnet，一年多没做了，要捡一捡；新的技术内容也要熟悉。\n * 求职期间的学习计划3：Java，熟悉一下架构知识，学习一下ElasticSeach\n * 求职期间的工作计划1：每个工作日一定要写失业笔记。\n * 求职期间的工作计划2：每个工作日一定要写至少一篇面经，一篇技术博客。\n * 求职期间的工作计划3：设计某个开源项目做一做。下周一开始规划\n\n\n# 任务清单\n\n * 昨日完成的最重要三件事：\n\n>  1. Github上的个人博客尝试使用Hexo进行了全面更新.\n>  2. 初步看了Boss上的招聘信息,更新了个人简历并尝试联系了几个招聘单位/猎头\n>  3. 笔记本上开发环境的搭建。\n\n * 今天最重要的三件事：\n\n>  1. Github上的个人博客确定使用vuePressbing进行了全面更新.\n>  2. 回应Boss上的招聘回复信息。\n>  3. 规划后续求职期间的学习和工作计划",normalizedContent:"# 今日随笔\n\n今天周五。\n\n昨天初步联系的单位反馈不佳。不出所料，目前很多职位仅仅是挂着而已，始终没有回复甚至留言查看的记录。\n\n * 就有回复的几个来说，主要是年龄和待遇问题。这个无解，只有找更急需或者更适合的企业。\n * vuepresss表现比hexo令人满意。\n * 初步成型了技术博客，先放在qingshansima.github.io。\n * 求职期间的学习计划1：go，自己设计练手项目，完整走一遍哪怕只有一个的微服务+前端的项目开发。\n * 求职期间的学习计划2：dotnet，一年多没做了，要捡一捡；新的技术内容也要熟悉。\n * 求职期间的学习计划3：java，熟悉一下架构知识，学习一下elasticseach\n * 求职期间的工作计划1：每个工作日一定要写失业笔记。\n * 求职期间的工作计划2：每个工作日一定要写至少一篇面经，一篇技术博客。\n * 求职期间的工作计划3：设计某个开源项目做一做。下周一开始规划\n\n\n# 任务清单\n\n * 昨日完成的最重要三件事：\n\n>  1. github上的个人博客尝试使用hexo进行了全面更新.\n>  2. 初步看了boss上的招聘信息,更新了个人简历并尝试联系了几个招聘单位/猎头\n>  3. 笔记本上开发环境的搭建。\n\n * 今天最重要的三件事：\n\n>  1. github上的个人博客确定使用vuepressbing进行了全面更新.\n>  2. 回应boss上的招聘回复信息。\n>  3. 规划后续求职期间的学习和工作计划",charsets:{cjk:!0}},{title:"2021-04-06 失业第1周·第1天",frontmatter:{title:"2021-04-06 失业第1周·第1天",date:"2023-04-06T17:20:14.000Z",permalink:"/pages/unemploymentLog/Day001/"},regularPath:"/05.%E8%81%8C%E5%9C%BA%E9%9A%8F%E7%AC%94/01.%E5%A4%B1%E4%B8%9A%E7%AC%94%E8%AE%B0/02.2023-04-06.html",relativePath:"05.职场随笔/01.失业笔记/02.2023-04-06.md",key:"v-a48e1eac",path:"/pages/unemploymentLog/Day001/",headers:[{level:2,title:"今日随笔",slug:"今日随笔",normalizedTitle:"今日随笔",charIndex:2},{level:2,title:"任务清单",slug:"任务清单",normalizedTitle:"任务清单",charIndex:439}],headersStr:"今日随笔 任务清单",content:"# 今日随笔\n\n今天开始做一些动作，进行一些准备。\n\n大体来说：\n\n * 重整了旧的简历，在Boss上开始更新信息。\n * 工作期间对于比较新的市场招聘需求不是太关注，所以先不急着联系单位，先整体浏览分析下市场需求。\n * 很诡异。很多企业的招聘信息都是套话。说明企业的招聘要么是别有所图的假职位，要么就是自己也不确定自己究竟需要的是什么，只能靠空话套话拼命吹高人员要求。\n * Github上重新整理了一下，准备开通自己的个人技术站。今天试用了一下hexo，感觉还不是很满意。\n * 想了一下，期待的其实是整体类似一本电子书的结构，同时搜索可以至少直接搜到小标题。\n * 简单来说，比如某人在电话面试的时候有个不了解的问题，可以直接检索关键字，然后站内的信息就能给他排列出来。\n * 这些关键字就不要让我写tag了，直接套用各级小标题就好。\n * Github和Gitee比较一下，先用github吧，还是习惯一些。\n * 准备用vuepress替换hexo试一试。\n\n\n# 任务清单\n\n * 昨日完成的最重要三件事：\n\n>  1. github和gitee的内容整理和找回。\n>  2. boss和猎聘等站点信息的更新\n>  3. 笔记本上以VSCode为核心编辑器，整理了Nodejs和Java的开发环境。但Java开发环境不如人意，要考虑下Maven等问题\n\n * 今天最重要的三件事：\n\n>  1. Github上的个人博客尝试使用Hexo进行了全面更新.\n>  2. 初步看了Boss上的招聘信息,更新了个人简历并尝试联系了几个招聘单位/猎头\n>  3. 笔记本上开发环境的搭建。",normalizedContent:"# 今日随笔\n\n今天开始做一些动作，进行一些准备。\n\n大体来说：\n\n * 重整了旧的简历，在boss上开始更新信息。\n * 工作期间对于比较新的市场招聘需求不是太关注，所以先不急着联系单位，先整体浏览分析下市场需求。\n * 很诡异。很多企业的招聘信息都是套话。说明企业的招聘要么是别有所图的假职位，要么就是自己也不确定自己究竟需要的是什么，只能靠空话套话拼命吹高人员要求。\n * github上重新整理了一下，准备开通自己的个人技术站。今天试用了一下hexo，感觉还不是很满意。\n * 想了一下，期待的其实是整体类似一本电子书的结构，同时搜索可以至少直接搜到小标题。\n * 简单来说，比如某人在电话面试的时候有个不了解的问题，可以直接检索关键字，然后站内的信息就能给他排列出来。\n * 这些关键字就不要让我写tag了，直接套用各级小标题就好。\n * github和gitee比较一下，先用github吧，还是习惯一些。\n * 准备用vuepress替换hexo试一试。\n\n\n# 任务清单\n\n * 昨日完成的最重要三件事：\n\n>  1. github和gitee的内容整理和找回。\n>  2. boss和猎聘等站点信息的更新\n>  3. 笔记本上以vscode为核心编辑器，整理了nodejs和java的开发环境。但java开发环境不如人意，要考虑下maven等问题\n\n * 今天最重要的三件事：\n\n>  1. github上的个人博客尝试使用hexo进行了全面更新.\n>  2. 初步看了boss上的招聘信息,更新了个人简历并尝试联系了几个招聘单位/猎头\n>  3. 笔记本上开发环境的搭建。",charsets:{cjk:!0}},{title:"2021-04-10 失业第2周·第1天",frontmatter:{title:"2021-04-10 失业第2周·第1天",date:"2023-04-07T18:50:14.000Z",permalink:"/pages/unemploymentLog/Day004/"},regularPath:"/05.%E8%81%8C%E5%9C%BA%E9%9A%8F%E7%AC%94/01.%E5%A4%B1%E4%B8%9A%E7%AC%94%E8%AE%B0/05.2023-04-10.html",relativePath:"05.职场随笔/01.失业笔记/05.2023-04-10.md",key:"v-db47cc2c",path:"/pages/unemploymentLog/Day004/",headers:[{level:2,title:"今日随笔",slug:"今日随笔",normalizedTitle:"今日随笔",charIndex:2},{level:2,title:"任务清单",slug:"任务清单",normalizedTitle:"任务清单",charIndex:92},{level:2,title:"上周进度和本周计划",slug:"上周进度和本周计划",normalizedTitle:"上周进度和本周计划",charIndex:251}],headersStr:"今日随笔 任务清单 上周进度和本周计划",content:"# 今日随笔\n\n今天周一。新的一周开始了，失业进入第二周。\n\n每天固定三件事。联系单位回复信息；整理自己的技术博客；翻译。\n\n * 今天周一，要制定一周计划，总结上周的工作。\n\n\n# 任务清单\n\n * 昨日完成的最重要三件事：\n\n>  1. 双休.\n>  2. 双休\n>  3. 双休\n\n * 今天最重要的三件事：\n\n>  1. Boss上的简历增添了个人技术博客信息.并回应Boss上的招聘回复信息\n>  2. 本周规划。\n>  3. 继续更新Go文档翻译。并找一篇合适的英文小说开始翻译。\n\n\n# 上周进度和本周计划\n\n>  1. Go文档上周翻译完毕序言和第一章，与第二章的一部分。本周继续。预期每天翻译一章左右。\n>  2. 本周要找篇合适的英文小说开始翻译。思路还比较模糊。\n>  3. 本周面经和技术园地文献至少更新一篇。可以转载但必须整理",normalizedContent:"# 今日随笔\n\n今天周一。新的一周开始了，失业进入第二周。\n\n每天固定三件事。联系单位回复信息；整理自己的技术博客；翻译。\n\n * 今天周一，要制定一周计划，总结上周的工作。\n\n\n# 任务清单\n\n * 昨日完成的最重要三件事：\n\n>  1. 双休.\n>  2. 双休\n>  3. 双休\n\n * 今天最重要的三件事：\n\n>  1. boss上的简历增添了个人技术博客信息.并回应boss上的招聘回复信息\n>  2. 本周规划。\n>  3. 继续更新go文档翻译。并找一篇合适的英文小说开始翻译。\n\n\n# 上周进度和本周计划\n\n>  1. go文档上周翻译完毕序言和第一章，与第二章的一部分。本周继续。预期每天翻译一章左右。\n>  2. 本周要找篇合适的英文小说开始翻译。思路还比较模糊。\n>  3. 本周面经和技术园地文献至少更新一篇。可以转载但必须整理",charsets:{cjk:!0}},{title:"博客文章",frontmatter:{archivesPage:!0,title:"博客文章",permalink:"/blog/",article:!1},regularPath:"/@pages/archivesPage.html",relativePath:"@pages/archivesPage.md",key:"v-0e2d80f1",path:"/blog/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2020/05/29, 16:33:54",lastUpdatedTimestamp:1590741234e3},{title:"2021-04-08~09 失业第1周 双休",frontmatter:{title:"2021-04-08~09 失业第1周 双休",date:"2023-04-07T18:50:14.000Z",permalink:"/pages/unemploymentLog/Day003/"},regularPath:"/05.%E8%81%8C%E5%9C%BA%E9%9A%8F%E7%AC%94/01.%E5%A4%B1%E4%B8%9A%E7%AC%94%E8%AE%B0/04.2023-04-08~09.html",relativePath:"05.职场随笔/01.失业笔记/04.2023-04-08~09.md",key:"v-1ac9fe62",path:"/pages/unemploymentLog/Day003/",headers:[{level:2,title:"今日随笔",slug:"今日随笔",normalizedTitle:"今日随笔",charIndex:2},{level:2,title:"计划和日志",slug:"计划和日志",normalizedTitle:"计划和日志",charIndex:130}],headersStr:"今日随笔 计划和日志",content:"# 今日随笔\n\n周六周日合并。 在github上的博客初步成型。 开始了Go语言文档的中文翻译，捡一捡外语的同时也学习Go语言。 技术文档翻译的很别扭，字句上的功夫下降了。 得在国外站找点短篇小说之类得翻一翻，找找感觉。 和小区物业处理了车位的纠纷。\n\n\n# 计划和日志\n\n双休日 略",normalizedContent:"# 今日随笔\n\n周六周日合并。 在github上的博客初步成型。 开始了go语言文档的中文翻译，捡一捡外语的同时也学习go语言。 技术文档翻译的很别扭，字句上的功夫下降了。 得在国外站找点短篇小说之类得翻一翻，找找感觉。 和小区物业处理了车位的纠纷。\n\n\n# 计划和日志\n\n双休日 略",charsets:{cjk:!0}},{title:"Home",frontmatter:{home:!0,heroImage:"/img/FatMonkey.png",heroText:"土肥猿的面经园地",tagline:"🚀程序员的面经园地和知识仓库",actionText:"开始学习 →",actionLink:"/pages/GoTour/000/",bannerBg:"none",features:[{title:"面经园地",details:"开发人员各种面试题的分析和记录",link:"/pages/interView/java/001/"},{title:"开发笔记",details:"分门别类的整理编程语言、设计模式和架构的知识点",link:"/pages/Notes/java/001/"},{title:"职场随笔",details:"写字楼里写字间，写字间里程序员。点灯熬油写代码，又拿代码换药钱。",link:"/pages/unemploymentLog/Day000/"},{title:"Go语言文档中文翻译",details:"Go语言学习文档，每天至少一篇",link:"/pages/GoTour/000/"},{title:"PyAutoGui文档中文翻译",details:"Python开发RPA程序，每天一篇",link:"/pages/python/PyAutoGui/001/"}],postList:"none"},regularPath:"/",relativePath:"index.md",key:"v-209d7f1d",path:"/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2023/02/05, 22:47:30",lastUpdatedTimestamp:167560845e4}],themeConfig:{nav:[{text:"首页",link:"/"},{text:"面经园地",link:"/pages/b5188c/",items:[{text:"Java",items:[{text:"Java基础面试高频问题1~80",link:"/pages/interView/java/001/"},{text:"Spring面试高频问题1~10",link:"/pages/interView/java/002/"},{text:"MyBatis面试高频问题1~18",link:"/pages/interView/java/003/"},{text:"Java架构师面试高频问题",link:"/pages/interView/java/004/"}]},{text:"Dotnet",link:"/pages/interView/DotNet/001/",items:[{text:"Dotnet面试题汇总1",link:"/pages/interView/DotNet/001/"}]},{text:"数据库",link:"/pages/interView/DB/001/",items:[{text:"Oracle面试题1-33",link:"/pages/interView/DB/001/"}]}]},{text:"开发笔记",link:"/pages/43f8ea/",items:[{text:"架构设计",items:[{text:"面向对象设计五大原则",link:"/pages/43f8ea/"},{text:"微服务常用组件",link:"/pages/e08693/"}]},{text:"Java",items:[{text:"Java常用中间件",link:"/pages/Notes/java/001/"},{text:"Java常用工作流",link:"/pages/Notes/java/002/"}]},{text:"Python",items:[{text:"面向测试方法开发Python微服务",link:"/pages/Notes/Python/miniServer/000/",items:[{text:"目录",link:"/pages/Notes/Python/miniServer/000/"},{text:"1.环境初始化",link:"/pages/Notes/Python/miniServer/001/"}]}]}]},{text:"中文翻译",items:[{text:"Go语言文档中文翻译",items:[{text:"序言和目录",link:"/pages/GoTour/000/"},{text:"Go语言的下载和安装",link:"/pages/GoTour/001/"},{text:"Go语言入门教程",link:"/pages/GoTour/002/"},{text:"Go模块教程",link:"/pages/GoTour/003/"},{text:"使用Go和Gin开发RESTful API",link:"/pages/GoTour/004/"},{text:"使用Go开发Web应用程序",link:"/pages/GoTour/005/"}]},{text:"Python-PyAutoGui文档中文翻译",items:[{text:"1.Windows11下PyAutoGui的安装和使用",link:"/pages/python/PyAutoGui/001/"}]},{text:"微软UI自动化文档中文翻译",items:[{text:"UI自动化课程简介",link:"/pages/Microsoft/UIAutomation/000/"}]}]},{text:"职场随笔",link:"/pages/893e69/",items:[{text:"失业笔记",link:"/pages/unemploymentLog/Day000/",items:[{text:"2003清明，失业第0天",link:"/pages/unemploymentLog/Day000/"},{text:"2003-04-06，失业第一周·第1天",link:"/pages/unemploymentLog/Day001/"},{text:"2003-04-07，失业第一周·第2天",link:"/pages/unemploymentLog/Day002/"},{text:"2003-04-08~09，失业第一周·双休",link:"/pages/unemploymentLog/Day003/"},{text:"2003-04-08~09，失业第二周·第1天",link:"/pages/unemploymentLog/Day004/"}]}]}],sidebarDepth:2,logo:"/img/FatMonkey550.png",repo:"qingshansima/qingshansima.github.io",searchMaxSuggestions:10,lastUpdated:"上次更新",sidebar:{"/01.面经园地/":[{title:"Java",collapsable:!1,children:[["01.Java/01.Java基础面试高频问题.md","Java基础面试高频问题1~80","/pages/interView/java/001/"],["01.Java/02.Spring面试高频问题.md","Spring面试高频问题1~10","/pages/interView/java/002/"],["01.Java/03.MyBatis面试题1~18.md","MyBatis面试高频问题1~18","/pages/interView/java/003/"],["01.Java/04.Java架构师面试高频问题1-18.md","Java架构师面试高频问题1~18","/pages/interView/java/004/"]]},{title:"DotNet",collapsable:!1,children:[["02.DotNet/001.Dotnet面试题汇总1.md","DotNet面试题汇总","/pages/interView/DotNet/001/"]]},{title:"前端",collapsable:!1,children:[]},{title:"数据库",collapsable:!1,children:[["04.数据库/001.Oracle面试题1~33.md","Oracle面试题1~33","/pages/interView/DB/001/"]]}],catalogue:{},"/02.开发笔记/":[{title:"架构设计",collapsable:!1,children:[["01.架构设计/01.面向对象设计五大原则.md","面向对象设计五大原则","/pages/43f8ea/"],["01.架构设计/02.微服务常用组件.md","微服务常用组件","/pages/e08693/"]]},{title:"Java",collapsable:!1,children:[["02.Java/01.Java常用中间件.md","java常见中间件笔记","/pages/Notes/java/001/"],["02.Java/02.Java常用工作流框架.md","java常用工作流框架","/pages/Notes/java/002/"]]},{title:"Python",collapsable:!1,children:[{title:"Python+Flask开发微服务",collapsable:!1,children:[["03.Python/01.Python+Flask开发微服务/000.目录.md","VSCode+Python+Flask+MySql 开发微服务","/pages/Notes/Python/miniServer/000/"],["03.Python/01.Python+Flask开发微服务/001.环境初始化.md","第一章：环境初始化","/pages/Notes/Python/miniServer/001/"]]}]}],"/03.中文翻译/":[{title:"Go语言文档中文翻译",collapsable:!1,children:[["01.Go语言文档中文翻译/01.序言和目录.md","序言和目录","/pages/GoTour/000/"],["01.Go语言文档中文翻译/02.Go语言的下载和安装.md","Go语言的下载和安装","/pages/GoTour/001/"],["01.Go语言文档中文翻译/03.Go入门教程.md","Go语言入门教程","/pages/GoTour/002/"],["01.Go语言文档中文翻译/04.Go模块教程.md","Go模块教程","/pages/GoTour/003/"],["01.Go语言文档中文翻译/05.使用Go和Gin开发RESTful API.md","教程：使用Go和Gin开发RESTful API","/pages/GoTour/004/"],["01.Go语言文档中文翻译/06.使用Go开发Web应用程序.md","使用Go开发Web应用程序","/pages/GoTour/005/"]]},{title:"Python-PyAutoGui文档中文翻译",collapsable:!1,children:[["02.Python-PyAutoGui文档中文翻译/01.Windows下PyAutoGui的安装和使用.md","01.Windows11下PyAutoGui的安装和使用","/pages/python/PyAutoGui/001/"]]},{title:"微软UIAutomation文档翻译.md",collapsable:!1,children:[["03.微软UIAutomation文档翻译.md/01.UI自动化课程简介.md","UI自动化课程简介","/pages/Microsoft/UIAutomation/000/"]]},{title:"openpyxl文档中文翻译.md",collapsable:!1,children:[["04.openpyxl文档中文翻译.md/000.导言.md","openpyxl文档中文翻译","/pages/Python/openpyxlDoc/000/"],["04.openpyxl文档中文翻译.md/001.课程·安装.md","课程·安装","/pages/720440/"]]}],"/05.职场随笔/":[{title:"失业笔记",collapsable:!1,children:[["01.失业笔记/01.2023-04-05.md","2021-04-05 失业第0天","/pages/unemploymentLog/Day000/"],["01.失业笔记/02.2023-04-06.md","2021-04-06 失业第1周·第1天","/pages/unemploymentLog/Day001/"],["01.失业笔记/03.2023-04-07.md","2021-04-07 失业第1周·第2天","/pages/unemploymentLog/Day002/"],["01.失业笔记/04.2023-04-08~09.md","2021-04-08~09 失业第1周 双休","/pages/unemploymentLog/Day003/"],["01.失业笔记/05.2023-04-10.md","2021-04-10 失业第2周·第1天","/pages/unemploymentLog/Day004/"]]}]},updateBar:{showToArticle:!1},pageStyle:"line",category:!1,tag:!1,author:{name:"飞翔的土肥猿",href:"https://qingshansima.github.io"},social:{icons:[{iconClass:"icon-youjian",title:"发邮件",link:"mailto:qingshansima@outlook.com"},{iconClass:"icon-github",title:"GitHub",link:"https://github.com/qingshansima"},{iconClass:"icon-erji",title:"听音乐",link:"https://music.163.com/#/playlist?id=755597173"}]},footer:{createYear:2024,copyrightInfo:"飞翔的土肥猿 | MIT License"},htmlModules:{pageT:'\n    <div class="wwads-cn wwads-horizontal page-wwads" data-id="136"></div>\n    <style>\n      .page-wwads{\n        width:100%!important;\n        min-height: 0;\n        margin: 0;\n      }\n      .page-wwads .wwads-img img{\n        width:80px!important;\n      }\n      .page-wwads .wwads-poweredby{\n        width: 40px;\n        position: absolute;\n        right: 25px;\n        bottom: 3px;\n      }\n      .wwads-content .wwads-text, .page-wwads .wwads-text{\n        height: 100%;\n        padding-top: 5px;\n        display: block;\n      }\n  </style>\n  ',sidebarT:'\n  <a href="http://apifox.cn/a103xugaoyi" target="_blank">\n    <img src="https://cdn.staticaly.com/gh/xugaoyi/blog-gitalk-comment@master/img/431669861564_.2470ykdcpbds.jpg" alt="npm" class="no-zoom" style="width: 100%;border-radius: 2px;">\n    <p style="text-align: center;margin: 0;color: #999;font-size: 12px;">(进入注册为作者充电)</p>\n  </a>'}}};var xl=t(94),kl=t(95),_l=t(11);var Sl={computed:{$filterPosts(){return this.$site.pages.filter(n=>{const{frontmatter:{pageComponent:e,article:t,home:r}}=n;return!(e||!1===t||!0===r)})},$sortPosts(){return(n=this.$filterPosts).sort((n,e)=>{const t=n.frontmatter.sticky,r=e.frontmatter.sticky;return t&&r?t==r?Object(_l.a)(n,e):t-r:t&&!r?-1:!t&&r?1:Object(_l.a)(n,e)}),n;var n},$sortPostsByDate(){return(n=this.$filterPosts).sort((n,e)=>Object(_l.a)(n,e)),n;var n},$groupPosts(){return function(n){const e={},t={};for(let r=0,a=n.length;r<a;r++){const{frontmatter:{categories:a,tags:i}}=n[r];"array"===Object(_l.n)(a)&&a.forEach(t=>{t&&(e[t]||(e[t]=[]),e[t].push(n[r]))}),"array"===Object(_l.n)(i)&&i.forEach(e=>{e&&(t[e]||(t[e]=[]),t[e].push(n[r]))})}return{categories:e,tags:t}}(this.$sortPosts)},$categoriesAndTags(){return function(n){const e=[],t=[];for(let t in n.categories)e.push({key:t,length:n.categories[t].length});for(let e in n.tags)t.push({key:e,length:n.tags[e].length});return{categories:e,tags:t}}(this.$groupPosts)}}};Vt.component(xl.default),Vt.component(kl.default);function Tl(n){return n.toString().padStart(2,"0")}t(243);Vt.component("Badge",()=>Promise.all([t.e(0),t.e(4)]).then(t.bind(null,362))),Vt.component("CodeBlock",()=>Promise.resolve().then(t.bind(null,94))),Vt.component("CodeGroup",()=>Promise.resolve().then(t.bind(null,95)));t(244);var jl=[({Vue:n,options:e,router:t,siteData:r,isServer:a})=>{a||t.afterEach(()=>{var n;n=function(){setTimeout((function(){void 0===window._AdBlockInit&&function(){const n=document.getElementsByClassName("wwads-cn"),e=document.querySelector(".wwads-content");n[0]&&!e&&(n[0].innerHTML="<style>.wwads-horizontal,.wwads-vertical{background-color:#f4f8fa;padding:5px;min-height:120px;margin-top:20px;box-sizing:border-box;border-radius:3px;font-family:sans-serif;display:flex;min-width:150px;position:relative;overflow:hidden;}.wwads-horizontal{flex-wrap:wrap;justify-content:center}.wwads-vertical{flex-direction:column;align-items:center;padding-bottom:32px}.wwads-horizontal a,.wwads-vertical a{text-decoration:none}.wwads-horizontal .wwads-img,.wwads-vertical .wwads-img{margin:5px}.wwads-horizontal .wwads-content,.wwads-vertical .wwads-content{margin:5px}.wwads-horizontal .wwads-content{flex:130px}.wwads-vertical .wwads-content{margin-top:10px}.wwads-horizontal .wwads-text,.wwads-content .wwads-text{font-size:14px;line-height:1.4;color:#0e1011;-webkit-font-smoothing:antialiased}.wwads-horizontal .wwads-poweredby,.wwads-vertical .wwads-poweredby{display:block;font-size:11px;color:#a6b7bf;margin-top:1em}.wwads-vertical .wwads-poweredby{position:absolute;left:10px;bottom:10px}.wwads-horizontal .wwads-poweredby span,.wwads-vertical .wwads-poweredby span{transition:all 0.2s ease-in-out;margin-left:-1em}.wwads-horizontal .wwads-poweredby span:first-child,.wwads-vertical .wwads-poweredby span:first-child{opacity:0}.wwads-horizontal:hover .wwads-poweredby span,.wwads-vertical:hover .wwads-poweredby span{opacity:1;margin-left:0}.wwads-horizontal .wwads-hide,.wwads-vertical .wwads-hide{position:absolute;right:-23px;bottom:-23px;width:46px;height:46px;border-radius:23px;transition:all 0.3s ease-in-out;cursor:pointer;}.wwads-horizontal .wwads-hide:hover,.wwads-vertical .wwads-hide:hover{background:rgb(0 0 0 /0.05)}.wwads-horizontal .wwads-hide svg,.wwads-vertical .wwads-hide svg{position:absolute;left:10px;top:10px;fill:#a6b7bf}.wwads-horizontal .wwads-hide:hover svg,.wwads-vertical .wwads-hide:hover svg{fill:#3E4546}</style><a href='https://wwads.cn/page/whitelist-wwads' class='wwads-img' target='_blank' rel='nofollow'><img src='https://fastly.jsdelivr.net/gh/xugaoyi/image_store@master/blog/wwads.2a3pidhlh4ys.webp' width='130'></a><div class='wwads-content'><a href='https://wwads.cn/page/whitelist-wwads' class='wwads-text' target='_blank' rel='nofollow'>为了本站的长期运营，请将我们的网站加入广告拦截器的白名单，感谢您的支持！<span style='color: #11a8cd'>如何添加白名单?</span></a><a href='https://wwads.cn/page/end-user-privacy' class='wwads-poweredby' title='万维广告 ～ 让广告更优雅，且有用' target='_blank'><span>广告</span></a></div><a class='wwads-hide' onclick='parentNode.remove()' title='隐藏广告'><svg xmlns='http://www.w3.org/2000/svg' width='6' height='7'><path d='M.879.672L3 2.793 5.121.672a.5.5 0 11.707.707L3.708 3.5l2.12 2.121a.5.5 0 11-.707.707l-2.12-2.12-2.122 2.12a.5.5 0 11-.707-.707l2.121-2.12L.172 1.378A.5.5 0 01.879.672z'></path></svg></a>")}()}),3e3)},"complete"===document.readyState||"interactive"===document.readyState?setTimeout(n,1):document.addEventListener("DOMContentLoaded",n),setTimeout(()=>{const n=document.querySelector(".page-wwads");if(!n)return;const e=n.querySelector(".wwads-hide");e&&(e.onclick=()=>{n.style.display="none"}),"none"===n.style.display&&(n.style.display="flex")},900)})},({Vue:n,options:e,router:t,siteData:r})=>{r.pages.map(n=>{const{frontmatter:{date:e,author:t}}=n;"string"==typeof e&&"Z"===e.charAt(e.length-1)&&(n.frontmatter.date=function(n){n instanceof Date||(n=new Date(n));return`${n.getUTCFullYear()}-${Tl(n.getUTCMonth()+1)}-${Tl(n.getUTCDate())} ${Tl(n.getUTCHours())}:${Tl(n.getUTCMinutes())}:${Tl(n.getUTCSeconds())}`}(e)),t?n.author=t:r.themeConfig.author&&(n.author=r.themeConfig.author)}),n.mixin(Sl)},{},({Vue:n})=>{n.mixin({computed:{$dataBlock(){return this.$options.__data__block__}}})},{},{},({router:n})=>{"undefined"!=typeof window&&(window._hmt=window._hmt||[],function(){var n=document.createElement("script");n.src="https://hm.baidu.com/hm.js?01293bffa6c3962016c08ba685c79d78";var e=document.getElementsByTagName("script")[0];e.parentNode.insertBefore(n,e)}(),n.afterEach((function(n){_hmt.push(["_trackPageview",n.fullPath])})))}],El=[];class Cl extends class{constructor(){this.store=new Vt({data:{state:{}}})}$get(n){return this.store.state[n]}$set(n,e){Vt.set(this.store.state,n,e)}$emit(...n){this.store.$emit(...n)}$on(...n){this.store.$on(...n)}}{}Object.assign(Cl.prototype,{getPageAsyncComponent:os,getLayoutAsyncComponent:ss,getAsyncComponent:ls,getVueComponent:cs});var Al={install(n){const e=new Cl;n.$vuepress=e,n.prototype.$vuepress=e}};function Il(n,e){const t=e.toLowerCase();return n.options.routes.some(n=>n.path.toLowerCase()===t)}var Pl={props:{pageKey:String,slotKey:{type:String,default:"default"}},render(n){const e=this.pageKey||this.$parent.$page.key;return ps("pageKey",e),Vt.component(e)||Vt.component(e,os(e)),Vt.component(e)?n(e):n("")}},zl={functional:!0,props:{slotKey:String,required:!0},render:(n,{props:e,slots:t})=>n("div",{class:["content__"+e.slotKey]},t()[e.slotKey])},Ol={computed:{openInNewWindowTitle(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},Bl=(t(245),t(246),Object(vl.a)(Ol,(function(){var n=this._self._c;return n("span",[n("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[n("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),n("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),n("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports),Ml={functional:!0,render(n,{parent:e,children:t}){if(e._isMounted)return t;e.$once("hook:mounted",()=>{e.$forceUpdate()})}};Vt.config.productionTip=!1,Vt.use(Ho),Vt.use(Al),Vt.mixin(function(n,e,t=Vt){!function(n){n.locales&&Object.keys(n.locales).forEach(e=>{n.locales[e].path=e});Object.freeze(n)}(e),t.$vuepress.$set("siteData",e);const r=new(n(t.$vuepress.$get("siteData"))),a=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(r)),i={};return Object.keys(a).reduce((n,e)=>(e.startsWith("$")&&(n[e]=a[e].get),n),i),{computed:i}}(n=>class{setPage(n){this.__page=n}get $site(){return n}get $themeConfig(){return this.$site.themeConfig}get $frontmatter(){return this.$page.frontmatter}get $localeConfig(){const{locales:n={}}=this.$site;let e,t;for(const r in n)"/"===r?t=n[r]:0===this.$page.path.indexOf(r)&&(e=n[r]);return e||t||{}}get $siteTitle(){return this.$localeConfig.title||this.$site.title||""}get $canonicalUrl(){const{canonicalUrl:n}=this.$page.frontmatter;return"string"==typeof n&&n}get $title(){const n=this.$page,{metaTitle:e}=this.$page.frontmatter;if("string"==typeof e)return e;const t=this.$siteTitle,r=n.frontmatter.home?null:n.frontmatter.title||n.title;return t?r?r+" | "+t:t:r||"VuePress"}get $description(){const n=function(n){if(n){const e=n.filter(n=>"description"===n.name)[0];if(e)return e.content}}(this.$page.frontmatter.meta);return n||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}get $lang(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}get $localePath(){return this.$localeConfig.path||"/"}get $themeLocaleConfig(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}get $page(){return this.__page?this.__page:function(n,e){for(let t=0;t<n.length;t++){const r=n[t];if(r.path.toLowerCase()===e.toLowerCase())return r}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}},wl)),Vt.component("Content",Pl),Vt.component("ContentSlotsDistributor",zl),Vt.component("OutboundLink",Bl),Vt.component("ClientOnly",Ml),Vt.component("Layout",ss("Layout")),Vt.component("NotFound",ss("NotFound")),Vt.prototype.$withBase=function(n){const e=this.$site.base;return"/"===n.charAt(0)?e+n.slice(1):n},window.__VUEPRESS__={version:"1.9.2",hash:"21cd6d2"},async function(n){const e="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:wl.routerBase||wl.base,t=new Ho({base:e,mode:"history",fallback:!1,routes:yl,scrollBehavior:(n,e,t)=>t||(n.hash?!Vt.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(n.hash)}:{x:0,y:0})});!function(n){n.beforeEach((e,t,r)=>{if(Il(n,e.path))r();else if(/(\/|\.html)$/.test(e.path))if(/\/$/.test(e.path)){const t=e.path.replace(/\/$/,"")+".html";Il(n,t)?r(t):r()}else r();else{const t=e.path+"/",a=e.path+".html";Il(n,a)?r(a):Il(n,t)?r(t):r()}})}(t);const r={};try{await Promise.all(jl.filter(n=>"function"==typeof n).map(e=>e({Vue:Vt,options:r,router:t,siteData:wl,isServer:n})))}catch(n){console.error(n)}return{app:new Vt(Object.assign(r,{router:t,render:n=>n("div",{attrs:{id:"app"}},[n("RouterView",{ref:"layout"}),n("div",{class:"global-ui"},El.map(e=>n(e)))])})),router:t}}(!1).then(({app:n,router:e})=>{e.onReady(()=>{n.$mount("#app")})})}]);